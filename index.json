{
  "api/Global.AbsoluteHitDetector.html": {
    "href": "api/Global.AbsoluteHitDetector.html",
    "title": "Class AbsoluteHitDetector | Heroes of the Shrine",
    "keywords": "Class AbsoluteHitDetector An hit detector that detects hits only in the frame it is started Inheritance Object BaseHitDetector AbsoluteHitDetector Inherited Members BaseHitDetector.hitbox BaseHitDetector.hitParticles BaseHitDetector.includedHittableTags BaseHitDetector.excludedHittableTags BaseHitDetector.StartDetector(Action<HittableHitbox>, Tags) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AbsoluteHitDetector : BaseHitDetector Methods DoStartDetector(Action<HittableHitbox>) Declaration protected override void DoStartDetector(Action<HittableHitbox> hitCallable) Parameters Type Name Description Action < HittableHitbox > hitCallable Overrides BaseHitDetector.DoStartDetector(Action<HittableHitbox>) StopDetector() Declaration public override void StopDetector() Overrides BaseHitDetector.StopDetector()"
  },
  "api/Global.AggressionBrainModule.html": {
    "href": "api/Global.AggressionBrainModule.html",
    "title": "Class AggressionBrainModule | Heroes of the Shrine",
    "keywords": "Class AggressionBrainModule State machine aggression parameter, assigned with a random value (0-1) before each state transition. Can be used for randomizing transitions. Inheritance Object BaseComponent CharacterBehaviour BrainModule AggressionBrainModule Inherited Members BrainModule.StateMachine BrainModule.Awake() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AggressionBrainModule : BrainModule Methods GetParameters() Declaration public override string[] GetParameters() Returns Type Description String [] Overrides BrainModule.GetParameters()"
  },
  "api/Global.AirAttack.html": {
    "href": "api/Global.AirAttack.html",
    "title": "Class AirAttack | Heroes of the Shrine",
    "keywords": "Class AirAttack Attack that can be only be played when jumping, and does not prevent walking Inheritance Object BaseComponent CharacterBehaviour PlayableBehaviour < BaseAttack.Command > BaseAttack SimpleAttack AirAttack AirSpinAttack AltAirAttack Implements IPlayableBehaviour Inherited Members SimpleAttack.attackFlow SimpleAttack.hitDetector SimpleAttack.hitExecutor SimpleAttack.AnticipationPhase() SimpleAttack.ActivePhase() SimpleAttack.RecoveryPhase() BaseAttack.attackEvents BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.Anticipating BaseAttack.Active BaseAttack.Recovering BaseAttack.Playing BaseAttack.CanPlay(BaseAttack.Command) BaseAttack.DoPlay(BaseAttack.Command) BaseAttack.DoStop() PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.Awake() CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AirAttack : SimpleAttack, IPlayableBehaviour Properties IsMidair Declaration protected override bool IsMidair { get; } Property Value Type Description Boolean Overrides BaseAttack.IsMidair Motion Declaration protected override MotionSettings Motion { get; } Property Value Type Description MotionSettings Overrides BaseAttack.Motion Implements IPlayableBehaviour"
  },
  "api/Global.AirSpinAttack.html": {
    "href": "api/Global.AirSpinAttack.html",
    "title": "Class AirSpinAttack | Heroes of the Shrine",
    "keywords": "Class AirSpinAttack Inheritance Object BaseComponent CharacterBehaviour PlayableBehaviour < BaseAttack.Command > BaseAttack SimpleAttack AirAttack AirSpinAttack Implements IPlayableBehaviour Inherited Members AirAttack.Motion AirAttack.IsMidair SimpleAttack.attackFlow SimpleAttack.hitDetector SimpleAttack.hitExecutor SimpleAttack.AnticipationPhase() SimpleAttack.ActivePhase() SimpleAttack.RecoveryPhase() BaseAttack.attackEvents BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.Anticipating BaseAttack.Active BaseAttack.Recovering BaseAttack.Playing BaseAttack.CanPlay(BaseAttack.Command) BaseAttack.DoPlay(BaseAttack.Command) BaseAttack.DoStop() PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.Awake() CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AirSpinAttack : AirAttack, IPlayableBehaviour Implements IPlayableBehaviour"
  },
  "api/Global.AlarmBrainModule.html": {
    "href": "api/Global.AlarmBrainModule.html",
    "title": "Class AlarmBrainModule | Heroes of the Shrine",
    "keywords": "Class AlarmBrainModule State machine trigger parameter that can be used for transition between non-aggressive state to aggressive state. Must be called manually. Inheritance Object BaseComponent CharacterBehaviour BrainModule AlarmBrainModule Inherited Members BrainModule.StateMachine BrainModule.Awake() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AlarmBrainModule : BrainModule Methods GetParameters() Declaration public override string[] GetParameters() Returns Type Description String [] Overrides BrainModule.GetParameters() SetAlarm() Sets the trigger Declaration public void SetAlarm()"
  },
  "api/Global.AltAirAttack.html": {
    "href": "api/Global.AltAirAttack.html",
    "title": "Class AltAirAttack | Heroes of the Shrine",
    "keywords": "Class AltAirAttack Inheritance Object BaseComponent CharacterBehaviour PlayableBehaviour < BaseAttack.Command > BaseAttack SimpleAttack AirAttack AltAirAttack Implements IPlayableBehaviour Inherited Members AirAttack.Motion AirAttack.IsMidair SimpleAttack.attackFlow SimpleAttack.hitDetector SimpleAttack.hitExecutor SimpleAttack.AnticipationPhase() SimpleAttack.ActivePhase() SimpleAttack.RecoveryPhase() BaseAttack.attackEvents BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.Anticipating BaseAttack.Active BaseAttack.Recovering BaseAttack.Playing BaseAttack.CanPlay(BaseAttack.Command) BaseAttack.DoPlay(BaseAttack.Command) BaseAttack.DoStop() PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.Awake() CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AltAirAttack : AirAttack, IPlayableBehaviour Implements IPlayableBehaviour"
  },
  "api/Global.AltNormalAttack.html": {
    "href": "api/Global.AltNormalAttack.html",
    "title": "Class AltNormalAttack | Heroes of the Shrine",
    "keywords": "Class AltNormalAttack Inheritance Object BaseComponent CharacterBehaviour PlayableBehaviour < BaseAttack.Command > BaseAttack SimpleAttack NormalAttack AltNormalAttack Implements IPlayableBehaviour Inherited Members SimpleAttack.attackFlow SimpleAttack.hitDetector SimpleAttack.hitExecutor SimpleAttack.AnticipationPhase() SimpleAttack.ActivePhase() SimpleAttack.RecoveryPhase() BaseAttack.attackEvents BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.Motion BaseAttack.IsMidair BaseAttack.Anticipating BaseAttack.Active BaseAttack.Recovering BaseAttack.Playing BaseAttack.CanPlay(BaseAttack.Command) BaseAttack.DoPlay(BaseAttack.Command) BaseAttack.DoStop() PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.Awake() CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AltNormalAttack : NormalAttack, IPlayableBehaviour Implements IPlayableBehaviour"
  },
  "api/Global.AnimationDefinition.html": {
    "href": "api/Global.AnimationDefinition.html",
    "title": "Class AnimationDefinition | Heroes of the Shrine",
    "keywords": "Class AnimationDefinition Inheritance Object AnimationDefinition Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AnimationDefinition Fields animationStateName Declaration public string animationStateName Field Value Type Description String shadowScale Declaration public float shadowScale Field Value Type Description Single"
  },
  "api/Global.ArcBehaviour.Command.html": {
    "href": "api/Global.ArcBehaviour.Command.html",
    "title": "Class ArcBehaviour.Command | Heroes of the Shrine",
    "keywords": "Class ArcBehaviour.Command Inheritance Object ArcBehaviour.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command Constructors Command(MovableEntity, Single) Declaration public Command(MovableEntity target, float speedMultiplier) Parameters Type Name Description MovableEntity target Single speedMultiplier Fields speedMultiplier Declaration public readonly float speedMultiplier Field Value Type Description Single target Declaration public readonly MovableEntity target Field Value Type Description MovableEntity"
  },
  "api/Global.ArcBehaviour.html": {
    "href": "api/Global.ArcBehaviour.html",
    "title": "Class ArcBehaviour | Heroes of the Shrine",
    "keywords": "Class ArcBehaviour Inheritance Object BaseComponent CharacterBehaviour PlayableBehaviour < ArcBehaviour.Command > BaseMovementBehaviour < ArcBehaviour.Command > ArcBehaviour Implements IMovementBehaviour IPlayableBehaviour Inherited Members BaseMovementBehaviour<ArcBehaviour.Command>.cooldown BaseMovementBehaviour<ArcBehaviour.Command>.CanPlay(ArcBehaviour.Command) PlayableBehaviour<ArcBehaviour.Command>.PlayEvents PlayableBehaviour<ArcBehaviour.Command>.Play(ArcBehaviour.Command) PlayableBehaviour<ArcBehaviour.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ArcBehaviour : BaseMovementBehaviour<ArcBehaviour.Command>, IMovementBehaviour, IPlayableBehaviour Properties Playing Declaration public override bool Playing { get; } Property Value Type Description Boolean Overrides PlayableBehaviour<ArcBehaviour.Command>.Playing Methods Awake() Declaration protected override void Awake() Overrides BaseMovementBehaviour<ArcBehaviour.Command>.Awake() DoPlay(ArcBehaviour.Command) Declaration protected override void DoPlay(ArcBehaviour.Command command) Parameters Type Name Description ArcBehaviour.Command command Overrides PlayableBehaviour<ArcBehaviour.Command>.DoPlay(ArcBehaviour.Command) DoStop() Declaration protected override void DoStop() Overrides PlayableBehaviour<ArcBehaviour.Command>.DoStop() Implements IMovementBehaviour IPlayableBehaviour"
  },
  "api/Global.ArcPattern.html": {
    "href": "api/Global.ArcPattern.html",
    "title": "Class ArcPattern | Heroes of the Shrine",
    "keywords": "Class ArcPattern Inheritance Object BasePattern ArcPattern Inherited Members BasePattern.hasRandomExitTime BasePattern.minTime BasePattern.maxTime BasePattern.OnEnter BasePattern.OnExit BasePattern.OnStateUpdate(Animator, AnimatorStateInfo, Int32) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ArcPattern : BasePattern Fields speedMultiplier Declaration public float speedMultiplier Field Value Type Description Single targetTag Declaration public Tag targetTag Field Value Type Description Tag Methods OnStateEnter(Animator, AnimatorStateInfo, Int32) Declaration public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description Animator animator AnimatorStateInfo stateInfo Int32 layerIndex Overrides BasePattern.OnStateEnter(Animator, AnimatorStateInfo, Int32) OnStateExit(Animator, AnimatorStateInfo, Int32) Declaration public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description Animator animator AnimatorStateInfo stateInfo Int32 layerIndex Overrides BasePattern.OnStateExit(Animator, AnimatorStateInfo, Int32)"
  },
  "api/Global.AttackEvents.html": {
    "href": "api/Global.AttackEvents.html",
    "title": "Class AttackEvents | Heroes of the Shrine",
    "keywords": "Class AttackEvents Contains start and finish events for all attack phases Inheritance Object AttackEvents Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AttackEvents Fields onFinishActive Declaration public ExtEvent onFinishActive Field Value Type Description ExtEvent Attack active phase has finished, also fires if the attack was stopped while in active phase onFinishAnticipating Declaration public ExtEvent onFinishAnticipating Field Value Type Description ExtEvent Attack anticipation has finished, also fires if the attack was stopped while in anticipation onFinishRecovery Declaration public ExtEvent onFinishRecovery Field Value Type Description ExtEvent Attack recovery has finished, also fires if the attack was stopped while in recovery onStartActive Declaration public ExtEvent onStartActive Field Value Type Description ExtEvent Attack active phase has started onStartAnticipating Declaration public ExtEvent onStartAnticipating Field Value Type Description ExtEvent Attack anticipation has started onStartRecovery Declaration public ExtEvent onStartRecovery Field Value Type Description ExtEvent Attack recovery has started"
  },
  "api/Global.AttackManager.html": {
    "href": "api/Global.AttackManager.html",
    "title": "Class AttackManager | Heroes of the Shrine",
    "keywords": "Class AttackManager Behaviour that runs operation on all attacks Inheritance Object BaseComponent CharacterBehaviour AttackManager Inherited Members CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AttackManager : CharacterBehaviour Fields attackEvents Declaration public AttackEvents attackEvents Field Value Type Description AttackEvents General attack events. These events are invoked whenever a matching event is invoked in any attack. hittableTags Declaration public Tags hittableTags Field Value Type Description Tags Tags of objects that can get hit by character's attacks lastAttack Last attack dealt Declaration public BaseAttack lastAttack Field Value Type Description BaseAttack maxComboDelay Declaration public float maxComboDelay Field Value Type Description Single Time after attack finished, that it is removed from combo history playEvents Declaration public PlayEvents playEvents Field Value Type Description PlayEvents Attacks play and stop events. Whenever any attack starts or stops, these events are invoked. Properties DamageTranspiler Declaration public DamageTranspiler DamageTranspiler { get; } Property Value Type Description DamageTranspiler Damage transpiler Playing Declaration public bool Playing { get; } Property Value Type Description Boolean Any attack is playing Methods Awake() Declaration protected override void Awake() Overrides CharacterBehaviour.Awake() CanPlayMove(Boolean) Checks if a move can be played Declaration public bool CanPlayMove(bool instant = false) Parameters Type Name Description Boolean instant Is the checked move instant Returns Type Description Boolean true if move can be played"
  },
  "api/Global.AttackNode.html": {
    "href": "api/Global.AttackNode.html",
    "title": "Class AttackNode | Heroes of the Shrine",
    "keywords": "Class AttackNode Inheritance Object AttackNode Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AttackNode Fields attackType Declaration public TypeReference attackType Field Value Type Description TypeReference startTime Declaration public float startTime Field Value Type Description Single"
  },
  "api/Global.AttackPattern.html": {
    "href": "api/Global.AttackPattern.html",
    "title": "Class AttackPattern | Heroes of the Shrine",
    "keywords": "Class AttackPattern Inheritance Object BasePattern AttackPattern Inherited Members BasePattern.hasRandomExitTime BasePattern.minTime BasePattern.maxTime BasePattern.OnEnter BasePattern.OnExit BasePattern.OnStateUpdate(Animator, AnimatorStateInfo, Int32) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AttackPattern : BasePattern Fields attacks Declaration public List<AttackNode> attacks Field Value Type Description List < AttackNode > targetTag Declaration public Tag targetTag Field Value Type Description Tag Methods OnStateEnter(Animator, AnimatorStateInfo, Int32) Declaration public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description Animator animator AnimatorStateInfo stateInfo Int32 layerIndex Overrides BasePattern.OnStateEnter(Animator, AnimatorStateInfo, Int32) OnStateExit(Animator, AnimatorStateInfo, Int32) Declaration public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description Animator animator AnimatorStateInfo stateInfo Int32 layerIndex Overrides BasePattern.OnStateExit(Animator, AnimatorStateInfo, Int32)"
  },
  "api/Global.AudioManager.html": {
    "href": "api/Global.AudioManager.html",
    "title": "Class AudioManager | Heroes of the Shrine",
    "keywords": "Class AudioManager Singleton responsible for playing background music and SFX Inheritance Object BaseComponent AudioManager Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AudioManager : BaseComponent Properties Instance Declaration public static AudioManager Instance { get; } Property Value Type Description AudioManager Instance of the singleton MusicVolume Declaration public float MusicVolume { get; set; } Property Value Type Description Single Volume of background music (0-1) SoundVolume Declaration public float SoundVolume { get; set; } Property Value Type Description Single Volume of SFX (0-1) Methods Play(AudioClip) Plays a sound effect. Not affecting other sound effects or background music, meaning two clips can be played simultaneously Declaration public static void Play(AudioClip clip) Parameters Type Name Description AudioClip clip Audio asset to play PlayBackground(AudioClip) Plays a new background music. If a previous clip was played, it will be replaced Declaration public static void PlayBackground(AudioClip clip) Parameters Type Name Description AudioClip clip Audio asset to play StopBackground() Stops background music. If it wasn't playing, then nothing happens Declaration public static void StopBackground()"
  },
  "api/Global.AutoWalkBehaviour.Command.html": {
    "href": "api/Global.AutoWalkBehaviour.Command.html",
    "title": "Class AutoWalkBehaviour.Command | Heroes of the Shrine",
    "keywords": "Class AutoWalkBehaviour.Command Inheritance Object AutoWalkBehaviour.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command Constructors Command(Vector3, Func<Node[]>) Declaration public Command(Vector3 destination, Func<Node[]> getExcluded = null) Parameters Type Name Description Vector3 destination Func < Node []> getExcluded Fields destination Declaration public readonly Vector3 destination Field Value Type Description Vector3 getExcluded Declaration public readonly Func<Node[]> getExcluded Field Value Type Description Func < Node []>"
  },
  "api/Global.AutoWalkBehaviour.html": {
    "href": "api/Global.AutoWalkBehaviour.html",
    "title": "Class AutoWalkBehaviour | Heroes of the Shrine",
    "keywords": "Class AutoWalkBehaviour Inheritance Object BaseComponent CharacterBehaviour PlayableBehaviour < AutoWalkBehaviour.Command > BaseMovementBehaviour < AutoWalkBehaviour.Command > AutoWalkBehaviour Implements IMovementBehaviour IPlayableBehaviour Inherited Members BaseMovementBehaviour<AutoWalkBehaviour.Command>.cooldown BaseMovementBehaviour<AutoWalkBehaviour.Command>.CanPlay(AutoWalkBehaviour.Command) PlayableBehaviour<AutoWalkBehaviour.Command>.PlayEvents PlayableBehaviour<AutoWalkBehaviour.Command>.Play(AutoWalkBehaviour.Command) PlayableBehaviour<AutoWalkBehaviour.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AutoWalkBehaviour : BaseMovementBehaviour<AutoWalkBehaviour.Command>, IMovementBehaviour, IPlayableBehaviour Properties Playing Declaration public override bool Playing { get; } Property Value Type Description Boolean Overrides PlayableBehaviour<AutoWalkBehaviour.Command>.Playing Methods Awake() Declaration protected override void Awake() Overrides BaseMovementBehaviour<AutoWalkBehaviour.Command>.Awake() DoPlay(AutoWalkBehaviour.Command) Declaration protected override void DoPlay(AutoWalkBehaviour.Command command) Parameters Type Name Description AutoWalkBehaviour.Command command Overrides PlayableBehaviour<AutoWalkBehaviour.Command>.DoPlay(AutoWalkBehaviour.Command) DoStop() Declaration protected override void DoStop() Overrides PlayableBehaviour<AutoWalkBehaviour.Command>.DoStop() Implements IMovementBehaviour IPlayableBehaviour"
  },
  "api/Global.BaseAttack.Command.html": {
    "href": "api/Global.BaseAttack.Command.html",
    "title": "Class BaseAttack.Command | Heroes of the Shrine",
    "keywords": "Class BaseAttack.Command Inheritance Object BaseAttack.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command"
  },
  "api/Global.BaseAttack.html": {
    "href": "api/Global.BaseAttack.html",
    "title": "Class BaseAttack | Heroes of the Shrine",
    "keywords": "Class BaseAttack Base class for all attacks. Most attacks should derive from SimpleAttack , which has more members and helper methods. Inheritance Object BaseComponent CharacterBehaviour PlayableBehaviour < BaseAttack.Command > BaseAttack ElectrifyAttack MotionAttack PossessAttack SimpleAttack SpawnAttack SpinningSwordsAttack Implements IPlayableBehaviour Inherited Members PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.Awake() CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public abstract class BaseAttack : PlayableBehaviour<BaseAttack.Command>, IPlayableBehaviour Fields attackEvents Declaration public AttackEvents attackEvents Field Value Type Description AttackEvents General attack events hardRecovery Declaration public bool hardRecovery Field Value Type Description Boolean If true , The attack cannot be interrupted while BaseAttack.Recovering is true. instant Declaration public bool instant Field Value Type Description Boolean If true, the attack can be played while another interruptible attack is playing. interruptible Declaration public bool interruptible Field Value Type Description Boolean If true, an instant attack can replace it while this attack is playing. previousAttacks Declaration public List<BaseAttack> previousAttacks Field Value Type Description List < BaseAttack > This attack can be played only if the previous attack is one of the previousAttacks . If the attack can also be played without a previous attack, add null to the list. If the list is left empty, the attack can be played after any attack (including null ). Properties Active Declaration public bool Active { get; } Property Value Type Description Boolean Attack is active. It also sets the animator parameter: {attackName}-active . Anticipating Declaration public bool Anticipating { get; } Property Value Type Description Boolean Attack is anticipating. It also sets the animator parameter: {attackName}-anticipating . IsMidair Declaration protected virtual bool IsMidair { get; } Property Value Type Description Boolean If true , this attack can only play when JumpBehaviour is playing Motion Declaration protected virtual MotionSettings Motion { get; } Property Value Type Description MotionSettings Motion setting Playing Declaration public override bool Playing { get; } Property Value Type Description Boolean Overrides PlayableBehaviour<BaseAttack.Command>.Playing Recovering Declaration public bool Recovering { get; } Property Value Type Description Boolean Attack is recovering. It also sets the animator parameter: {attackName}-recovering . Methods ActivePhase() Active phase coroutine Declaration protected abstract IEnumerator ActivePhase() Returns Type Description IEnumerator AnticipationPhase() Anticipation phase coroutine Declaration protected abstract IEnumerator AnticipationPhase() Returns Type Description IEnumerator CanPlay(BaseAttack.Command) Declaration public override bool CanPlay(BaseAttack.Command command) Parameters Type Name Description BaseAttack.Command command Returns Type Description Boolean Overrides PlayableBehaviour<BaseAttack.Command>.CanPlay(BaseAttack.Command) DoPlay(BaseAttack.Command) Play the attack phases Declaration protected override void DoPlay(BaseAttack.Command command) Parameters Type Name Description BaseAttack.Command command Overrides PlayableBehaviour<BaseAttack.Command>.DoPlay(BaseAttack.Command) DoStop() Stops the attack immediately in any of its phases. Can be safely called even if attack is not currently playing, as it will do nothing. Declaration protected override void DoStop() Overrides PlayableBehaviour<BaseAttack.Command>.DoStop() RecoveryPhase() Recovery phase coroutine Declaration protected abstract IEnumerator RecoveryPhase() Returns Type Description IEnumerator Implements IPlayableBehaviour"
  },
  "api/Global.BaseComponent.html": {
    "href": "api/Global.BaseComponent.html",
    "title": "Class BaseComponent | Heroes of the Shrine",
    "keywords": "Class BaseComponent Base class for every component, extending with more features Inheritance Object BaseComponent AudioManager BaseTrigger CameraFocus CameraFollow CameraMovement Character CharacterBehaviour CutsceneAction DeathPanel DelayedEvent DestroyAction EffectBar EffectsBar EncounterAction EntityManager EventManager EventWrapper FadePanel Figure FullScreenToggle GameEntity GameManager HealthBar Hitbox HitParticles HittableHitbox KillEntitiesAction MenuManager MoveCamera MusicVolumeSlider Particles Pathfind PauseManager PlayOnce PossessedHumanBrain PossessSource PossessSourcesDestroyAction ShadowObject SoundEffect SoundEffectsVolumeSlider StopEncountersAction SuperArmorBar TextLink TransitionAction WalkableGrid WalkSoundEffect WaveAnnouncer Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BaseComponent : MonoBehaviour Methods Cancel(String) Cancels a callable with given id. Nothing happens if is not an existing callable Declaration protected void Cancel(string id) Parameters Type Name Description String id ID of the callable to cancel InvokeWhen(Func<Boolean>, Action) Executes a callable when a condition is met Declaration protected string InvokeWhen(Func<bool> condition, Action action) Parameters Type Name Description Func < Boolean > condition Condition to check every frame Action action Callable to execute Returns Type Description String ID of the registered callable Register(Action) Executes a callable every frame Declaration protected string Register(Action action) Parameters Type Name Description Action action Callable to execute Returns Type Description String ID of the registered callable StartInterval(Action, Single) Executes a callable repeatedly with a time delay between each call Declaration protected string StartInterval(Action action, float interval) Parameters Type Name Description Action action Callable to execute Single interval Time to wait between executions, in seconds Returns Type Description String ID of the registered callable StartTimeout(Action, Single) Executes a callable after a certain delay Declaration protected string StartTimeout(Action action, float timeout) Parameters Type Name Description Action action Callable to execute Single timeout Time to wait before execution, in seconds Returns Type Description String ID of the registered callable Unregister(String) Unregisters a callable with given id. Nothing happens if is not an existing callable Declaration protected void Unregister(string id) Parameters Type Name Description String id ID of the callable to unregister Update() Declaration protected virtual void Update()"
  },
  "api/Global.BaseEffect-1.html": {
    "href": "api/Global.BaseEffect-1.html",
    "title": "Class BaseEffect<T> | Heroes of the Shrine",
    "keywords": "Class BaseEffect<T> Base class for effects that character can receive by getting hit Inheritance Object BaseComponent CharacterBehaviour PlayableBehaviour <T> BaseEffect<T> ElectrifiedEffect FireEffect PossessedEffect Implements IEffect IPlayableBehaviour Inherited Members PlayableBehaviour<T>.PlayEvents PlayableBehaviour<T>.Play(T) PlayableBehaviour<T>.DoPlay(T) PlayableBehaviour<T>.Stop() PlayableBehaviour<T>.DoStop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.Awake() CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public abstract class BaseEffect<T> : PlayableBehaviour<T>, IEffect, IPlayableBehaviour Type Parameters Name Description T Type of play command Properties Active Declaration public bool Active { get; protected set; } Property Value Type Description Boolean Is the effect currently active Playing Declaration public override bool Playing { get; } Property Value Type Description Boolean Overrides PlayableBehaviour<T>.Playing Methods CanPlay(T) Declaration public override bool CanPlay(T command) Parameters Type Name Description T command Returns Type Description Boolean Overrides PlayableBehaviour<T>.CanPlay(T) GetProgress() Declaration public abstract float GetProgress() Returns Type Description Single Progress of the effect from 0 to 1. Can be used by UI elements to display the progress Implements IEffect IPlayableBehaviour"
  },
  "api/Global.BaseHitDetector.html": {
    "href": "api/Global.BaseHitDetector.html",
    "title": "Class BaseHitDetector | Heroes of the Shrine",
    "keywords": "Class BaseHitDetector Abstract base class for hit detectors, responsible for detecting hits and calling a given function for every hit object Inheritance Object BaseHitDetector AbsoluteHitDetector PeriodicAbsoluteHitDetector PeriodicRelativeHitDetector SingleHitDetector Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public abstract class BaseHitDetector Fields excludedHittableTags Declaration public Tags excludedHittableTags Field Value Type Description Tags Tags of objects this attack cannot hit. hitbox Declaration public Hitbox hitbox Field Value Type Description Hitbox Attached hitbox hitParticles Declaration public HitParticles hitParticles Field Value Type Description HitParticles Attached hit particles includedHittableTags Declaration public Tags includedHittableTags Field Value Type Description Tags Additional tags of objects this attack can hit. Methods DoStartDetector(Action<HittableHitbox>) Abstract method that starts detecting hits. Implementations should include the concrete logic of hit detection. Declaration protected abstract void DoStartDetector(Action<HittableHitbox> hitCallable) Parameters Type Name Description Action < HittableHitbox > hitCallable Function to be called on detected hit StartDetector(Action<HittableHitbox>, Tags) Starts detecting hits Declaration public void StartDetector(Action<HittableHitbox> hitCallable, Tags hittableTags) Parameters Type Name Description Action < HittableHitbox > hitCallable Function to be called on detected hit Tags hittableTags Tags of object that can get hit StopDetector() Abstract method that stops detecting hits. Implementations should stop anything that BaseHitDetector.DoStartDetector(Action{HittableHitbox}) started. Declaration public abstract void StopDetector()"
  },
  "api/Global.BaseMovementBehaviour-1.html": {
    "href": "api/Global.BaseMovementBehaviour-1.html",
    "title": "Class BaseMovementBehaviour<T> | Heroes of the Shrine",
    "keywords": "Class BaseMovementBehaviour<T> Inheritance Object BaseComponent CharacterBehaviour PlayableBehaviour <T> BaseMovementBehaviour<T> ArcBehaviour AutoWalkBehaviour DodgeBehaviour EscapeBehaviour FollowBehaviour JumpBehaviour RunBehaviour SlideBehaviour WalkBehaviour Implements IMovementBehaviour IPlayableBehaviour Inherited Members PlayableBehaviour<T>.PlayEvents PlayableBehaviour<T>.Playing PlayableBehaviour<T>.Play(T) PlayableBehaviour<T>.DoPlay(T) PlayableBehaviour<T>.Stop() PlayableBehaviour<T>.DoStop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public abstract class BaseMovementBehaviour<T> : PlayableBehaviour<T>, IMovementBehaviour, IPlayableBehaviour Type Parameters Name Description T Fields cooldown Declaration public float cooldown Field Value Type Description Single Methods Awake() Declaration protected override void Awake() Overrides CharacterBehaviour.Awake() CanPlay(T) Declaration public override bool CanPlay(T command) Parameters Type Name Description T command Returns Type Description Boolean Overrides PlayableBehaviour<T>.CanPlay(T) Implements IMovementBehaviour IPlayableBehaviour"
  },
  "api/Global.BasePattern.html": {
    "href": "api/Global.BasePattern.html",
    "title": "Class BasePattern | Heroes of the Shrine",
    "keywords": "Class BasePattern Inheritance Object BasePattern ArcPattern AttackPattern EscapePattern FollowPattern IdlePattern RandomRayPattern RepositionPattern Namespace : Global Assembly : cs.temp.dll.dll Syntax public abstract class BasePattern : StateMachineBehaviour Fields hasRandomExitTime Declaration public bool hasRandomExitTime Field Value Type Description Boolean maxTime Declaration public float maxTime Field Value Type Description Single minTime Declaration public float minTime Field Value Type Description Single Methods OnStateEnter(Animator, AnimatorStateInfo, Int32) Declaration public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description Animator animator AnimatorStateInfo stateInfo Int32 layerIndex OnStateExit(Animator, AnimatorStateInfo, Int32) Declaration public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description Animator animator AnimatorStateInfo stateInfo Int32 layerIndex OnStateUpdate(Animator, AnimatorStateInfo, Int32) Declaration public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description Animator animator AnimatorStateInfo stateInfo Int32 layerIndex Events OnEnter Declaration public event Action OnEnter Event Type Type Description Action OnExit Declaration public event Action OnExit Event Type Type Description Action"
  },
  "api/Global.BasePatternEditor.html": {
    "href": "api/Global.BasePatternEditor.html",
    "title": "Class BasePatternEditor | Heroes of the Shrine",
    "keywords": "Class BasePatternEditor Inheritance Object BasePatternEditor Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BasePatternEditor : Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Global.BaseTrigger.html": {
    "href": "api/Global.BaseTrigger.html",
    "title": "Class BaseTrigger | Heroes of the Shrine",
    "keywords": "Class BaseTrigger Inheritance Object BaseComponent BaseTrigger LineTrigger RectTrigger Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public abstract class BaseTrigger : BaseComponent Fields action Declaration public ExtEvent action Field Value Type Description ExtEvent"
  },
  "api/Global.BossHittableHitbox.html": {
    "href": "api/Global.BossHittableHitbox.html",
    "title": "Class BossHittableHitbox | Heroes of the Shrine",
    "keywords": "Class BossHittableHitbox HittableHitbox that converts knockback to stun Inheritance Object BaseComponent HittableHitbox BossHittableHitbox Implements IHittable Inherited Members HittableHitbox.hittableBehaviour HittableHitbox.onHit HittableHitbox.figure HittableHitbox.blinkMaterial HittableHitbox.blinkTime HittableHitbox.Hitbox HittableHitbox.Awake() HittableHitbox.Character HittableHitbox.Blink() HittableHitbox.CanGetHit() HittableHitbox.Hit(Single) HittableHitbox.Stun(Single) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BossHittableHitbox : HittableHitbox, IHittable Methods Knockback(Single, Single, Single) Declaration public override void Knockback(float power, float angleDegrees, float stunTime) Parameters Type Name Description Single power Single angleDegrees Single stunTime Overrides HittableHitbox.Knockback(Single, Single, Single) Implements IHittable"
  },
  "api/Global.BounceCallback.html": {
    "href": "api/Global.BounceCallback.html",
    "title": "Delegate BounceCallback | Heroes of the Shrine",
    "keywords": "Delegate BounceCallback Namespace : Global Assembly : cs.temp.dll.dll Syntax public delegate void BounceCallback(int count, float power, float angleDegrees); Parameters Type Name Description Int32 count Single power Single angleDegrees"
  },
  "api/Global.BrainCore.html": {
    "href": "api/Global.BrainCore.html",
    "title": "Class BrainCore | Heroes of the Shrine",
    "keywords": "Class BrainCore Enemies brain is designed with modular pieces called brain modules. BrainCore class managing state machine and all brain modules. Attach only the required brain modules for your state machine logic. Inheritance Object BaseComponent CharacterBehaviour CharacterController BrainCore Inherited Members CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BrainCore : CharacterController Properties StateMachine Declaration public Animator StateMachine { get; } Property Value Type Description Animator Animator component that contains the state machine logic Methods Awake() Declaration protected override void Awake() Overrides CharacterBehaviour.Awake()"
  },
  "api/Global.BrainModule.html": {
    "href": "api/Global.BrainModule.html",
    "title": "Class BrainModule | Heroes of the Shrine",
    "keywords": "Class BrainModule Modular piece of enemy brain. This is a base abstract class for any brain module Inheritance Object BaseComponent CharacterBehaviour BrainModule AggressionBrainModule AlarmBrainModule ClosestEnemyBrainModule ClosestToPlayerBrainModule DieBrainModule DistancesBrainModule EnemiesAttackingBrainModule EnemyCountBrainModule EnragedBrainModule HealthBrainModule KnockbackBrainModule PlayerAttackBrainModule PlayerDistanceBrainModule PlayerKnockbackBrainModule PlayerStunBrainModule StunBrainModule SuperArmorBrainModule Inherited Members CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public abstract class BrainModule : CharacterBehaviour Properties StateMachine Declaration protected Animator StateMachine { get; } Property Value Type Description Animator Animator component that contains the state machine logic Methods Awake() Declaration protected override void Awake() Overrides CharacterBehaviour.Awake() GetParameters() The parameters provided by this method will be used to show the parameter names that should be added in state machine Declaration public abstract string[] GetParameters() Returns Type Description String [] Parameter names provided by this module"
  },
  "api/Global.BrainModuleEditor.html": {
    "href": "api/Global.BrainModuleEditor.html",
    "title": "Class BrainModuleEditor | Heroes of the Shrine",
    "keywords": "Class BrainModuleEditor Inheritance Object BrainModuleEditor Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BrainModuleEditor : Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Global.Button.html": {
    "href": "api/Global.Button.html",
    "title": "Enum Button | Heroes of the Shrine",
    "keywords": "Enum Button Button options Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum Button Fields Name Description Attack Defense Escape Jump"
  },
  "api/Global.CameraFocus.html": {
    "href": "api/Global.CameraFocus.html",
    "title": "Class CameraFocus | Heroes of the Shrine",
    "keywords": "Class CameraFocus Zooms the camera smoothly Inheritance Object BaseComponent CameraFocus Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class CameraFocus : BaseComponent Fields lerpSpeed Declaration public float lerpSpeed Field Value Type Description Single The speed at which camera size is changing. Higher value is quicker (and less smooth). Methods Zoom(Single) Starts zooming Declaration public void Zoom(float factor) Parameters Type Name Description Single factor Multiplier by which size is increased"
  },
  "api/Global.CameraFollow.html": {
    "href": "api/Global.CameraFollow.html",
    "title": "Class CameraFollow | Heroes of the Shrine",
    "keywords": "Class CameraFollow Make camera follow an entity Inheritance Object BaseComponent CameraFollow Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class CameraFollow : BaseComponent Fields target Declaration public GameEntity target Field Value Type Description GameEntity Tracked entity Methods AddOffset(Vector3) Modify the distance between camera and the tracked object Declaration public void AddOffset(Vector3 change) Parameters Type Name Description Vector3 change Offset vector to add. will leave it the same."
  },
  "api/Global.CameraMovement.html": {
    "href": "api/Global.CameraMovement.html",
    "title": "Class CameraMovement | Heroes of the Shrine",
    "keywords": "Class CameraMovement Moves the camera smoothly inside a rectangle border Inheritance Object BaseComponent CameraMovement Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class CameraMovement : BaseComponent Fields border Declaration public Rect border Field Value Type Description Rect Current border, affected by encounters lerpSpeed Declaration public float lerpSpeed Field Value Type Description Single The speed at which camera is moving. Higher value is quicker (and less smooth). targetPosition Declaration public Vector3 targetPosition Field Value Type Description Vector3 The wanted position of the camera worldBorder Declaration public Rect worldBorder Field Value Type Description Rect Full scene border Methods Lock(Rect) Sets a new camera border Declaration public void Lock(Rect newBorder) Parameters Type Name Description Rect newBorder New camera border Unlock() Changes camera border back to the initial Declaration public void Unlock()"
  },
  "api/Global.ChainHitExecutor.html": {
    "href": "api/Global.ChainHitExecutor.html",
    "title": "Class ChainHitExecutor | Heroes of the Shrine",
    "keywords": "Class ChainHitExecutor Composite hit executor that executes all executors one by one Inheritance Object ChainHitExecutor Implements IHitExecutor Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ChainHitExecutor : IHitExecutor Fields executors Declaration public IHitExecutor[] executors Field Value Type Description IHitExecutor [] Methods Execute(BaseAttack, IHittable) Declaration public void Execute(BaseAttack attack, IHittable hittable) Parameters Type Name Description BaseAttack attack IHittable hittable Implements IHitExecutor"
  },
  "api/Global.Character.html": {
    "href": "api/Global.Character.html",
    "title": "Class Character | Heroes of the Shrine",
    "keywords": "Class Character Shared methods and common components references for characters Inheritance Object BaseComponent Character Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Character : BaseComponent Fields animator Declaration public Animator animator Field Value Type Description Animator Animator of the figure (related ) attackManager Declaration public AttackManager attackManager Field Value Type Description AttackManager Attached AttackManager , possibly null movableEntity Declaration public MovableEntity movableEntity Field Value Type Description MovableEntity Attached MovableEntity physicalAttributes Declaration public PhysicalAttributes physicalAttributes Field Value Type Description PhysicalAttributes Physical attributes Methods DisableBehaviours(Type[]) Disables behaviours, meaning they cannot be played. If a behaviour is disabled N times, it will have to be enabled N times so it can be played. Declaration public void DisableBehaviours(params Type[] behaviours) Parameters Type Name Description Type [] behaviours Behaviours to disable. All of the attached behaviours from each type will be enabled. EnableBehaviours(Type[]) Enables behaviours, meaning they can be played Declaration public void EnableBehaviours(params Type[] behaviours) Parameters Type Name Description Type [] behaviours Behaviours to enable. All of the attached behaviours from each type will be enabled. IsPlaying<T>() Checks if any of the attached behaviours from type T are playing Declaration public bool IsPlaying<T>() where T : IPlayableBehaviour Returns Type Description Boolean true if any is playing Type Parameters Name Description T Type of the behaviour StopBehaviours(Type[]) Stops behaviours if they where playing Declaration public void StopBehaviours(params Type[] behaviours) Parameters Type Name Description Type [] behaviours Behaviours to stop. All of the attached behaviours from each type will be stopped."
  },
  "api/Global.CharacterBehaviour.html": {
    "href": "api/Global.CharacterBehaviour.html",
    "title": "Class CharacterBehaviour | Heroes of the Shrine",
    "keywords": "Class CharacterBehaviour Base class for all character behaviours. Contains useful methods and references to other components. Inheritance Object BaseComponent CharacterBehaviour AttackManager BrainModule CharacterController DieBehaviour HealthSystem HittableBehaviour PlayableBehaviour<T> Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public abstract class CharacterBehaviour : BaseComponent Properties Animator Declaration protected Animator Animator { get; } Property Value Type Description Animator Animator of the figure (related ) AttackManager Declaration public AttackManager AttackManager { get; } Property Value Type Description AttackManager Attached CharacterBehaviour.AttackManager , possibly null Character Declaration public Character Character { get; } Property Value Type Description Character Character reference Enabled If true , the behaviour can be played. Can be set to false multiple times, as it will change back to true only if it was set to true the same number of times. Declaration public bool Enabled { get; set; } Property Value Type Description Boolean MovableEntity Declaration public MovableEntity MovableEntity { get; } Property Value Type Description MovableEntity Attached CharacterBehaviour.MovableEntity Methods Awake() Declaration protected virtual void Awake() DisableBehaviours(Type[]) Disables behaviours, meaning they cannot be played. If a behaviour is disabled N times, it will have to be enabled N times so it can be played. Declaration protected void DisableBehaviours(params Type[] behaviours) Parameters Type Name Description Type [] behaviours Behaviours to disable. All of the attached behaviours from each type will be enabled. EnableBehaviours(Type[]) Enables behaviours, meaning they can be played Declaration protected void EnableBehaviours(params Type[] behaviours) Parameters Type Name Description Type [] behaviours Behaviours to enable. All of the attached behaviours from each type will be enabled. IsPlaying<T>() Checks if any of the attached behaviours from type T are playing Declaration protected bool IsPlaying<T>() where T : IPlayableBehaviour Returns Type Description Boolean true if any is playing Type Parameters Name Description T Type of the behaviour StopBehaviours(Type[]) Stops behaviours if they where playing Declaration protected void StopBehaviours(params Type[] behaviours) Parameters Type Name Description Type [] behaviours Behaviours to stop. All of the attached behaviours from each type will be stopped."
  },
  "api/Global.CharacterController.html": {
    "href": "api/Global.CharacterController.html",
    "title": "Class CharacterController | Heroes of the Shrine",
    "keywords": "Class CharacterController Base class for any character controller Inheritance Object BaseComponent CharacterBehaviour CharacterController BrainCore PlayerController Inherited Members CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.Awake() CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class CharacterController : CharacterBehaviour"
  },
  "api/Global.ClosestEnemyBrainModule.html": {
    "href": "api/Global.ClosestEnemyBrainModule.html",
    "title": "Class ClosestEnemyBrainModule | Heroes of the Shrine",
    "keywords": "Class ClosestEnemyBrainModule State machine parameter telling the distance from the closest enemy Inheritance Object BaseComponent CharacterBehaviour BrainModule ClosestEnemyBrainModule Inherited Members BrainModule.StateMachine BrainModule.Awake() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ClosestEnemyBrainModule : BrainModule Methods GetParameters() Declaration public override string[] GetParameters() Returns Type Description String [] Overrides BrainModule.GetParameters() Update() Declaration protected override void Update() Overrides BaseComponent.Update()"
  },
  "api/Global.ClosestToPlayerBrainModule.html": {
    "href": "api/Global.ClosestToPlayerBrainModule.html",
    "title": "Class ClosestToPlayerBrainModule | Heroes of the Shrine",
    "keywords": "Class ClosestToPlayerBrainModule State machine parameter telling if this is the closest enemy to the player Inheritance Object BaseComponent CharacterBehaviour BrainModule ClosestToPlayerBrainModule Inherited Members BrainModule.StateMachine BrainModule.Awake() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ClosestToPlayerBrainModule : BrainModule Methods GetParameters() Declaration public override string[] GetParameters() Returns Type Description String [] Overrides BrainModule.GetParameters() Update() Declaration protected override void Update() Overrides BaseComponent.Update()"
  },
  "api/Global.CutsceneAction.html": {
    "href": "api/Global.CutsceneAction.html",
    "title": "Class CutsceneAction | Heroes of the Shrine",
    "keywords": "Class CutsceneAction Moves entities to predefined points and then plays a cutscene timeline Inheritance Object BaseComponent CutsceneAction Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class CutsceneAction : BaseComponent Fields director Declaration public PlayableDirector director Field Value Type Description PlayableDirector moveDefinitions Declaration public List<CutsceneAction.MoveDefinition> moveDefinitions Field Value Type Description List < CutsceneAction.MoveDefinition > playOnAwake Declaration public bool playOnAwake Field Value Type Description Boolean postCutsceneEvent Declaration public ExtEvent postCutsceneEvent Field Value Type Description ExtEvent Methods Invoke() Declaration public void Invoke()"
  },
  "api/Global.CutsceneAction.MoveDefinition.html": {
    "href": "api/Global.CutsceneAction.MoveDefinition.html",
    "title": "Class CutsceneAction.MoveDefinition | Heroes of the Shrine",
    "keywords": "Class CutsceneAction.MoveDefinition Inheritance Object CutsceneAction.MoveDefinition Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class MoveDefinition Fields lookDirection Declaration public Rotation lookDirection Field Value Type Description Rotation position Declaration public Vector3 position Field Value Type Description Vector3 speedMultiplier Declaration public float speedMultiplier Field Value Type Description Single target Declaration public ForcedWalkBehaviour target Field Value Type Description ForcedWalkBehaviour"
  },
  "api/Global.DamageHitExecutor.html": {
    "href": "api/Global.DamageHitExecutor.html",
    "title": "Class DamageHitExecutor | Heroes of the Shrine",
    "keywords": "Class DamageHitExecutor Hit executor that deals damage to an hittable Inheritance Object DamageHitExecutor Implements IHitExecutor Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class DamageHitExecutor : IHitExecutor Fields damage Declaration public float damage Field Value Type Description Single Health reduced to hit characters Methods Execute(BaseAttack, IHittable) Declaration public void Execute(BaseAttack attack, IHittable hittable) Parameters Type Name Description BaseAttack attack IHittable hittable Implements IHitExecutor"
  },
  "api/Global.DamageTranspiler.DamageBonus.html": {
    "href": "api/Global.DamageTranspiler.DamageBonus.html",
    "title": "Delegate DamageTranspiler.DamageBonus | Heroes of the Shrine",
    "keywords": "Delegate DamageTranspiler.DamageBonus Damage bonus delegate Namespace : Global Assembly : cs.temp.dll.dll Syntax public delegate float DamageBonus(BaseAttack attack, IHittable hittable); Parameters Type Name Description BaseAttack attack IHittable hittable Returns Type Description Single"
  },
  "api/Global.DamageTranspiler.html": {
    "href": "api/Global.DamageTranspiler.html",
    "title": "Class DamageTranspiler | Heroes of the Shrine",
    "keywords": "Class DamageTranspiler Class responsible for processing damage values for the character dealing damage Inheritance Object DamageTranspiler Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class DamageTranspiler Constructors DamageTranspiler() Initializes a DamageTranspiler Declaration public DamageTranspiler() Methods AttachDamageBonus(DamageTranspiler.DamageBonus) Adds a new additive damage bonus Declaration public void AttachDamageBonus(DamageTranspiler.DamageBonus bonus) Parameters Type Name Description DamageTranspiler.DamageBonus bonus Bonus function AttachDamageMultiplier(DamageTranspiler.DamageBonus) Adds a new multiplicative damage bonus Declaration public void AttachDamageMultiplier(DamageTranspiler.DamageBonus multiplier) Parameters Type Name Description DamageTranspiler.DamageBonus multiplier Bonus function DetachDamageBonus(DamageTranspiler.DamageBonus) Removes an additive damage bonus Declaration public void DetachDamageBonus(DamageTranspiler.DamageBonus bonus) Parameters Type Name Description DamageTranspiler.DamageBonus bonus Reference to a bonus function that has been added DetachDamageMultiplier(DamageTranspiler.DamageBonus) Removes a multiplicative damage bonus Declaration public void DetachDamageMultiplier(DamageTranspiler.DamageBonus multiplier) Parameters Type Name Description DamageTranspiler.DamageBonus multiplier Reference to a bonus function that has been added TranspileDamage(BaseAttack, IHittable, Single) Processes the raw damage value and applies bonuses and multipliers Declaration public float TranspileDamage(BaseAttack attack, IHittable hittable, float damage) Parameters Type Name Description BaseAttack attack Played attack IHittable hittable Hittable for which damage is calculated Single damage Raw attack damage Returns Type Description Single Transpiled damage"
  },
  "api/Global.DeathPanel.html": {
    "href": "api/Global.DeathPanel.html",
    "title": "Class DeathPanel | Heroes of the Shrine",
    "keywords": "Class DeathPanel Inheritance Object BaseComponent DeathPanel Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class DeathPanel : BaseComponent Fields transitions Declaration public Transition[] transitions Field Value Type Description Transition []"
  },
  "api/Global.DelayedEvent.html": {
    "href": "api/Global.DelayedEvent.html",
    "title": "Class DelayedEvent | Heroes of the Shrine",
    "keywords": "Class DelayedEvent Inheritance Object BaseComponent DelayedEvent Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class DelayedEvent : BaseComponent Fields delay Declaration public float delay Field Value Type Description Single event Declaration public ExtEvent event Field Value Type Description ExtEvent Methods Invoke() Declaration public void Invoke()"
  },
  "api/Global.DestroyAction.html": {
    "href": "api/Global.DestroyAction.html",
    "title": "Class DestroyAction | Heroes of the Shrine",
    "keywords": "Class DestroyAction Inheritance Object BaseComponent DestroyAction Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class DestroyAction : BaseComponent Fields objects Declaration public GameObject[] objects Field Value Type Description GameObject [] Methods Invoke() Declaration public void Invoke()"
  },
  "api/Global.DieBehaviour.html": {
    "href": "api/Global.DieBehaviour.html",
    "title": "Class DieBehaviour | Heroes of the Shrine",
    "keywords": "Class DieBehaviour Behaviours that handles death of character Inheritance Object BaseComponent CharacterBehaviour DieBehaviour Inherited Members CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.Awake() CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class DieBehaviour : CharacterBehaviour Fields deathAnimationDuration Declaration public float deathAnimationDuration Field Value Type Description Single Time before character is destroyed. Used only if DieBehaviour.destroyOnDeath is true . destroyOnDeath Declaration public bool destroyOnDeath Field Value Type Description Boolean If true , destroys the character after death animation is over onDie Declaration public ExtEvent onDie Field Value Type Description ExtEvent Invoked when character dies Methods Respawn() Starts respawn animation Declaration public void Respawn()"
  },
  "api/Global.DieBrainModule.html": {
    "href": "api/Global.DieBrainModule.html",
    "title": "Class DieBrainModule | Heroes of the Shrine",
    "keywords": "Class DieBrainModule State machine parameters related to DieBehaviour Inheritance Object BaseComponent CharacterBehaviour BrainModule DieBrainModule Inherited Members BrainModule.StateMachine BrainModule.Awake() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class DieBrainModule : BrainModule Methods GetParameters() Declaration public override string[] GetParameters() Returns Type Description String [] Overrides BrainModule.GetParameters()"
  },
  "api/Global.DistancesBrainModule.DistanceParameterEntry.html": {
    "href": "api/Global.DistancesBrainModule.DistanceParameterEntry.html",
    "title": "Class DistancesBrainModule.DistanceParameterEntry | Heroes of the Shrine",
    "keywords": "Class DistancesBrainModule.DistanceParameterEntry Point to measure distance from and update related parameters Inheritance Object DistancesBrainModule.DistanceParameterEntry Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class DistanceParameterEntry Fields groundPoint Declaration public Vector2 groundPoint Field Value Type Description Vector2 Coordinates of the point on the ground, translated to (x, 0, y) in world coordinates parameterName Declaration public string parameterName Field Value Type Description String Name of the parameter in the state machine animator"
  },
  "api/Global.DistancesBrainModule.html": {
    "href": "api/Global.DistancesBrainModule.html",
    "title": "Class DistancesBrainModule | Heroes of the Shrine",
    "keywords": "Class DistancesBrainModule State machine parameters based on distances between the enemy, to any defined point in the scene Inheritance Object BaseComponent CharacterBehaviour BrainModule DistancesBrainModule Inherited Members BrainModule.StateMachine BrainModule.Awake() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class DistancesBrainModule : BrainModule Fields distanceAnimatorParameters Declaration public List<DistancesBrainModule.DistanceParameterEntry> distanceAnimatorParameters Field Value Type Description List < DistancesBrainModule.DistanceParameterEntry > List of points parameters Methods GetParameters() Declaration public override string[] GetParameters() Returns Type Description String [] Overrides BrainModule.GetParameters() Update() Declaration protected override void Update() Overrides BaseComponent.Update()"
  },
  "api/Global.DodgeBehaviour.Command.html": {
    "href": "api/Global.DodgeBehaviour.Command.html",
    "title": "Class DodgeBehaviour.Command | Heroes of the Shrine",
    "keywords": "Class DodgeBehaviour.Command Inheritance Object DodgeBehaviour.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command Constructors Command(Int32) Declaration public Command(int direction) Parameters Type Name Description Int32 direction Fields direction Declaration public readonly int direction Field Value Type Description Int32"
  },
  "api/Global.DodgeBehaviour.html": {
    "href": "api/Global.DodgeBehaviour.html",
    "title": "Class DodgeBehaviour | Heroes of the Shrine",
    "keywords": "Class DodgeBehaviour Inheritance Object BaseComponent CharacterBehaviour PlayableBehaviour < DodgeBehaviour.Command > BaseMovementBehaviour < DodgeBehaviour.Command > DodgeBehaviour Implements IMovementBehaviour IPlayableBehaviour Inherited Members BaseMovementBehaviour<DodgeBehaviour.Command>.cooldown BaseMovementBehaviour<DodgeBehaviour.Command>.Awake() PlayableBehaviour<DodgeBehaviour.Command>.PlayEvents PlayableBehaviour<DodgeBehaviour.Command>.Play(DodgeBehaviour.Command) PlayableBehaviour<DodgeBehaviour.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class DodgeBehaviour : BaseMovementBehaviour<DodgeBehaviour.Command>, IMovementBehaviour, IPlayableBehaviour Fields anticipateTime Declaration public float anticipateTime Field Value Type Description Single dodgeDistance Declaration public float dodgeDistance Field Value Type Description Single recoveryTime Declaration public float recoveryTime Field Value Type Description Single Properties Anticipating Declaration public bool Anticipating { get; } Property Value Type Description Boolean Playing Declaration public override bool Playing { get; } Property Value Type Description Boolean Overrides PlayableBehaviour<DodgeBehaviour.Command>.Playing Recovering Declaration public bool Recovering { get; } Property Value Type Description Boolean Methods CanPlay(DodgeBehaviour.Command) Declaration public override bool CanPlay(DodgeBehaviour.Command command) Parameters Type Name Description DodgeBehaviour.Command command Returns Type Description Boolean Overrides BaseMovementBehaviour<DodgeBehaviour.Command>.CanPlay(DodgeBehaviour.Command) DoPlay(DodgeBehaviour.Command) Declaration protected override void DoPlay(DodgeBehaviour.Command command) Parameters Type Name Description DodgeBehaviour.Command command Overrides PlayableBehaviour<DodgeBehaviour.Command>.DoPlay(DodgeBehaviour.Command) DoStop() Declaration protected override void DoStop() Overrides PlayableBehaviour<DodgeBehaviour.Command>.DoStop() Events OnDodge Declaration public event Action OnDodge Event Type Type Description Action OnRecover Declaration public event Action OnRecover Event Type Type Description Action Implements IMovementBehaviour IPlayableBehaviour"
  },
  "api/Global.EffectBar.html": {
    "href": "api/Global.EffectBar.html",
    "title": "Class EffectBar | Heroes of the Shrine",
    "keywords": "Class EffectBar Inheritance Object BaseComponent EffectBar Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EffectBar : BaseComponent Fields effect Declaration public IEffect effect Field Value Type Description IEffect Methods Update() Declaration protected override void Update() Overrides BaseComponent.Update()"
  },
  "api/Global.EffectDefinition.html": {
    "href": "api/Global.EffectDefinition.html",
    "title": "Class EffectDefinition | Heroes of the Shrine",
    "keywords": "Class EffectDefinition Inheritance Object EffectDefinition Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EffectDefinition Fields color Declaration public Color color Field Value Type Description Color effectType Declaration public TypeReference effectType Field Value Type Description TypeReference icon Declaration public Sprite icon Field Value Type Description Sprite"
  },
  "api/Global.EffectsBar.html": {
    "href": "api/Global.EffectsBar.html",
    "title": "Class EffectsBar | Heroes of the Shrine",
    "keywords": "Class EffectsBar Inheritance Object BaseComponent EffectsBar Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EffectsBar : BaseComponent Fields effectBarPrefab Declaration public GameObject effectBarPrefab Field Value Type Description GameObject effects Declaration public EffectDefinition[] effects Field Value Type Description EffectDefinition []"
  },
  "api/Global.ElectrifiedEffect.Command.html": {
    "href": "api/Global.ElectrifiedEffect.Command.html",
    "title": "Class ElectrifiedEffect.Command | Heroes of the Shrine",
    "keywords": "Class ElectrifiedEffect.Command Inheritance Object ElectrifiedEffect.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command Constructors Command(Single, Single) Declaration public Command(float duration, float speedReductionMultiplier) Parameters Type Name Description Single duration Single speedReductionMultiplier Fields duration Declaration public readonly float duration Field Value Type Description Single speedReductionMultiplier Declaration public readonly float speedReductionMultiplier Field Value Type Description Single"
  },
  "api/Global.ElectrifiedEffect.html": {
    "href": "api/Global.ElectrifiedEffect.html",
    "title": "Class ElectrifiedEffect | Heroes of the Shrine",
    "keywords": "Class ElectrifiedEffect Inheritance Object BaseComponent CharacterBehaviour PlayableBehaviour < ElectrifiedEffect.Command > BaseEffect < ElectrifiedEffect.Command > ElectrifiedEffect Implements IEffect IPlayableBehaviour Inherited Members BaseEffect<ElectrifiedEffect.Command>.Active BaseEffect<ElectrifiedEffect.Command>.CanPlay(ElectrifiedEffect.Command) BaseEffect<ElectrifiedEffect.Command>.Playing PlayableBehaviour<ElectrifiedEffect.Command>.PlayEvents PlayableBehaviour<ElectrifiedEffect.Command>.Play(ElectrifiedEffect.Command) PlayableBehaviour<ElectrifiedEffect.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ElectrifiedEffect : BaseEffect<ElectrifiedEffect.Command>, IEffect, IPlayableBehaviour Fields particles Declaration public ParticleSystem particles Field Value Type Description ParticleSystem Methods Awake() Declaration protected override void Awake() Overrides CharacterBehaviour.Awake() DoPlay(ElectrifiedEffect.Command) Declaration protected override void DoPlay(ElectrifiedEffect.Command command) Parameters Type Name Description ElectrifiedEffect.Command command Overrides PlayableBehaviour<ElectrifiedEffect.Command>.DoPlay(ElectrifiedEffect.Command) DoStop() Declaration protected override void DoStop() Overrides PlayableBehaviour<ElectrifiedEffect.Command>.DoStop() GetProgress() Declaration public override float GetProgress() Returns Type Description Single Overrides BaseEffect<ElectrifiedEffect.Command>.GetProgress() Implements IEffect IPlayableBehaviour"
  },
  "api/Global.ElectrifyAttack.html": {
    "href": "api/Global.ElectrifyAttack.html",
    "title": "Class ElectrifyAttack | Heroes of the Shrine",
    "keywords": "Class ElectrifyAttack Active phase has two parts - periodic and explosion. After the periodic part is checking for hits a certain number of times, the explosion part starts. Inheritance Object BaseComponent CharacterBehaviour PlayableBehaviour < BaseAttack.Command > BaseAttack ElectrifyAttack Implements IPlayableBehaviour Inherited Members BaseAttack.attackEvents BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.Motion BaseAttack.IsMidair BaseAttack.Anticipating BaseAttack.Active BaseAttack.Recovering BaseAttack.Playing BaseAttack.CanPlay(BaseAttack.Command) BaseAttack.DoPlay(BaseAttack.Command) BaseAttack.DoStop() PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.Awake() CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ElectrifyAttack : BaseAttack, IPlayableBehaviour Fields attackFlow Declaration public SimpleAttack.AttackFlow attackFlow Field Value Type Description SimpleAttack.AttackFlow explosionHitDetector Declaration public BaseHitDetector explosionHitDetector Field Value Type Description BaseHitDetector explosionHitExecutor Declaration public ChainHitExecutor explosionHitExecutor Field Value Type Description ChainHitExecutor onExplosion Declaration public ExtEvent onExplosion Field Value Type Description ExtEvent periodicHitCount Declaration public int periodicHitCount Field Value Type Description Int32 periodicHitDetector Declaration public PeriodicAbsoluteHitDetector periodicHitDetector Field Value Type Description PeriodicAbsoluteHitDetector periodicHitExecutor Declaration public ChainHitExecutor periodicHitExecutor Field Value Type Description ChainHitExecutor Methods ActivePhase() Declaration protected override IEnumerator ActivePhase() Returns Type Description IEnumerator Overrides BaseAttack.ActivePhase() AnticipationPhase() Declaration protected override IEnumerator AnticipationPhase() Returns Type Description IEnumerator Overrides BaseAttack.AnticipationPhase() RecoveryPhase() Declaration protected override IEnumerator RecoveryPhase() Returns Type Description IEnumerator Overrides BaseAttack.RecoveryPhase() Implements IPlayableBehaviour"
  },
  "api/Global.ElectrifyHitExecutor.html": {
    "href": "api/Global.ElectrifyHitExecutor.html",
    "title": "Class ElectrifyHitExecutor | Heroes of the Shrine",
    "keywords": "Class ElectrifyHitExecutor Hit executor that applies electrify effect to an hittable Inheritance Object ElectrifyHitExecutor Implements IHitExecutor Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ElectrifyHitExecutor : IHitExecutor Fields duration Declaration public float duration Field Value Type Description Single Effect duration speedMultiplier Declaration public float speedMultiplier Field Value Type Description Single Speed reduction caused by the effect Methods Execute(BaseAttack, IHittable) Declaration public void Execute(BaseAttack attack, IHittable hittable) Parameters Type Name Description BaseAttack attack IHittable hittable Implements IHitExecutor"
  },
  "api/Global.EncounterAction.EnemySpawnDefinition.html": {
    "href": "api/Global.EncounterAction.EnemySpawnDefinition.html",
    "title": "Class EncounterAction.EnemySpawnDefinition | Heroes of the Shrine",
    "keywords": "Class EncounterAction.EnemySpawnDefinition Inheritance Object EncounterAction.EnemySpawnDefinition Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EnemySpawnDefinition Fields direction Declaration public Rotation direction Field Value Type Description Rotation partOfWave Declaration public bool partOfWave Field Value Type Description Boolean prefab Declaration public GameObject prefab Field Value Type Description GameObject z Declaration public float z Field Value Type Description Single"
  },
  "api/Global.EncounterAction.html": {
    "href": "api/Global.EncounterAction.html",
    "title": "Class EncounterAction | Heroes of the Shrine",
    "keywords": "Class EncounterAction Inheritance Object BaseComponent EncounterAction Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EncounterAction : BaseComponent Fields cameraBorder Declaration public Rect cameraBorder Field Value Type Description Rect firstWavePreSpawnedEnemies Declaration public GameObject[] firstWavePreSpawnedEnemies Field Value Type Description GameObject [] onWaveStart Declaration public ExtEvent onWaveStart Field Value Type Description ExtEvent postEncounterEvent Declaration public ExtEvent postEncounterEvent Field Value Type Description ExtEvent spawnSourceDistance Declaration public float spawnSourceDistance Field Value Type Description Single timeToAlarm Declaration public float timeToAlarm Field Value Type Description Single waveDefinitions Declaration public EncounterAction.WaveDefinition[] waveDefinitions Field Value Type Description EncounterAction.WaveDefinition [] Methods Invoke() Declaration public void Invoke() Stop() Declaration public void Stop()"
  },
  "api/Global.EncounterAction.WaveDefinition.html": {
    "href": "api/Global.EncounterAction.WaveDefinition.html",
    "title": "Class EncounterAction.WaveDefinition | Heroes of the Shrine",
    "keywords": "Class EncounterAction.WaveDefinition Inheritance Object EncounterAction.WaveDefinition Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class WaveDefinition Fields spawnDefinitions Declaration public EncounterAction.EnemySpawnDefinition[] spawnDefinitions Field Value Type Description EncounterAction.EnemySpawnDefinition []"
  },
  "api/Global.EnemiesAttackingBrainModule.html": {
    "href": "api/Global.EnemiesAttackingBrainModule.html",
    "title": "Class EnemiesAttackingBrainModule | Heroes of the Shrine",
    "keywords": "Class EnemiesAttackingBrainModule State machine parameter telling if any enemy is attacking, including itself Inheritance Object BaseComponent CharacterBehaviour BrainModule EnemiesAttackingBrainModule Inherited Members BrainModule.StateMachine BrainModule.Awake() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EnemiesAttackingBrainModule : BrainModule Methods GetParameters() Declaration public override string[] GetParameters() Returns Type Description String [] Overrides BrainModule.GetParameters() Update() Declaration protected override void Update() Overrides BaseComponent.Update()"
  },
  "api/Global.EnemyCountBrainModule.html": {
    "href": "api/Global.EnemyCountBrainModule.html",
    "title": "Class EnemyCountBrainModule | Heroes of the Shrine",
    "keywords": "Class EnemyCountBrainModule State machine parameter telling the number of enemies in the scene, including itself Inheritance Object BaseComponent CharacterBehaviour BrainModule EnemyCountBrainModule Inherited Members BrainModule.StateMachine BrainModule.Awake() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EnemyCountBrainModule : BrainModule Methods GetParameters() Declaration public override string[] GetParameters() Returns Type Description String [] Overrides BrainModule.GetParameters() Update() Declaration protected override void Update() Overrides BaseComponent.Update()"
  },
  "api/Global.EnergyBurstAttack.html": {
    "href": "api/Global.EnergyBurstAttack.html",
    "title": "Class EnergyBurstAttack | Heroes of the Shrine",
    "keywords": "Class EnergyBurstAttack Inheritance Object BaseComponent CharacterBehaviour PlayableBehaviour < BaseAttack.Command > BaseAttack MotionAttack EnergyBurstAttack Implements IPlayableBehaviour Inherited Members MotionAttack.attackFlow MotionAttack.hitDetector MotionAttack.hitExecutor MotionAttack.Motion MotionAttack.AnticipationPhase() MotionAttack.ActivePhase() MotionAttack.RecoveryPhase() BaseAttack.attackEvents BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.IsMidair BaseAttack.Anticipating BaseAttack.Active BaseAttack.Recovering BaseAttack.Playing BaseAttack.CanPlay(BaseAttack.Command) BaseAttack.DoPlay(BaseAttack.Command) BaseAttack.DoStop() PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.Awake() CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EnergyBurstAttack : MotionAttack, IPlayableBehaviour Implements IPlayableBehaviour"
  },
  "api/Global.EnragedBrainModule.html": {
    "href": "api/Global.EnragedBrainModule.html",
    "title": "Class EnragedBrainModule | Heroes of the Shrine",
    "keywords": "Class EnragedBrainModule State machine parameter that is set when health is below a certain value Inheritance Object BaseComponent CharacterBehaviour BrainModule EnragedBrainModule Inherited Members BrainModule.StateMachine CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EnragedBrainModule : BrainModule Fields rageDamageMultiplier Declaration public float rageDamageMultiplier Field Value Type Description Single Attacks damage multiplier when rage is on rageHealthThreshold Declaration public float rageHealthThreshold Field Value Type Description Single Parameter is set when health gets below this value Methods Awake() Declaration protected override void Awake() Overrides BrainModule.Awake() GetParameters() Declaration public override string[] GetParameters() Returns Type Description String [] Overrides BrainModule.GetParameters()"
  },
  "api/Global.EntityManager.html": {
    "href": "api/Global.EntityManager.html",
    "title": "Class EntityManager | Heroes of the Shrine",
    "keywords": "Class EntityManager Global store of entities, indexed with tags. Use this instead of expensive methods such as . Inheritance Object BaseComponent EntityManager Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EntityManager : BaseComponent Properties Instance Declaration public static EntityManager Instance { get; } Property Value Type Description EntityManager Instance of the singleton Methods AddEntity(GameEntity) Adds a GameEntity to the store Declaration public void AddEntity(GameEntity entity) Parameters Type Name Description GameEntity entity Entity to add CountEntities(Tag) Count how many entities have a certain tag Declaration public int CountEntities(Tag key) Parameters Type Name Description Tag key Tag to check Returns Type Description Int32 Count of entities have that tag GetEntities(Tag) Get all entities that have a certain tag Declaration public HashSet<GameEntity> GetEntities(Tag key) Parameters Type Name Description Tag key Tag to check Returns Type Description HashSet < GameEntity > All entities having that tag GetEntities(Tag[]) Get all entities that have one of a list of tags Declaration public IEnumerable<GameEntity> GetEntities(params Tag[] keys) Parameters Type Name Description Tag [] keys List of tags to check Returns Type Description IEnumerable < GameEntity > All entities having any of these tags GetEntity(Tag) Get one entity that has a certain tag Declaration public GameEntity GetEntity(Tag key) Parameters Type Name Description Tag key Tag to check Returns Type Description GameEntity Single entity having this tag. If there is none, then null is returned RemoveEntity(GameEntity) Removes a GameEntity from the store Declaration public void RemoveEntity(GameEntity entity) Parameters Type Name Description GameEntity entity Entity to remove"
  },
  "api/Global.EscapeBehaviour.Command.html": {
    "href": "api/Global.EscapeBehaviour.Command.html",
    "title": "Class EscapeBehaviour.Command | Heroes of the Shrine",
    "keywords": "Class EscapeBehaviour.Command Inheritance Object EscapeBehaviour.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command Constructors Command(MovableEntity, Single, Boolean) Declaration public Command(MovableEntity target, float speedMultiplier, bool fitLookDirection = true) Parameters Type Name Description MovableEntity target Single speedMultiplier Boolean fitLookDirection Fields fitLookDirection Declaration public readonly bool fitLookDirection Field Value Type Description Boolean speedMultiplier Declaration public readonly float speedMultiplier Field Value Type Description Single target Declaration public readonly MovableEntity target Field Value Type Description MovableEntity"
  },
  "api/Global.EscapeBehaviour.html": {
    "href": "api/Global.EscapeBehaviour.html",
    "title": "Class EscapeBehaviour | Heroes of the Shrine",
    "keywords": "Class EscapeBehaviour Inheritance Object BaseComponent CharacterBehaviour PlayableBehaviour < EscapeBehaviour.Command > BaseMovementBehaviour < EscapeBehaviour.Command > EscapeBehaviour Implements IMovementBehaviour IPlayableBehaviour Inherited Members BaseMovementBehaviour<EscapeBehaviour.Command>.cooldown BaseMovementBehaviour<EscapeBehaviour.Command>.CanPlay(EscapeBehaviour.Command) PlayableBehaviour<EscapeBehaviour.Command>.PlayEvents PlayableBehaviour<EscapeBehaviour.Command>.Play(EscapeBehaviour.Command) PlayableBehaviour<EscapeBehaviour.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EscapeBehaviour : BaseMovementBehaviour<EscapeBehaviour.Command>, IMovementBehaviour, IPlayableBehaviour Properties Active Declaration public bool Active { get; } Property Value Type Description Boolean Playing Declaration public override bool Playing { get; } Property Value Type Description Boolean Overrides PlayableBehaviour<EscapeBehaviour.Command>.Playing Methods Awake() Declaration protected override void Awake() Overrides BaseMovementBehaviour<EscapeBehaviour.Command>.Awake() DoPlay(EscapeBehaviour.Command) Declaration protected override void DoPlay(EscapeBehaviour.Command command) Parameters Type Name Description EscapeBehaviour.Command command Overrides PlayableBehaviour<EscapeBehaviour.Command>.DoPlay(EscapeBehaviour.Command) DoStop() Declaration protected override void DoStop() Overrides PlayableBehaviour<EscapeBehaviour.Command>.DoStop() Implements IMovementBehaviour IPlayableBehaviour"
  },
  "api/Global.EscapePattern.html": {
    "href": "api/Global.EscapePattern.html",
    "title": "Class EscapePattern | Heroes of the Shrine",
    "keywords": "Class EscapePattern Inheritance Object BasePattern EscapePattern Inherited Members BasePattern.hasRandomExitTime BasePattern.minTime BasePattern.maxTime BasePattern.OnEnter BasePattern.OnExit BasePattern.OnStateUpdate(Animator, AnimatorStateInfo, Int32) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EscapePattern : BasePattern Fields speedMultiplier Declaration public float speedMultiplier Field Value Type Description Single targetTag Declaration public Tag targetTag Field Value Type Description Tag Methods OnStateEnter(Animator, AnimatorStateInfo, Int32) Declaration public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description Animator animator AnimatorStateInfo stateInfo Int32 layerIndex Overrides BasePattern.OnStateEnter(Animator, AnimatorStateInfo, Int32) OnStateExit(Animator, AnimatorStateInfo, Int32) Declaration public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description Animator animator AnimatorStateInfo stateInfo Int32 layerIndex Overrides BasePattern.OnStateExit(Animator, AnimatorStateInfo, Int32)"
  },
  "api/Global.EventManager.html": {
    "href": "api/Global.EventManager.html",
    "title": "Class EventManager | Heroes of the Shrine",
    "keywords": "Class EventManager Global component that registers events, with a similar API to BaseComponent . Should be used only in classes that don't inherit from BaseComponent . Inheritance Object BaseComponent EventManager Inherited Members BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EventManager : BaseComponent Properties Instance Declaration public static EventManager Instance { get; } Property Value Type Description EventManager Methods Cancel(String) Cancels a callable with given id. Nothing happens if is not an existing callable Declaration public void Cancel(string id) Parameters Type Name Description String id ID of the callable to cancel InvokeWhen(Func<Boolean>, Action) Executes a callable when a condition is met Declaration public string InvokeWhen(Func<bool> condition, Action action) Parameters Type Name Description Func < Boolean > condition Condition to check every frame Action action Callable to execute Returns Type Description String ID of the registered callable Register(Action) Executes a callable every frame Declaration public string Register(Action action) Parameters Type Name Description Action action Callable to execute Returns Type Description String ID of the registered callable StartInterval(Action, Single) Executes a callable repeatedly with a time delay between each call Declaration public string StartInterval(Action action, float interval) Parameters Type Name Description Action action Callable to execute Single interval Time to wait between executions, in seconds Returns Type Description String ID of the registered callable StartTimeout(Action, Single) Executes a callable after a certain delay Declaration public string StartTimeout(Action action, float timeout) Parameters Type Name Description Action action Callable to execute Single timeout Time to wait before execution, in seconds Returns Type Description String ID of the registered callable Unregister(String) Unregisters a callable with given id. Nothing happens if is not an existing callable Declaration public void Unregister(string id) Parameters Type Name Description String id ID of the callable to unregister"
  },
  "api/Global.EventWrapper.html": {
    "href": "api/Global.EventWrapper.html",
    "title": "Class EventWrapper | Heroes of the Shrine",
    "keywords": "Class EventWrapper Inheritance Object BaseComponent EventWrapper Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EventWrapper : BaseComponent Fields event Declaration public ExtEvent event Field Value Type Description ExtEvent Methods Invoke() Declaration public void Invoke()"
  },
  "api/Global.FadePanel.html": {
    "href": "api/Global.FadePanel.html",
    "title": "Class FadePanel | Heroes of the Shrine",
    "keywords": "Class FadePanel Inheritance Object BaseComponent FadePanel Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class FadePanel : BaseComponent Methods FadeIn(Single) Declaration public void FadeIn(float fadeDuration) Parameters Type Name Description Single fadeDuration FadeOut(Single) Declaration public void FadeOut(float fadeDuration) Parameters Type Name Description Single fadeDuration"
  },
  "api/Global.Figure.html": {
    "href": "api/Global.Figure.html",
    "title": "Class Figure | Heroes of the Shrine",
    "keywords": "Class Figure Inheritance Object BaseComponent Figure Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Figure : BaseComponent Fields movableEntity Declaration public MovableEntity movableEntity Field Value Type Description MovableEntity Methods Update() Declaration protected override void Update() Overrides BaseComponent.Update()"
  },
  "api/Global.FireEffect.Command.html": {
    "href": "api/Global.FireEffect.Command.html",
    "title": "Class FireEffect.Command | Heroes of the Shrine",
    "keywords": "Class FireEffect.Command Inheritance Object FireEffect.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command Constructors Command(Single, Single, Single) Declaration public Command(float duration, float hitInterval, float damagePerHit) Parameters Type Name Description Single duration Single hitInterval Single damagePerHit Fields damagePerHit Declaration public readonly float damagePerHit Field Value Type Description Single duration Declaration public readonly float duration Field Value Type Description Single hitInterval Declaration public readonly float hitInterval Field Value Type Description Single"
  },
  "api/Global.FireEffect.html": {
    "href": "api/Global.FireEffect.html",
    "title": "Class FireEffect | Heroes of the Shrine",
    "keywords": "Class FireEffect Inheritance Object BaseComponent CharacterBehaviour PlayableBehaviour < FireEffect.Command > BaseEffect < FireEffect.Command > FireEffect Implements IEffect IPlayableBehaviour Inherited Members BaseEffect<FireEffect.Command>.Active BaseEffect<FireEffect.Command>.CanPlay(FireEffect.Command) BaseEffect<FireEffect.Command>.Playing PlayableBehaviour<FireEffect.Command>.PlayEvents PlayableBehaviour<FireEffect.Command>.Play(FireEffect.Command) PlayableBehaviour<FireEffect.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.Awake() CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class FireEffect : BaseEffect<FireEffect.Command>, IEffect, IPlayableBehaviour Methods DoPlay(FireEffect.Command) Declaration protected override void DoPlay(FireEffect.Command command) Parameters Type Name Description FireEffect.Command command Overrides PlayableBehaviour<FireEffect.Command>.DoPlay(FireEffect.Command) DoStop() Declaration protected override void DoStop() Overrides PlayableBehaviour<FireEffect.Command>.DoStop() GetProgress() Declaration public override float GetProgress() Returns Type Description Single Overrides BaseEffect<FireEffect.Command>.GetProgress() Implements IEffect IPlayableBehaviour"
  },
  "api/Global.FollowBehaviour.Command.html": {
    "href": "api/Global.FollowBehaviour.Command.html",
    "title": "Class FollowBehaviour.Command | Heroes of the Shrine",
    "keywords": "Class FollowBehaviour.Command Inheritance Object FollowBehaviour.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command Constructors Command(MovableEntity, Func<Node[]>, GetOverrideDirection) Declaration public Command(MovableEntity target, Func<Node[]> getExcluded = null, GetOverrideDirection getOverrideDirection = null) Parameters Type Name Description MovableEntity target Func < Node []> getExcluded GetOverrideDirection getOverrideDirection Fields getExcluded Declaration public readonly Func<Node[]> getExcluded Field Value Type Description Func < Node []> getOverrideDirection Declaration public readonly GetOverrideDirection getOverrideDirection Field Value Type Description GetOverrideDirection target Declaration public readonly MovableEntity target Field Value Type Description MovableEntity"
  },
  "api/Global.FollowBehaviour.html": {
    "href": "api/Global.FollowBehaviour.html",
    "title": "Class FollowBehaviour | Heroes of the Shrine",
    "keywords": "Class FollowBehaviour Inheritance Object BaseComponent CharacterBehaviour PlayableBehaviour < FollowBehaviour.Command > BaseMovementBehaviour < FollowBehaviour.Command > FollowBehaviour Implements IMovementBehaviour IPlayableBehaviour Inherited Members BaseMovementBehaviour<FollowBehaviour.Command>.cooldown BaseMovementBehaviour<FollowBehaviour.Command>.CanPlay(FollowBehaviour.Command) PlayableBehaviour<FollowBehaviour.Command>.PlayEvents PlayableBehaviour<FollowBehaviour.Command>.Play(FollowBehaviour.Command) PlayableBehaviour<FollowBehaviour.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class FollowBehaviour : BaseMovementBehaviour<FollowBehaviour.Command>, IMovementBehaviour, IPlayableBehaviour Properties Playing Declaration public override bool Playing { get; } Property Value Type Description Boolean Overrides PlayableBehaviour<FollowBehaviour.Command>.Playing Methods Awake() Declaration protected override void Awake() Overrides BaseMovementBehaviour<FollowBehaviour.Command>.Awake() DoPlay(FollowBehaviour.Command) Declaration protected override void DoPlay(FollowBehaviour.Command command) Parameters Type Name Description FollowBehaviour.Command command Overrides PlayableBehaviour<FollowBehaviour.Command>.DoPlay(FollowBehaviour.Command) DoStop() Declaration protected override void DoStop() Overrides PlayableBehaviour<FollowBehaviour.Command>.DoStop() Implements IMovementBehaviour IPlayableBehaviour"
  },
  "api/Global.FollowPattern.html": {
    "href": "api/Global.FollowPattern.html",
    "title": "Class FollowPattern | Heroes of the Shrine",
    "keywords": "Class FollowPattern Inheritance Object BasePattern FollowPattern Inherited Members BasePattern.hasRandomExitTime BasePattern.minTime BasePattern.maxTime BasePattern.OnEnter BasePattern.OnExit BasePattern.OnStateUpdate(Animator, AnimatorStateInfo, Int32) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class FollowPattern : BasePattern Fields speedMultiplier Declaration public float speedMultiplier Field Value Type Description Single targetTag Declaration public Tag targetTag Field Value Type Description Tag Methods OnStateEnter(Animator, AnimatorStateInfo, Int32) Declaration public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description Animator animator AnimatorStateInfo stateInfo Int32 layerIndex Overrides BasePattern.OnStateEnter(Animator, AnimatorStateInfo, Int32) OnStateExit(Animator, AnimatorStateInfo, Int32) Declaration public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description Animator animator AnimatorStateInfo stateInfo Int32 layerIndex Overrides BasePattern.OnStateExit(Animator, AnimatorStateInfo, Int32)"
  },
  "api/Global.ForcedBehaviour-1.html": {
    "href": "api/Global.ForcedBehaviour-1.html",
    "title": "Class ForcedBehaviour<T> | Heroes of the Shrine",
    "keywords": "Class ForcedBehaviour<T> Inheritance Object BaseComponent CharacterBehaviour PlayableBehaviour <T> ForcedBehaviour<T> KnockbackBehaviour StunBehaviour Implements IForcedBehaviour IPlayableBehaviour Inherited Members PlayableBehaviour<T>.PlayEvents PlayableBehaviour<T>.Playing PlayableBehaviour<T>.CanPlay(T) PlayableBehaviour<T>.Play(T) PlayableBehaviour<T>.DoPlay(T) PlayableBehaviour<T>.Stop() PlayableBehaviour<T>.DoStop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.Awake() CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public abstract class ForcedBehaviour<T> : PlayableBehaviour<T>, IForcedBehaviour, IPlayableBehaviour Type Parameters Name Description T Implements IForcedBehaviour IPlayableBehaviour"
  },
  "api/Global.ForcedWalkBehaviour.Command.html": {
    "href": "api/Global.ForcedWalkBehaviour.Command.html",
    "title": "Class ForcedWalkBehaviour.Command | Heroes of the Shrine",
    "keywords": "Class ForcedWalkBehaviour.Command Inheritance Object ForcedWalkBehaviour.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command Constructors Command(Vector3, Single) Declaration public Command(Vector3 point, float wantedDistance = 0.1F) Parameters Type Name Description Vector3 point Single wantedDistance Fields point Declaration public readonly Vector3 point Field Value Type Description Vector3 wantedDistance Declaration public readonly float wantedDistance Field Value Type Description Single"
  },
  "api/Global.ForcedWalkBehaviour.html": {
    "href": "api/Global.ForcedWalkBehaviour.html",
    "title": "Class ForcedWalkBehaviour | Heroes of the Shrine",
    "keywords": "Class ForcedWalkBehaviour Inheritance Object BaseComponent CharacterBehaviour PlayableBehaviour < ForcedWalkBehaviour.Command > ForcedWalkBehaviour Implements IPlayableBehaviour Inherited Members PlayableBehaviour<ForcedWalkBehaviour.Command>.PlayEvents PlayableBehaviour<ForcedWalkBehaviour.Command>.CanPlay(ForcedWalkBehaviour.Command) PlayableBehaviour<ForcedWalkBehaviour.Command>.Play(ForcedWalkBehaviour.Command) PlayableBehaviour<ForcedWalkBehaviour.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.Awake() CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ForcedWalkBehaviour : PlayableBehaviour<ForcedWalkBehaviour.Command>, IPlayableBehaviour Properties Playing Declaration public override bool Playing { get; } Property Value Type Description Boolean Overrides PlayableBehaviour<ForcedWalkBehaviour.Command>.Playing Methods DoPlay(ForcedWalkBehaviour.Command) Declaration protected override void DoPlay(ForcedWalkBehaviour.Command command) Parameters Type Name Description ForcedWalkBehaviour.Command command Overrides PlayableBehaviour<ForcedWalkBehaviour.Command>.DoPlay(ForcedWalkBehaviour.Command) DoStop() Declaration protected override void DoStop() Overrides PlayableBehaviour<ForcedWalkBehaviour.Command>.DoStop() Implements IPlayableBehaviour"
  },
  "api/Global.FullScreenToggle.html": {
    "href": "api/Global.FullScreenToggle.html",
    "title": "Class FullScreenToggle | Heroes of the Shrine",
    "keywords": "Class FullScreenToggle Inheritance Object BaseComponent FullScreenToggle Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class FullScreenToggle : BaseComponent Fields button Declaration public Toggle button Field Value Type Description Toggle"
  },
  "api/Global.GameEntity.html": {
    "href": "api/Global.GameEntity.html",
    "title": "Class GameEntity | Heroes of the Shrine",
    "keywords": "Class GameEntity Inheritance Object BaseComponent GameEntity MovableEntity Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class GameEntity : BaseComponent Fields parent Declaration public GameEntity parent Field Value Type Description GameEntity position Declaration public Vector3 position Field Value Type Description Vector3 rotation Declaration public Rotation rotation Field Value Type Description Rotation scale Declaration public Vector3 scale Field Value Type Description Vector3 tags Declaration public Tags tags Field Value Type Description Tags Properties GroundWorldPosition Declaration public Vector3 GroundWorldPosition { get; } Property Value Type Description Vector3 SortingOrder Declaration public int SortingOrder { get; } Property Value Type Description Int32 WorldPosition Declaration public Vector3 WorldPosition { get; set; } Property Value Type Description Vector3 WorldRotation Declaration public Rotation WorldRotation { get; } Property Value Type Description Rotation WorldScale Declaration public Vector3 WorldScale { get; } Property Value Type Description Vector3 Methods Awake() Declaration protected virtual void Awake() GroundDistance(Vector3) Declaration public float GroundDistance(Vector3 point) Parameters Type Name Description Vector3 point Returns Type Description Single GroundScreenCoordinates(Vector3) Declaration public static Vector3 GroundScreenCoordinates(Vector3 v) Parameters Type Name Description Vector3 v Returns Type Description Vector3 ScreenCoordinates(Vector3) Declaration public static Vector3 ScreenCoordinates(Vector3 v) Parameters Type Name Description Vector3 v Returns Type Description Vector3 TransformToRelative(Vector3) Declaration public Vector3 TransformToRelative(Vector3 worldPoint) Parameters Type Name Description Vector3 worldPoint Returns Type Description Vector3 TransformToWorld(Vector3) Declaration public Vector3 TransformToWorld(Vector3 relativePoint) Parameters Type Name Description Vector3 relativePoint Returns Type Description Vector3 UpdateTransform() Declaration protected void UpdateTransform()"
  },
  "api/Global.GameManager.html": {
    "href": "api/Global.GameManager.html",
    "title": "Class GameManager | Heroes of the Shrine",
    "keywords": "Class GameManager Class including general level operations Inheritance Object BaseComponent GameManager Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class GameManager : BaseComponent Fields fadeDelay Declaration public float fadeDelay Field Value Type Description Single fadeDuration Declaration public float fadeDuration Field Value Type Description Single fadePanel Declaration public FadePanel fadePanel Field Value Type Description FadePanel Methods PlayAgain(String) Declaration public void PlayAgain(string sceneName) Parameters Type Name Description String sceneName Quit() Declaration public void Quit() Respawn() Declaration public void Respawn() Restart() Declaration public void Restart()"
  },
  "api/Global.GetOverrideDirection.html": {
    "href": "api/Global.GetOverrideDirection.html",
    "title": "Delegate GetOverrideDirection | Heroes of the Shrine",
    "keywords": "Delegate GetOverrideDirection Namespace : Global Assembly : cs.temp.dll.dll Syntax public delegate bool GetOverrideDirection(out Vector3 direction); Parameters Type Name Description Vector3 direction Returns Type Description Boolean"
  },
  "api/Global.HealthBar.html": {
    "href": "api/Global.HealthBar.html",
    "title": "Class HealthBar | Heroes of the Shrine",
    "keywords": "Class HealthBar Inheritance Object BaseComponent HealthBar Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class HealthBar : BaseComponent Fields healthSystem Declaration public HealthSystem healthSystem Field Value Type Description HealthSystem Methods Update() Declaration protected override void Update() Overrides BaseComponent.Update()"
  },
  "api/Global.HealthBrainModule.html": {
    "href": "api/Global.HealthBrainModule.html",
    "title": "Class HealthBrainModule | Heroes of the Shrine",
    "keywords": "Class HealthBrainModule State machine parameters related to HealthBrainModule.healthSystem Inheritance Object BaseComponent CharacterBehaviour BrainModule HealthBrainModule Inherited Members BrainModule.StateMachine CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class HealthBrainModule : BrainModule Methods Awake() Declaration protected override void Awake() Overrides BrainModule.Awake() GetParameters() Declaration public override string[] GetParameters() Returns Type Description String [] Overrides BrainModule.GetParameters() Update() Declaration protected override void Update() Overrides BaseComponent.Update()"
  },
  "api/Global.HealthSystem.html": {
    "href": "api/Global.HealthSystem.html",
    "title": "Class HealthSystem | Heroes of the Shrine",
    "keywords": "Class HealthSystem Character health system Inheritance Object BaseComponent CharacterBehaviour HealthSystem Inherited Members CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class HealthSystem : CharacterBehaviour Fields health Declaration public float health Field Value Type Description Single Current health value startHealth Declaration public float startHealth Field Value Type Description Single Character's full health value Properties Alive Declaration public bool Alive { get; } Property Value Type Description Boolean Is character alive Fraction Declaration public float Fraction { get; } Property Value Type Description Single Ratio between current health to full health Methods Awake() Declaration protected override void Awake() Overrides CharacterBehaviour.Awake() Kill() Kill character by setting health to 0 Declaration public void Kill()"
  },
  "api/Global.Hitbox.html": {
    "href": "api/Global.Hitbox.html",
    "title": "Class Hitbox | Heroes of the Shrine",
    "keywords": "Class Hitbox Inheritance Object BaseComponent Hitbox Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Hitbox : BaseComponent Fields size Declaration public Vector3 size Field Value Type Description Vector3 Properties WorldPosition Declaration public Vector3 WorldPosition { get; } Property Value Type Description Vector3 Methods GetIntersectionCenter(Hitbox) Declaration public Vector3 GetIntersectionCenter(Hitbox other) Parameters Type Name Description Hitbox other Returns Type Description Vector3 GetSegmentIntersections(Vector2, Vector2) Declaration public IEnumerable<Vector2> GetSegmentIntersections(Vector2 start, Vector2 end) Parameters Type Name Description Vector2 start Vector2 end Returns Type Description IEnumerable < Vector2 > IsInside(Vector3) Declaration public bool IsInside(Vector3 point) Parameters Type Name Description Vector3 point Returns Type Description Boolean OverlapHitbox(Hitbox) Declaration public bool OverlapHitbox(Hitbox other) Parameters Type Name Description Hitbox other Returns Type Description Boolean"
  },
  "api/Global.HitParticles.html": {
    "href": "api/Global.HitParticles.html",
    "title": "Class HitParticles | Heroes of the Shrine",
    "keywords": "Class HitParticles Inheritance Object BaseComponent HitParticles Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class HitParticles : BaseComponent Fields prefab Declaration public ParticleSystem prefab Field Value Type Description ParticleSystem Methods Play(Vector3, IHittable) Declaration public void Play(Vector3 hitPoint, IHittable hittable) Parameters Type Name Description Vector3 hitPoint IHittable hittable"
  },
  "api/Global.HittableBehaviour.html": {
    "href": "api/Global.HittableBehaviour.html",
    "title": "Class HittableBehaviour | Heroes of the Shrine",
    "keywords": "Class HittableBehaviour Behaviours responsible for processing hits from attacks Inheritance Object BaseComponent CharacterBehaviour HittableBehaviour Implements IHittable Inherited Members CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class HittableBehaviour : CharacterBehaviour, IHittable Fields damageMultiplier Declaration public float damageMultiplier Field Value Type Description Single Multiplier for any damage that character is getting Methods Awake() Declaration protected override void Awake() Overrides CharacterBehaviour.Awake() CanGetHit() Declaration public bool CanGetHit() Returns Type Description Boolean Hit(Single) Declaration public void Hit(float damage) Parameters Type Name Description Single damage Knockback(Single, Single, Single) Declaration public void Knockback(float power, float angleDegrees, float stunTime) Parameters Type Name Description Single power Single angleDegrees Single stunTime Stun(Single) Declaration public void Stun(float time) Parameters Type Name Description Single time Events OnHit Declaration public event Action<float> OnHit Event Type Type Description Action < Single > Invoked when HittableBehaviour.Hit(System.Single) is called Implements IHittable"
  },
  "api/Global.HittableHitbox.html": {
    "href": "api/Global.HittableHitbox.html",
    "title": "Class HittableHitbox | Heroes of the Shrine",
    "keywords": "Class HittableHitbox Hittable attached to a hitbox, related to a HittableHitbox.hittableBehaviour of a character Inheritance Object BaseComponent HittableHitbox BossHittableHitbox SuperArmorHittableHitbox Implements IHittable Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class HittableHitbox : BaseComponent, IHittable Fields blinkMaterial Declaration public Material blinkMaterial Field Value Type Description Material Material that HittableHitbox.figure changes to during blink effect blinkTime Declaration public float blinkTime Field Value Type Description Single Duration of blink effect figure Declaration public SpriteRenderer figure Field Value Type Description SpriteRenderer on which blink effect is played hittableBehaviour Declaration public HittableBehaviour hittableBehaviour Field Value Type Description HittableBehaviour HittableHitbox.hittableBehaviour of the related character onHit Declaration public ExtEvent onHit Field Value Type Description ExtEvent Invoked when HittableHitbox.Hit(System.Single) is called Properties Character Declaration public Character Character { get; } Property Value Type Description Character Hitbox Declaration public Hitbox Hitbox { get; } Property Value Type Description Hitbox Related hitbox Methods Awake() Declaration protected virtual void Awake() Blink() Declaration protected void Blink() CanGetHit() Declaration public bool CanGetHit() Returns Type Description Boolean Hit(Single) Declaration public virtual void Hit(float damage) Parameters Type Name Description Single damage Knockback(Single, Single, Single) Declaration public virtual void Knockback(float power, float angleDegrees, float stunTime) Parameters Type Name Description Single power Single angleDegrees Single stunTime Stun(Single) Declaration public virtual void Stun(float time) Parameters Type Name Description Single time Implements IHittable"
  },
  "api/Global.html": {
    "href": "api/Global.html",
    "title": "Namespace Global | Heroes of the Shrine",
    "keywords": "Namespace Global Classes AbsoluteHitDetector An hit detector that detects hits only in the frame it is started AggressionBrainModule State machine aggression parameter, assigned with a random value (0-1) before each state transition. Can be used for randomizing transitions. AirAttack Attack that can be only be played when jumping, and does not prevent walking AirSpinAttack AlarmBrainModule State machine trigger parameter that can be used for transition between non-aggressive state to aggressive state. Must be called manually. AltAirAttack AltNormalAttack AnimationDefinition ArcBehaviour ArcBehaviour.Command ArcPattern AttackEvents Contains start and finish events for all attack phases AttackManager Behaviour that runs operation on all attacks AttackNode AttackPattern AudioManager Singleton responsible for playing background music and SFX AutoWalkBehaviour AutoWalkBehaviour.Command BaseAttack Base class for all attacks. Most attacks should derive from SimpleAttack , which has more members and helper methods. BaseAttack.Command BaseComponent Base class for every component, extending with more features BaseEffect<T> Base class for effects that character can receive by getting hit BaseHitDetector Abstract base class for hit detectors, responsible for detecting hits and calling a given function for every hit object BaseMovementBehaviour<T> BasePattern BasePatternEditor BaseTrigger BossHittableHitbox HittableHitbox that converts knockback to stun BrainCore Enemies brain is designed with modular pieces called brain modules. BrainCore class managing state machine and all brain modules. Attach only the required brain modules for your state machine logic. BrainModule Modular piece of enemy brain. This is a base abstract class for any brain module BrainModuleEditor CameraFocus Zooms the camera smoothly CameraFollow Make camera follow an entity CameraMovement Moves the camera smoothly inside a rectangle border ChainHitExecutor Composite hit executor that executes all executors one by one Character Shared methods and common components references for characters CharacterBehaviour Base class for all character behaviours. Contains useful methods and references to other components. CharacterController Base class for any character controller ClosestEnemyBrainModule State machine parameter telling the distance from the closest enemy ClosestToPlayerBrainModule State machine parameter telling if this is the closest enemy to the player CutsceneAction Moves entities to predefined points and then plays a cutscene timeline CutsceneAction.MoveDefinition DamageHitExecutor Hit executor that deals damage to an hittable DamageTranspiler Class responsible for processing damage values for the character dealing damage DeathPanel DelayedEvent DestroyAction DieBehaviour Behaviours that handles death of character DieBrainModule State machine parameters related to DieBehaviour DistancesBrainModule State machine parameters based on distances between the enemy, to any defined point in the scene DistancesBrainModule.DistanceParameterEntry Point to measure distance from and update related parameters DodgeBehaviour DodgeBehaviour.Command EffectBar EffectDefinition EffectsBar ElectrifiedEffect ElectrifiedEffect.Command ElectrifyAttack Active phase has two parts - periodic and explosion. After the periodic part is checking for hits a certain number of times, the explosion part starts. ElectrifyHitExecutor Hit executor that applies electrify effect to an hittable EncounterAction EncounterAction.EnemySpawnDefinition EncounterAction.WaveDefinition EnemiesAttackingBrainModule State machine parameter telling if any enemy is attacking, including itself EnemyCountBrainModule State machine parameter telling the number of enemies in the scene, including itself EnergyBurstAttack EnragedBrainModule State machine parameter that is set when health is below a certain value EntityManager Global store of entities, indexed with tags. Use this instead of expensive methods such as . EscapeBehaviour EscapeBehaviour.Command EscapePattern EventManager Global component that registers events, with a similar API to BaseComponent . Should be used only in classes that don't inherit from BaseComponent . EventWrapper FadePanel Figure FireEffect FireEffect.Command FollowBehaviour FollowBehaviour.Command FollowPattern ForcedBehaviour<T> ForcedWalkBehaviour ForcedWalkBehaviour.Command FullScreenToggle GameEntity GameManager Class including general level operations HealthBar HealthBrainModule State machine parameters related to HealthBrainModule.healthSystem HealthSystem Character health system Hitbox HitParticles HittableBehaviour Behaviours responsible for processing hits from attacks HittableHitbox Hittable attached to a hitbox, related to a HittableHitbox.hittableBehaviour of a character IdlePattern InterfaceWithSerializableContentDrawer use [SerializeReference,SerializeInterface] on filed definition to use the drawer, like this: [SerializeReference,SerializeInterface] private ICommand command; property drawer will automatically find all types that implement your interface and will provide UI dropdown, where you can select concrete type that you want to use. JumpBehaviour JumpBehaviour.Command KillEntitiesAction KnockbackBehaviour KnockbackBehaviour.Command KnockbackBrainModule State machine parameters related to KnockbackBehaviour KnockbackHitExecutor Hit executor that applies knockback on an hittable LineTrigger MathUtils MenuManager Class responsible of toggling menus on/off, from pressing ESCAPE and from button clicks MotionAttack An attack that has a single hit detector, hit executor, and has an anticipation and recovery phases with fixed duration. During the active phase, the character moves in the direction it looked at with a reducing speed, until it reaches zero. MotionAttack.AttackFlow MovableEntity MoveCamera MusicVolumeSlider Node NormalAttack Particles Pathfind PauseManager Singleton used to pause the game PeriodicAbsoluteHitDetector An hit detector that detects hits periodically, with a given interval PeriodicRelativeHitDetector An hit detector that detects hits periodically, with a given interval, relative to the hit object PhysicalAttributes Physical attributes of a character PlayableBehaviour<T> Abstract variant of CharacterBehaviour for behaviours than can be played and stopped PlayerAttackBrainModule State machine parameters related to player's AttackManager PlayerController Character controller designed for a human player, that plays behaviours based on user input (keyboard, mouse, controller) PlayerController.AttackProperty Pairing between attack and required button PlayerDistanceBrainModule State machine parameters related to distance from the player PlayerKnockbackBrainModule State machine parameters related to player's KnockbackBehaviour PlayerStunBrainModule State machine parameters related to player's StunBehaviour PlayEvents Contains behaviour's play and stop events PlayOnce PossessAttack PossessAttack.AttackFlow PossessedEffect PossessedEffect.Command PossessedHumanBrain PossessSource PossessSourcesDestroyAction PriorityQueue<T> ProbabilisticElectrifyHitExecutor Hit executor that randomly applies electrify effect on hittables RandomRayPattern ReadonlyAttribute RectTrigger RepositionPattern Rotation RotationDrawer RunBehaviour RunBehaviour.Command RunKick SerializeInterface ShadowObject ShowDebugAttribute SimpleAttack Simple implementation of BaseAttack , which has a single hit detector, hit executor, and all attack phases have a fixed duration SimpleAttack.AttackFlow SingleHitDetector An hit detector for which each object can be detected only once SlashAttack SlideBehaviour SlideBehaviour.Command SoundEffect SoundEffectsVolumeSlider SpawnAttack SpawnAttack.AttackFlow SpinningSwordsAttack Attack that has two hitboxes, each one has different timing inside the active phase SpinningSwordsAttack.AttackFlow StabAttack StopEncountersAction StunBehaviour StunBehaviour.Command StunBrainModule State machine parameters related to StunBehaviour StunHitExecutor Hit executor that stuns an hittable SuperArmor SuperArmor.Command SuperArmorBar SuperArmorBrainModule State machine parameters related to SuperArmorBrainModule.superArmor SuperArmorHittableHitbox HittableHitbox that cannot receive knockback or stun, and proxies hits to SuperArmorHittableHitbox.superArmor Tags TagsDrawer TextLink Transition TransitionAction Uppercut WalkableGrid WalkBehaviour WalkBehaviour.Command WalkSoundEffect WaveAnnouncer Interfaces IEffect Base non-generic interface for an effect IForcedBehaviour IHitExecutor Interface for hit executors IHittable interface for objects that can get hit IMovementBehaviour IPlayableBehaviour Enums Button Button options MotionSettings Motion settings when playing attacks Tag Delegates BounceCallback DamageTranspiler.DamageBonus Damage bonus delegate GetOverrideDirection"
  },
  "api/Global.IdlePattern.html": {
    "href": "api/Global.IdlePattern.html",
    "title": "Class IdlePattern | Heroes of the Shrine",
    "keywords": "Class IdlePattern Inheritance Object BasePattern IdlePattern Inherited Members BasePattern.hasRandomExitTime BasePattern.minTime BasePattern.maxTime BasePattern.OnEnter BasePattern.OnExit BasePattern.OnStateEnter(Animator, AnimatorStateInfo, Int32) BasePattern.OnStateUpdate(Animator, AnimatorStateInfo, Int32) BasePattern.OnStateExit(Animator, AnimatorStateInfo, Int32) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class IdlePattern : BasePattern"
  },
  "api/Global.IEffect.html": {
    "href": "api/Global.IEffect.html",
    "title": "Interface IEffect | Heroes of the Shrine",
    "keywords": "Interface IEffect Base non-generic interface for an effect Inherited Members IPlayableBehaviour.PlayEvents IPlayableBehaviour.Playing IPlayableBehaviour.Stop() Namespace : Global Assembly : cs.temp.dll.dll Syntax public interface IEffect : IPlayableBehaviour Methods GetProgress() Declaration float GetProgress() Returns Type Description Single Progress of the effect from 0 to 1. Can be used by UI elements to display the progress"
  },
  "api/Global.IForcedBehaviour.html": {
    "href": "api/Global.IForcedBehaviour.html",
    "title": "Interface IForcedBehaviour | Heroes of the Shrine",
    "keywords": "Interface IForcedBehaviour Inherited Members IPlayableBehaviour.PlayEvents IPlayableBehaviour.Playing IPlayableBehaviour.Stop() Namespace : Global Assembly : cs.temp.dll.dll Syntax public interface IForcedBehaviour : IPlayableBehaviour"
  },
  "api/Global.IHitExecutor.html": {
    "href": "api/Global.IHitExecutor.html",
    "title": "Interface IHitExecutor | Heroes of the Shrine",
    "keywords": "Interface IHitExecutor Interface for hit executors Namespace : Global Assembly : cs.temp.dll.dll Syntax public interface IHitExecutor Methods Execute(BaseAttack, IHittable) Performs hit logic on an object Declaration void Execute(BaseAttack attack, IHittable hittable) Parameters Type Name Description BaseAttack attack Related attack that made hit IHittable hittable Object hit by the attack"
  },
  "api/Global.IHittable.html": {
    "href": "api/Global.IHittable.html",
    "title": "Interface IHittable | Heroes of the Shrine",
    "keywords": "Interface IHittable interface for objects that can get hit Namespace : Global Assembly : cs.temp.dll.dll Syntax public interface IHittable Properties Character Declaration Character Character { get; } Property Value Type Description Character Related character Methods CanGetHit() Checks if the hittable can take hits at the moment Declaration bool CanGetHit() Returns Type Description Boolean true if it can take hits Hit(Single) Deals damage Declaration void Hit(float damage) Parameters Type Name Description Single damage Amount of damage, including the attacker's bonuses Knockback(Single, Single, Single) Apply knockback Declaration void Knockback(float power, float angleDegrees, float stunTime = 0F) Parameters Type Name Description Single power Knockback power, affects launch speed Single angleDegrees Angle in which hittable is launched, in degrees Single stunTime Duration of stun, used for characters resistant to knockback Stun(Single) Apply stun Declaration void Stun(float time) Parameters Type Name Description Single time Duration of stun"
  },
  "api/Global.IMovementBehaviour.html": {
    "href": "api/Global.IMovementBehaviour.html",
    "title": "Interface IMovementBehaviour | Heroes of the Shrine",
    "keywords": "Interface IMovementBehaviour Inherited Members IPlayableBehaviour.PlayEvents IPlayableBehaviour.Playing IPlayableBehaviour.Stop() Namespace : Global Assembly : cs.temp.dll.dll Syntax public interface IMovementBehaviour : IPlayableBehaviour"
  },
  "api/Global.InterfaceWithSerializableContentDrawer.html": {
    "href": "api/Global.InterfaceWithSerializableContentDrawer.html",
    "title": "Class InterfaceWithSerializableContentDrawer | Heroes of the Shrine",
    "keywords": "Class InterfaceWithSerializableContentDrawer use [SerializeReference,SerializeInterface] on filed definition to use the drawer, like this: [SerializeReference,SerializeInterface] private ICommand command; property drawer will automatically find all types that implement your interface and will provide UI dropdown, where you can select concrete type that you want to use. Inheritance Object InterfaceWithSerializableContentDrawer Namespace : Global Assembly : cs.temp.dll.dll Syntax public class InterfaceWithSerializableContentDrawer : PropertyDrawer Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Global.IPlayableBehaviour.html": {
    "href": "api/Global.IPlayableBehaviour.html",
    "title": "Interface IPlayableBehaviour | Heroes of the Shrine",
    "keywords": "Interface IPlayableBehaviour Namespace : Global Assembly : cs.temp.dll.dll Syntax public interface IPlayableBehaviour Properties PlayEvents Declaration PlayEvents PlayEvents { get; } Property Value Type Description PlayEvents Behaviour's play and stop events Playing Declaration bool Playing { get; } Property Value Type Description Boolean true if behaviour is currently playing Methods Stop() Stops the behaviour. Calling it when behaviour is not playing will not do anything. Declaration void Stop()"
  },
  "api/Global.JumpBehaviour.Command.html": {
    "href": "api/Global.JumpBehaviour.Command.html",
    "title": "Class JumpBehaviour.Command | Heroes of the Shrine",
    "keywords": "Class JumpBehaviour.Command Inheritance Object JumpBehaviour.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command"
  },
  "api/Global.JumpBehaviour.html": {
    "href": "api/Global.JumpBehaviour.html",
    "title": "Class JumpBehaviour | Heroes of the Shrine",
    "keywords": "Class JumpBehaviour Inheritance Object BaseComponent CharacterBehaviour PlayableBehaviour < JumpBehaviour.Command > BaseMovementBehaviour < JumpBehaviour.Command > JumpBehaviour Implements IMovementBehaviour IPlayableBehaviour Inherited Members BaseMovementBehaviour<JumpBehaviour.Command>.cooldown PlayableBehaviour<JumpBehaviour.Command>.PlayEvents PlayableBehaviour<JumpBehaviour.Command>.Play(JumpBehaviour.Command) PlayableBehaviour<JumpBehaviour.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class JumpBehaviour : BaseMovementBehaviour<JumpBehaviour.Command>, IMovementBehaviour, IPlayableBehaviour Fields jumpAnticipateTime Declaration public float jumpAnticipateTime Field Value Type Description Single jumpRecoverTime Declaration public float jumpRecoverTime Field Value Type Description Single jumpSpeed Declaration public float jumpSpeed Field Value Type Description Single onFinishActive Declaration public ExtEvent onFinishActive Field Value Type Description ExtEvent onStartActive Declaration public ExtEvent onStartActive Field Value Type Description ExtEvent Properties Active Declaration public bool Active { get; } Property Value Type Description Boolean Anticipating Declaration public bool Anticipating { get; } Property Value Type Description Boolean Playing Declaration public override bool Playing { get; } Property Value Type Description Boolean Overrides PlayableBehaviour<JumpBehaviour.Command>.Playing Recovering Declaration public bool Recovering { get; } Property Value Type Description Boolean Methods Awake() Declaration protected override void Awake() Overrides BaseMovementBehaviour<JumpBehaviour.Command>.Awake() CanPlay(JumpBehaviour.Command) Declaration public override bool CanPlay(JumpBehaviour.Command command) Parameters Type Name Description JumpBehaviour.Command command Returns Type Description Boolean Overrides BaseMovementBehaviour<JumpBehaviour.Command>.CanPlay(JumpBehaviour.Command) DoPlay(JumpBehaviour.Command) Declaration protected override void DoPlay(JumpBehaviour.Command command) Parameters Type Name Description JumpBehaviour.Command command Overrides PlayableBehaviour<JumpBehaviour.Command>.DoPlay(JumpBehaviour.Command) DoStop() Declaration protected override void DoStop() Overrides PlayableBehaviour<JumpBehaviour.Command>.DoStop() Implements IMovementBehaviour IPlayableBehaviour"
  },
  "api/Global.KillEntitiesAction.html": {
    "href": "api/Global.KillEntitiesAction.html",
    "title": "Class KillEntitiesAction | Heroes of the Shrine",
    "keywords": "Class KillEntitiesAction Inheritance Object BaseComponent KillEntitiesAction Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class KillEntitiesAction : BaseComponent Fields destroyImmediately Declaration public bool destroyImmediately Field Value Type Description Boolean excludedTags Declaration public Tags excludedTags Field Value Type Description Tags tags Declaration public Tags tags Field Value Type Description Tags Methods Invoke() Declaration public void Invoke()"
  },
  "api/Global.KnockbackBehaviour.Command.html": {
    "href": "api/Global.KnockbackBehaviour.Command.html",
    "title": "Class KnockbackBehaviour.Command | Heroes of the Shrine",
    "keywords": "Class KnockbackBehaviour.Command Inheritance Object KnockbackBehaviour.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command Constructors Command(Single, Single) Declaration public Command(float power, float angleDegrees) Parameters Type Name Description Single power Single angleDegrees Fields angleDegrees Declaration public readonly float angleDegrees Field Value Type Description Single power Declaration public readonly float power Field Value Type Description Single"
  },
  "api/Global.KnockbackBehaviour.html": {
    "href": "api/Global.KnockbackBehaviour.html",
    "title": "Class KnockbackBehaviour | Heroes of the Shrine",
    "keywords": "Class KnockbackBehaviour Inheritance Object BaseComponent CharacterBehaviour PlayableBehaviour < KnockbackBehaviour.Command > ForcedBehaviour < KnockbackBehaviour.Command > KnockbackBehaviour Implements IForcedBehaviour IPlayableBehaviour Inherited Members PlayableBehaviour<KnockbackBehaviour.Command>.PlayEvents PlayableBehaviour<KnockbackBehaviour.Command>.CanPlay(KnockbackBehaviour.Command) PlayableBehaviour<KnockbackBehaviour.Command>.Play(KnockbackBehaviour.Command) PlayableBehaviour<KnockbackBehaviour.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.Awake() CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class KnockbackBehaviour : ForcedBehaviour<KnockbackBehaviour.Command>, IForcedBehaviour, IPlayableBehaviour Fields knockbackRecoverTime Declaration public float knockbackRecoverTime Field Value Type Description Single Properties Active Declaration public bool Active { get; } Property Value Type Description Boolean Bounce Declaration public int Bounce { get; } Property Value Type Description Int32 Playing Declaration public override bool Playing { get; } Property Value Type Description Boolean Overrides PlayableBehaviour<KnockbackBehaviour.Command>.Playing Recovering Declaration public bool Recovering { get; } Property Value Type Description Boolean Methods DoPlay(KnockbackBehaviour.Command) Declaration protected override void DoPlay(KnockbackBehaviour.Command command) Parameters Type Name Description KnockbackBehaviour.Command command Overrides PlayableBehaviour<KnockbackBehaviour.Command>.DoPlay(KnockbackBehaviour.Command) DoStop() Declaration protected override void DoStop() Overrides PlayableBehaviour<KnockbackBehaviour.Command>.DoStop() GetRelativeDirection(Single, Rotation) Declaration public static float GetRelativeDirection(float knockbackAngle, Rotation hitDirection) Parameters Type Name Description Single knockbackAngle Rotation hitDirection Returns Type Description Single Events OnBounce Declaration public event BounceCallback OnBounce Event Type Type Description BounceCallback OnFinish Declaration public event Action OnFinish Event Type Type Description Action OnRecover Declaration public event Action OnRecover Event Type Type Description Action Implements IForcedBehaviour IPlayableBehaviour"
  },
  "api/Global.KnockbackBrainModule.html": {
    "href": "api/Global.KnockbackBrainModule.html",
    "title": "Class KnockbackBrainModule | Heroes of the Shrine",
    "keywords": "Class KnockbackBrainModule State machine parameters related to KnockbackBehaviour Inheritance Object BaseComponent CharacterBehaviour BrainModule KnockbackBrainModule Inherited Members BrainModule.StateMachine BrainModule.Awake() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class KnockbackBrainModule : BrainModule Methods GetParameters() Declaration public override string[] GetParameters() Returns Type Description String [] Overrides BrainModule.GetParameters()"
  },
  "api/Global.KnockbackHitExecutor.html": {
    "href": "api/Global.KnockbackHitExecutor.html",
    "title": "Class KnockbackHitExecutor | Heroes of the Shrine",
    "keywords": "Class KnockbackHitExecutor Hit executor that applies knockback on an hittable Inheritance Object KnockbackHitExecutor Implements IHitExecutor Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class KnockbackHitExecutor : IHitExecutor Fields knockbackDirection Declaration public float knockbackDirection Field Value Type Description Single Direction of the knockback in degrees, relative to X axis, in the direction of the hit knockbackPower Declaration public float knockbackPower Field Value Type Description Single Power of the knockback, affects its initial speed stunTime Declaration public float stunTime Field Value Type Description Single If enemy is resistant to knockback, this value will be used. Methods Execute(BaseAttack, IHittable) Declaration public void Execute(BaseAttack attack, IHittable hittable) Parameters Type Name Description BaseAttack attack IHittable hittable Implements IHitExecutor"
  },
  "api/Global.LineTrigger.html": {
    "href": "api/Global.LineTrigger.html",
    "title": "Class LineTrigger | Heroes of the Shrine",
    "keywords": "Class LineTrigger Inheritance Object BaseComponent BaseTrigger LineTrigger Inherited Members BaseTrigger.action BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class LineTrigger : BaseTrigger Fields minimumX Declaration public float minimumX Field Value Type Description Single Methods Update() Declaration protected override void Update() Overrides BaseComponent.Update()"
  },
  "api/Global.MathUtils.html": {
    "href": "api/Global.MathUtils.html",
    "title": "Class MathUtils | Heroes of the Shrine",
    "keywords": "Class MathUtils Inheritance Object MathUtils Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public static class MathUtils Methods LineRectangleIntersections(Vector2, Vector2, Vector2, Vector2) Declaration public static IEnumerable<Vector2> LineRectangleIntersections(Vector2 start, Vector2 end, Vector2 rectanglePosition, Vector2 rectangleSize) Parameters Type Name Description Vector2 start Vector2 end Vector2 rectanglePosition Vector2 rectangleSize Returns Type Description IEnumerable < Vector2 > ToPlane(Vector3) Declaration public static Vector2 ToPlane(Vector3 point) Parameters Type Name Description Vector3 point Returns Type Description Vector2 ToSpace(Vector2, Single) Declaration public static Vector3 ToSpace(Vector2 point, float y = 0F) Parameters Type Name Description Vector2 point Single y Returns Type Description Vector3"
  },
  "api/Global.MenuManager.html": {
    "href": "api/Global.MenuManager.html",
    "title": "Class MenuManager | Heroes of the Shrine",
    "keywords": "Class MenuManager Class responsible of toggling menus on/off, from pressing ESCAPE and from button clicks Inheritance Object BaseComponent MenuManager Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class MenuManager : BaseComponent Fields optionsPanel Declaration public GameObject optionsPanel Field Value Type Description GameObject pausePanel Declaration public GameObject pausePanel Field Value Type Description GameObject Methods ToggleOptionsPanel(Boolean) Declaration public void ToggleOptionsPanel(bool active) Parameters Type Name Description Boolean active TogglePausePanel(Boolean) Declaration public void TogglePausePanel(bool active) Parameters Type Name Description Boolean active Update() Declaration protected override void Update() Overrides BaseComponent.Update()"
  },
  "api/Global.MotionAttack.AttackFlow.html": {
    "href": "api/Global.MotionAttack.AttackFlow.html",
    "title": "Class MotionAttack.AttackFlow | Heroes of the Shrine",
    "keywords": "Class MotionAttack.AttackFlow Inheritance Object MotionAttack.AttackFlow Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AttackFlow Fields acceleration Declaration public float acceleration Field Value Type Description Single anticipationDuration Declaration public float anticipationDuration Field Value Type Description Single recoveryDuration Declaration public float recoveryDuration Field Value Type Description Single velocity Declaration public float velocity Field Value Type Description Single"
  },
  "api/Global.MotionAttack.html": {
    "href": "api/Global.MotionAttack.html",
    "title": "Class MotionAttack | Heroes of the Shrine",
    "keywords": "Class MotionAttack An attack that has a single hit detector, hit executor, and has an anticipation and recovery phases with fixed duration. During the active phase, the character moves in the direction it looked at with a reducing speed, until it reaches zero. Inheritance Object BaseComponent CharacterBehaviour PlayableBehaviour < BaseAttack.Command > BaseAttack MotionAttack EnergyBurstAttack RunKick SlashAttack Implements IPlayableBehaviour Inherited Members BaseAttack.attackEvents BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.IsMidair BaseAttack.Anticipating BaseAttack.Active BaseAttack.Recovering BaseAttack.Playing BaseAttack.CanPlay(BaseAttack.Command) BaseAttack.DoPlay(BaseAttack.Command) BaseAttack.DoStop() PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.Awake() CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class MotionAttack : BaseAttack, IPlayableBehaviour Fields attackFlow Declaration public MotionAttack.AttackFlow attackFlow Field Value Type Description MotionAttack.AttackFlow hitDetector Declaration public BaseHitDetector hitDetector Field Value Type Description BaseHitDetector hitExecutor Declaration public ChainHitExecutor hitExecutor Field Value Type Description ChainHitExecutor Properties Motion Declaration protected override MotionSettings Motion { get; } Property Value Type Description MotionSettings Overrides BaseAttack.Motion Methods ActivePhase() Declaration protected override IEnumerator ActivePhase() Returns Type Description IEnumerator Overrides BaseAttack.ActivePhase() AnticipationPhase() Declaration protected override IEnumerator AnticipationPhase() Returns Type Description IEnumerator Overrides BaseAttack.AnticipationPhase() RecoveryPhase() Declaration protected override IEnumerator RecoveryPhase() Returns Type Description IEnumerator Overrides BaseAttack.RecoveryPhase() Implements IPlayableBehaviour"
  },
  "api/Global.MotionSettings.html": {
    "href": "api/Global.MotionSettings.html",
    "title": "Enum MotionSettings | Heroes of the Shrine",
    "keywords": "Enum MotionSettings Motion settings when playing attacks Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum MotionSettings Fields Name Description Static WalkingDisabled WalkingEnabled"
  },
  "api/Global.MovableEntity.html": {
    "href": "api/Global.MovableEntity.html",
    "title": "Class MovableEntity | Heroes of the Shrine",
    "keywords": "Class MovableEntity Inheritance Object BaseComponent GameEntity MovableEntity Inherited Members GameEntity.parent GameEntity.tags GameEntity.position GameEntity.rotation GameEntity.scale GameEntity.WorldPosition GameEntity.WorldRotation GameEntity.WorldScale GameEntity.GroundWorldPosition GameEntity.UpdateTransform() GameEntity.TransformToWorld(Vector3) GameEntity.TransformToRelative(Vector3) GameEntity.SortingOrder GameEntity.GroundDistance(Vector3) GameEntity.GroundScreenCoordinates(Vector3) GameEntity.ScreenCoordinates(Vector3) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class MovableEntity : GameEntity Fields acceleration Declaration public Vector3 acceleration Field Value Type Description Vector3 velocity Declaration public Vector3 velocity Field Value Type Description Vector3 Methods Awake() Declaration protected override void Awake() Overrides GameEntity.Awake() Update() Declaration protected override void Update() Overrides BaseComponent.Update() UpdatePosition(Vector3) Declaration public void UpdatePosition(Vector3 newPosition) Parameters Type Name Description Vector3 newPosition Events OnLand Declaration public event Action OnLand Event Type Type Description Action OnStuck Declaration public event Action OnStuck Event Type Type Description Action"
  },
  "api/Global.MoveCamera.html": {
    "href": "api/Global.MoveCamera.html",
    "title": "Class MoveCamera | Heroes of the Shrine",
    "keywords": "Class MoveCamera Inheritance Object BaseComponent MoveCamera Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class MoveCamera : BaseComponent Fields cameraMovement Declaration public CameraMovement cameraMovement Field Value Type Description CameraMovement target Declaration public Vector3 target Field Value Type Description Vector3 Methods Invoke() Declaration public void Invoke()"
  },
  "api/Global.MusicVolumeSlider.html": {
    "href": "api/Global.MusicVolumeSlider.html",
    "title": "Class MusicVolumeSlider | Heroes of the Shrine",
    "keywords": "Class MusicVolumeSlider Inheritance Object BaseComponent MusicVolumeSlider Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class MusicVolumeSlider : BaseComponent Fields slider Declaration public Slider slider Field Value Type Description Slider"
  },
  "api/Global.Node.html": {
    "href": "api/Global.Node.html",
    "title": "Class Node | Heroes of the Shrine",
    "keywords": "Class Node Inheritance Object Node Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Node Constructors Node(Int32, Int32, Boolean, Vector3) Declaration public Node(int x, int y, bool walkable, Vector3 position) Parameters Type Name Description Int32 x Int32 y Boolean walkable Vector3 position Fields position Declaration public Vector3 position Field Value Type Description Vector3 walkable Declaration public bool walkable Field Value Type Description Boolean x Declaration public readonly int x Field Value Type Description Int32 y Declaration public readonly int y Field Value Type Description Int32"
  },
  "api/Global.NormalAttack.html": {
    "href": "api/Global.NormalAttack.html",
    "title": "Class NormalAttack | Heroes of the Shrine",
    "keywords": "Class NormalAttack Inheritance Object BaseComponent CharacterBehaviour PlayableBehaviour < BaseAttack.Command > BaseAttack SimpleAttack NormalAttack AltNormalAttack StabAttack Uppercut Implements IPlayableBehaviour Inherited Members SimpleAttack.attackFlow SimpleAttack.hitDetector SimpleAttack.hitExecutor SimpleAttack.AnticipationPhase() SimpleAttack.ActivePhase() SimpleAttack.RecoveryPhase() BaseAttack.attackEvents BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.Motion BaseAttack.IsMidair BaseAttack.Anticipating BaseAttack.Active BaseAttack.Recovering BaseAttack.Playing BaseAttack.CanPlay(BaseAttack.Command) BaseAttack.DoPlay(BaseAttack.Command) BaseAttack.DoStop() PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.Awake() CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class NormalAttack : SimpleAttack, IPlayableBehaviour Implements IPlayableBehaviour"
  },
  "api/Global.Particles.html": {
    "href": "api/Global.Particles.html",
    "title": "Class Particles | Heroes of the Shrine",
    "keywords": "Class Particles Inheritance Object BaseComponent Particles Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Particles : BaseComponent Fields attachToCharacter Declaration public bool attachToCharacter Field Value Type Description Boolean particlePosition Declaration public Vector3 particlePosition Field Value Type Description Vector3 prefab Declaration public ParticleSystem prefab Field Value Type Description ParticleSystem Methods Play() Declaration public void Play()"
  },
  "api/Global.Pathfind.html": {
    "href": "api/Global.Pathfind.html",
    "title": "Class Pathfind | Heroes of the Shrine",
    "keywords": "Class Pathfind Inheritance Object BaseComponent Pathfind Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Pathfind : BaseComponent Methods Direction(Vector3, Vector3, Node[]) Declaration public Vector3 Direction(Vector3 start, Vector3 end, Node[] excluded = null) Parameters Type Name Description Vector3 start Vector3 end Node [] excluded Returns Type Description Vector3"
  },
  "api/Global.PauseManager.html": {
    "href": "api/Global.PauseManager.html",
    "title": "Class PauseManager | Heroes of the Shrine",
    "keywords": "Class PauseManager Singleton used to pause the game Inheritance Object BaseComponent PauseManager Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PauseManager : BaseComponent Properties Instance Declaration public static PauseManager Instance { get; } Property Value Type Description PauseManager Singleton instance Paused Declaration public bool Paused { get; set; } Property Value Type Description Boolean True if game is paused. Setting the property stops Unity's , and pauses audio."
  },
  "api/Global.PeriodicAbsoluteHitDetector.html": {
    "href": "api/Global.PeriodicAbsoluteHitDetector.html",
    "title": "Class PeriodicAbsoluteHitDetector | Heroes of the Shrine",
    "keywords": "Class PeriodicAbsoluteHitDetector An hit detector that detects hits periodically, with a given interval Inheritance Object BaseHitDetector PeriodicAbsoluteHitDetector Inherited Members BaseHitDetector.hitbox BaseHitDetector.hitParticles BaseHitDetector.includedHittableTags BaseHitDetector.excludedHittableTags BaseHitDetector.StartDetector(Action<HittableHitbox>, Tags) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PeriodicAbsoluteHitDetector : BaseHitDetector Fields interval Declaration public float interval Field Value Type Description Single Interval between detections, in seconds startImmediately Declaration public bool startImmediately Field Value Type Description Boolean If true, a detection occurs immediately when BaseHitDetector.StartDetector(Action{HittableHitbox},Tags) is called. Otherwise, the first detection occurs after a PeriodicAbsoluteHitDetector.interval . Methods DoStartDetector(Action<HittableHitbox>) Declaration protected override void DoStartDetector(Action<HittableHitbox> hitCallable) Parameters Type Name Description Action < HittableHitbox > hitCallable Overrides BaseHitDetector.DoStartDetector(Action<HittableHitbox>) StopDetector() Declaration public override void StopDetector() Overrides BaseHitDetector.StopDetector() Events OnDetect Declaration public event Action OnDetect Event Type Type Description Action Invoked when detection occurs"
  },
  "api/Global.PeriodicRelativeHitDetector.html": {
    "href": "api/Global.PeriodicRelativeHitDetector.html",
    "title": "Class PeriodicRelativeHitDetector | Heroes of the Shrine",
    "keywords": "Class PeriodicRelativeHitDetector An hit detector that detects hits periodically, with a given interval, relative to the hit object Inheritance Object BaseHitDetector PeriodicRelativeHitDetector Inherited Members BaseHitDetector.hitbox BaseHitDetector.hitParticles BaseHitDetector.includedHittableTags BaseHitDetector.excludedHittableTags BaseHitDetector.StartDetector(Action<HittableHitbox>, Tags) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PeriodicRelativeHitDetector : BaseHitDetector Fields interval Declaration public float interval Field Value Type Description Single Interval between consecutive hits of a single hittable, in seconds Methods DoStartDetector(Action<HittableHitbox>) Declaration protected override void DoStartDetector(Action<HittableHitbox> hitCallable) Parameters Type Name Description Action < HittableHitbox > hitCallable Overrides BaseHitDetector.DoStartDetector(Action<HittableHitbox>) StopDetector() Declaration public override void StopDetector() Overrides BaseHitDetector.StopDetector()"
  },
  "api/Global.PhysicalAttributes.html": {
    "href": "api/Global.PhysicalAttributes.html",
    "title": "Class PhysicalAttributes | Heroes of the Shrine",
    "keywords": "Class PhysicalAttributes Physical attributes of a character Inheritance Object PhysicalAttributes Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PhysicalAttributes : ScriptableObject Fields gravityAcceleration Declaration public float gravityAcceleration Field Value Type Description Single The rate in which the character gains speed in Y axis when Y > 0"
  },
  "api/Global.PlayableBehaviour-1.html": {
    "href": "api/Global.PlayableBehaviour-1.html",
    "title": "Class PlayableBehaviour<T> | Heroes of the Shrine",
    "keywords": "Class PlayableBehaviour<T> Abstract variant of CharacterBehaviour for behaviours than can be played and stopped Inheritance Object BaseComponent CharacterBehaviour PlayableBehaviour<T> BaseAttack BaseEffect<T> BaseMovementBehaviour<T> ForcedBehaviour<T> ForcedWalkBehaviour SuperArmor Implements IPlayableBehaviour Inherited Members CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.Awake() CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public abstract class PlayableBehaviour<T> : CharacterBehaviour, IPlayableBehaviour Type Parameters Name Description T Command type that PlayableBehaviour`1.Play(`0) method accepts Properties PlayEvents Declaration public PlayEvents PlayEvents { get; } Property Value Type Description PlayEvents Behaviour's play and stop events Playing Declaration public abstract bool Playing { get; } Property Value Type Description Boolean true if behaviour is currently playing Methods CanPlay(T) Declaration public virtual bool CanPlay(T command) Parameters Type Name Description T command Returns Type Description Boolean True if behaviour can be played. Override to add more conditions DoPlay(T) Executed when behaviour is played Declaration protected abstract void DoPlay(T command) Parameters Type Name Description T command Arguments of the behaviour, same as those passed to PlayableBehaviour`1.Play(`0) DoStop() Executed when behaviour is stopped Declaration protected abstract void DoStop() Play(T) Plays the behaviour. To customize the functionality, implement PlayableBehaviour`1.DoPlay(`0) Declaration public void Play(T command) Parameters Type Name Description T command Arguments of the behaviour Stop() Stops the behaviour. Can be used safely also when PlayableBehaviour`1.Playing is false , as it will do nothing. Declaration public void Stop() Implements IPlayableBehaviour"
  },
  "api/Global.PlayerAttackBrainModule.html": {
    "href": "api/Global.PlayerAttackBrainModule.html",
    "title": "Class PlayerAttackBrainModule | Heroes of the Shrine",
    "keywords": "Class PlayerAttackBrainModule State machine parameters related to player's AttackManager Inheritance Object BaseComponent CharacterBehaviour BrainModule PlayerAttackBrainModule Inherited Members BrainModule.StateMachine CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PlayerAttackBrainModule : BrainModule Methods Awake() Declaration protected override void Awake() Overrides BrainModule.Awake() GetParameters() Declaration public override string[] GetParameters() Returns Type Description String [] Overrides BrainModule.GetParameters()"
  },
  "api/Global.PlayerController.AttackProperty.html": {
    "href": "api/Global.PlayerController.AttackProperty.html",
    "title": "Class PlayerController.AttackProperty | Heroes of the Shrine",
    "keywords": "Class PlayerController.AttackProperty Pairing between attack and required button Inheritance Object PlayerController.AttackProperty Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AttackProperty Fields attack Declaration public BaseAttack attack Field Value Type Description BaseAttack button Declaration public Button button Field Value Type Description Button"
  },
  "api/Global.PlayerController.html": {
    "href": "api/Global.PlayerController.html",
    "title": "Class PlayerController | Heroes of the Shrine",
    "keywords": "Class PlayerController Character controller designed for a human player, that plays behaviours based on user input (keyboard, mouse, controller) Inheritance Object BaseComponent CharacterBehaviour CharacterController PlayerController Inherited Members CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PlayerController : CharacterController Fields attackPriority Declaration public int attackPriority Field Value Type Description Int32 attacks Declaration public PlayerController.AttackProperty[] attacks Field Value Type Description PlayerController.AttackProperty [] List of attacks that can be played using the controller bufferingTime Declaration public float bufferingTime Field Value Type Description Single Window for input buffering, after that time is passed, that input is forgotten dodgePriority Declaration public int dodgePriority Field Value Type Description Int32 jumpPriority Declaration public int jumpPriority Field Value Type Description Int32 possessedEffectDurationReduction Declaration public float possessedEffectDurationReduction Field Value Type Description Single possessedEffectTimeReducing Declaration public List<Button> possessedEffectTimeReducing Field Value Type Description List < Button > slidePriority Declaration public int slidePriority Field Value Type Description Int32 walkPriority Declaration public int walkPriority Field Value Type Description Int32 Methods Awake() Declaration protected override void Awake() Overrides CharacterBehaviour.Awake() Update() Declaration protected override void Update() Overrides BaseComponent.Update()"
  },
  "api/Global.PlayerDistanceBrainModule.html": {
    "href": "api/Global.PlayerDistanceBrainModule.html",
    "title": "Class PlayerDistanceBrainModule | Heroes of the Shrine",
    "keywords": "Class PlayerDistanceBrainModule State machine parameters related to distance from the player Inheritance Object BaseComponent CharacterBehaviour BrainModule PlayerDistanceBrainModule Inherited Members BrainModule.StateMachine CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PlayerDistanceBrainModule : BrainModule Methods Awake() Declaration protected override void Awake() Overrides BrainModule.Awake() GetParameters() Declaration public override string[] GetParameters() Returns Type Description String [] Overrides BrainModule.GetParameters() Update() Declaration protected override void Update() Overrides BaseComponent.Update()"
  },
  "api/Global.PlayerKnockbackBrainModule.html": {
    "href": "api/Global.PlayerKnockbackBrainModule.html",
    "title": "Class PlayerKnockbackBrainModule | Heroes of the Shrine",
    "keywords": "Class PlayerKnockbackBrainModule State machine parameters related to player's KnockbackBehaviour Inheritance Object BaseComponent CharacterBehaviour BrainModule PlayerKnockbackBrainModule Inherited Members BrainModule.StateMachine CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PlayerKnockbackBrainModule : BrainModule Methods Awake() Declaration protected override void Awake() Overrides BrainModule.Awake() GetParameters() Declaration public override string[] GetParameters() Returns Type Description String [] Overrides BrainModule.GetParameters()"
  },
  "api/Global.PlayerStunBrainModule.html": {
    "href": "api/Global.PlayerStunBrainModule.html",
    "title": "Class PlayerStunBrainModule | Heroes of the Shrine",
    "keywords": "Class PlayerStunBrainModule State machine parameters related to player's StunBehaviour Inheritance Object BaseComponent CharacterBehaviour BrainModule PlayerStunBrainModule Inherited Members BrainModule.StateMachine CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PlayerStunBrainModule : BrainModule Methods Awake() Declaration protected override void Awake() Overrides BrainModule.Awake() GetParameters() Declaration public override string[] GetParameters() Returns Type Description String [] Overrides BrainModule.GetParameters()"
  },
  "api/Global.PlayEvents.html": {
    "href": "api/Global.PlayEvents.html",
    "title": "Class PlayEvents | Heroes of the Shrine",
    "keywords": "Class PlayEvents Contains behaviour's play and stop events Inheritance Object PlayEvents Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PlayEvents Fields onPlay Declaration public ExtEvent onPlay Field Value Type Description ExtEvent Behaviour was played onStop Declaration public ExtEvent onStop Field Value Type Description ExtEvent Behaviour was stopped"
  },
  "api/Global.PlayOnce.html": {
    "href": "api/Global.PlayOnce.html",
    "title": "Class PlayOnce | Heroes of the Shrine",
    "keywords": "Class PlayOnce Inheritance Object BaseComponent PlayOnce Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PlayOnce : BaseComponent Fields firstEvent Declaration public ExtEvent firstEvent Field Value Type Description ExtEvent playOnAwake Declaration public bool playOnAwake Field Value Type Description Boolean restEvent Declaration public ExtEvent restEvent Field Value Type Description ExtEvent uniqueId Declaration public string uniqueId Field Value Type Description String Methods Play() Declaration public void Play()"
  },
  "api/Global.PossessAttack.AttackFlow.html": {
    "href": "api/Global.PossessAttack.AttackFlow.html",
    "title": "Class PossessAttack.AttackFlow | Heroes of the Shrine",
    "keywords": "Class PossessAttack.AttackFlow Inheritance Object PossessAttack.AttackFlow Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AttackFlow Fields anticipationDuration Declaration public float anticipationDuration Field Value Type Description Single recoveryDuration Declaration public float recoveryDuration Field Value Type Description Single sourceActiveDuration Declaration public float sourceActiveDuration Field Value Type Description Single warningDuration Declaration public float warningDuration Field Value Type Description Single waveCount Declaration public int waveCount Field Value Type Description Int32"
  },
  "api/Global.PossessAttack.html": {
    "href": "api/Global.PossessAttack.html",
    "title": "Class PossessAttack | Heroes of the Shrine",
    "keywords": "Class PossessAttack Inheritance Object BaseComponent CharacterBehaviour PlayableBehaviour < BaseAttack.Command > BaseAttack PossessAttack Implements IPlayableBehaviour Inherited Members BaseAttack.attackEvents BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.Motion BaseAttack.IsMidair BaseAttack.Anticipating BaseAttack.Active BaseAttack.Recovering BaseAttack.Playing BaseAttack.CanPlay(BaseAttack.Command) BaseAttack.DoPlay(BaseAttack.Command) BaseAttack.DoStop() PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PossessAttack : BaseAttack, IPlayableBehaviour Fields attackFlow Declaration public PossessAttack.AttackFlow attackFlow Field Value Type Description PossessAttack.AttackFlow effectDuration Declaration public float effectDuration Field Value Type Description Single minSourcesDistance Declaration public float minSourcesDistance Field Value Type Description Single possessSource Declaration public PossessSource possessSource Field Value Type Description PossessSource sourceDamage Declaration public int sourceDamage Field Value Type Description Int32 sourcesCount Declaration public int sourcesCount Field Value Type Description Int32 spawnRadius Declaration public float spawnRadius Field Value Type Description Single Methods ActivePhase() Declaration protected override IEnumerator ActivePhase() Returns Type Description IEnumerator Overrides BaseAttack.ActivePhase() AnticipationPhase() Declaration protected override IEnumerator AnticipationPhase() Returns Type Description IEnumerator Overrides BaseAttack.AnticipationPhase() Awake() Declaration protected override void Awake() Overrides CharacterBehaviour.Awake() RecoveryPhase() Declaration protected override IEnumerator RecoveryPhase() Returns Type Description IEnumerator Overrides BaseAttack.RecoveryPhase() Implements IPlayableBehaviour"
  },
  "api/Global.PossessedEffect.Command.html": {
    "href": "api/Global.PossessedEffect.Command.html",
    "title": "Class PossessedEffect.Command | Heroes of the Shrine",
    "keywords": "Class PossessedEffect.Command Inheritance Object PossessedEffect.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command Constructors Command(Single) Declaration public Command(float maxDuration) Parameters Type Name Description Single maxDuration Fields maxDuration Declaration public readonly float maxDuration Field Value Type Description Single"
  },
  "api/Global.PossessedEffect.html": {
    "href": "api/Global.PossessedEffect.html",
    "title": "Class PossessedEffect | Heroes of the Shrine",
    "keywords": "Class PossessedEffect Inheritance Object BaseComponent CharacterBehaviour PlayableBehaviour < PossessedEffect.Command > BaseEffect < PossessedEffect.Command > PossessedEffect Implements IEffect IPlayableBehaviour Inherited Members BaseEffect<PossessedEffect.Command>.Active BaseEffect<PossessedEffect.Command>.Playing PlayableBehaviour<PossessedEffect.Command>.PlayEvents PlayableBehaviour<PossessedEffect.Command>.Play(PossessedEffect.Command) PlayableBehaviour<PossessedEffect.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.Awake() CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PossessedEffect : BaseEffect<PossessedEffect.Command>, IEffect, IPlayableBehaviour Methods CanPlay(PossessedEffect.Command) Declaration public override bool CanPlay(PossessedEffect.Command command) Parameters Type Name Description PossessedEffect.Command command Returns Type Description Boolean Overrides BaseEffect<PossessedEffect.Command>.CanPlay(PossessedEffect.Command) DoPlay(PossessedEffect.Command) Declaration protected override void DoPlay(PossessedEffect.Command command) Parameters Type Name Description PossessedEffect.Command command Overrides PlayableBehaviour<PossessedEffect.Command>.DoPlay(PossessedEffect.Command) DoStop() Declaration protected override void DoStop() Overrides PlayableBehaviour<PossessedEffect.Command>.DoStop() GetProgress() Declaration public override float GetProgress() Returns Type Description Single Overrides BaseEffect<PossessedEffect.Command>.GetProgress() ReduceDuration(Single) Declaration public void ReduceDuration(float durationPart) Parameters Type Name Description Single durationPart Implements IEffect IPlayableBehaviour"
  },
  "api/Global.PossessedHumanBrain.html": {
    "href": "api/Global.PossessedHumanBrain.html",
    "title": "Class PossessedHumanBrain | Heroes of the Shrine",
    "keywords": "Class PossessedHumanBrain Inheritance Object BaseComponent PossessedHumanBrain Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PossessedHumanBrain : BaseComponent Fields animator Declaration public Animator animator Field Value Type Description Animator"
  },
  "api/Global.PossessSource.html": {
    "href": "api/Global.PossessSource.html",
    "title": "Class PossessSource | Heroes of the Shrine",
    "keywords": "Class PossessSource Inheritance Object BaseComponent PossessSource Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PossessSource : BaseComponent Fields animator Declaration public Animator animator Field Value Type Description Animator hitAnimationDuration Declaration public float hitAnimationDuration Field Value Type Description Single hitDetector Declaration public BaseHitDetector hitDetector Field Value Type Description BaseHitDetector Methods Activate(Single, Single, Tags, Single, Int32) Declaration public void Activate(float warningDuration, float activeDuration, Tags hittableTags, float effectDuration, int hitDamage) Parameters Type Name Description Single warningDuration Single activeDuration Tags hittableTags Single effectDuration Int32 hitDamage"
  },
  "api/Global.PossessSourcesDestroyAction.html": {
    "href": "api/Global.PossessSourcesDestroyAction.html",
    "title": "Class PossessSourcesDestroyAction | Heroes of the Shrine",
    "keywords": "Class PossessSourcesDestroyAction Inheritance Object BaseComponent PossessSourcesDestroyAction Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PossessSourcesDestroyAction : BaseComponent Methods Invoke() Declaration public void Invoke()"
  },
  "api/Global.PriorityQueue-1.html": {
    "href": "api/Global.PriorityQueue-1.html",
    "title": "Class PriorityQueue<T> | Heroes of the Shrine",
    "keywords": "Class PriorityQueue<T> Inheritance Object PriorityQueue<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PriorityQueue<T> Type Parameters Name Description T Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Dequeue() Declaration public T Dequeue() Returns Type Description T Enqueue(T, Double) Declaration public void Enqueue(T item, double priority) Parameters Type Name Description T item Double priority"
  },
  "api/Global.ProbabilisticElectrifyHitExecutor.html": {
    "href": "api/Global.ProbabilisticElectrifyHitExecutor.html",
    "title": "Class ProbabilisticElectrifyHitExecutor | Heroes of the Shrine",
    "keywords": "Class ProbabilisticElectrifyHitExecutor Hit executor that randomly applies electrify effect on hittables Inheritance Object ProbabilisticElectrifyHitExecutor Implements IHitExecutor Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ProbabilisticElectrifyHitExecutor : IHitExecutor Fields electrifyHitExecutor Declaration public ElectrifyHitExecutor electrifyHitExecutor Field Value Type Description ElectrifyHitExecutor Executor to be executed if electrify effect was \"decided\" to be applied probability Declaration public float probability Field Value Type Description Single Probability that electrify effect is applied Methods Execute(BaseAttack, IHittable) Declaration public void Execute(BaseAttack attack, IHittable hittable) Parameters Type Name Description BaseAttack attack IHittable hittable Implements IHitExecutor"
  },
  "api/Global.RandomRayPattern.html": {
    "href": "api/Global.RandomRayPattern.html",
    "title": "Class RandomRayPattern | Heroes of the Shrine",
    "keywords": "Class RandomRayPattern Inheritance Object BasePattern RandomRayPattern Inherited Members BasePattern.hasRandomExitTime BasePattern.minTime BasePattern.maxTime BasePattern.OnEnter BasePattern.OnExit BasePattern.OnStateUpdate(Animator, AnimatorStateInfo, Int32) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class RandomRayPattern : BasePattern Fields speedMultiplier Declaration public float speedMultiplier Field Value Type Description Single Methods OnStateEnter(Animator, AnimatorStateInfo, Int32) Declaration public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description Animator animator AnimatorStateInfo stateInfo Int32 layerIndex Overrides BasePattern.OnStateEnter(Animator, AnimatorStateInfo, Int32) OnStateExit(Animator, AnimatorStateInfo, Int32) Declaration public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description Animator animator AnimatorStateInfo stateInfo Int32 layerIndex Overrides BasePattern.OnStateExit(Animator, AnimatorStateInfo, Int32)"
  },
  "api/Global.ReadonlyAttribute.html": {
    "href": "api/Global.ReadonlyAttribute.html",
    "title": "Class ReadonlyAttribute | Heroes of the Shrine",
    "keywords": "Class ReadonlyAttribute Inheritance Object ReadonlyAttribute ShowDebugAttribute Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ReadonlyAttribute : PropertyAttribute Constructors ReadonlyAttribute(Boolean) Declaration public ReadonlyAttribute(bool playMode = false) Parameters Type Name Description Boolean playMode Fields playMode Declaration public readonly bool playMode Field Value Type Description Boolean"
  },
  "api/Global.RectTrigger.html": {
    "href": "api/Global.RectTrigger.html",
    "title": "Class RectTrigger | Heroes of the Shrine",
    "keywords": "Class RectTrigger Inheritance Object BaseComponent BaseTrigger RectTrigger Inherited Members BaseTrigger.action BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class RectTrigger : BaseTrigger Fields position Declaration public Vector3 position Field Value Type Description Vector3 size Declaration public Vector3 size Field Value Type Description Vector3 Methods Update() Declaration protected override void Update() Overrides BaseComponent.Update()"
  },
  "api/Global.RepositionPattern.html": {
    "href": "api/Global.RepositionPattern.html",
    "title": "Class RepositionPattern | Heroes of the Shrine",
    "keywords": "Class RepositionPattern Inheritance Object BasePattern RepositionPattern Inherited Members BasePattern.hasRandomExitTime BasePattern.minTime BasePattern.maxTime BasePattern.OnEnter BasePattern.OnExit BasePattern.OnStateUpdate(Animator, AnimatorStateInfo, Int32) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class RepositionPattern : BasePattern Fields destination Declaration public Vector3 destination Field Value Type Description Vector3 speedMultiplier Declaration public float speedMultiplier Field Value Type Description Single Methods OnStateEnter(Animator, AnimatorStateInfo, Int32) Declaration public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description Animator animator AnimatorStateInfo stateInfo Int32 layerIndex Overrides BasePattern.OnStateEnter(Animator, AnimatorStateInfo, Int32) OnStateExit(Animator, AnimatorStateInfo, Int32) Declaration public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description Animator animator AnimatorStateInfo stateInfo Int32 layerIndex Overrides BasePattern.OnStateExit(Animator, AnimatorStateInfo, Int32)"
  },
  "api/Global.Rotation.html": {
    "href": "api/Global.Rotation.html",
    "title": "Class Rotation | Heroes of the Shrine",
    "keywords": "Class Rotation Inheritance Object Rotation Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Rotation Constructors Rotation(Int32) Declaration public Rotation(int value) Parameters Type Name Description Int32 value Properties Left Declaration public static Rotation Left { get; } Property Value Type Description Rotation Right Declaration public static Rotation Right { get; } Property Value Type Description Rotation Methods Equals(Rotation) Declaration public bool Equals(Rotation other) Parameters Type Name Description Rotation other Returns Type Description Boolean Operators Implicit(Rotation to Quaternion) Declaration public static implicit operator Quaternion(Rotation rotation) Parameters Type Name Description Rotation rotation Returns Type Description Quaternion Implicit(Rotation to Int32) Declaration public static implicit operator int (Rotation rotation) Parameters Type Name Description Rotation rotation Returns Type Description Int32 Implicit(Int32 to Rotation) Declaration public static implicit operator Rotation(int value) Parameters Type Name Description Int32 value Returns Type Description Rotation Multiply(Rotation, Rotation) Declaration public static Rotation operator *(Rotation a, Rotation b) Parameters Type Name Description Rotation a Rotation b Returns Type Description Rotation Multiply(Rotation, Vector3) Declaration public static Vector3 operator *(Rotation rotation, Vector3 relativePosition) Parameters Type Name Description Rotation rotation Vector3 relativePosition Returns Type Description Vector3 UnaryNegation(Rotation) Declaration public static Rotation operator -(Rotation rotation) Parameters Type Name Description Rotation rotation Returns Type Description Rotation"
  },
  "api/Global.RotationDrawer.html": {
    "href": "api/Global.RotationDrawer.html",
    "title": "Class RotationDrawer | Heroes of the Shrine",
    "keywords": "Class RotationDrawer Inheritance Object RotationDrawer Namespace : Global Assembly : cs.temp.dll.dll Syntax public class RotationDrawer : PropertyDrawer Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Global.RunBehaviour.Command.html": {
    "href": "api/Global.RunBehaviour.Command.html",
    "title": "Class RunBehaviour.Command | Heroes of the Shrine",
    "keywords": "Class RunBehaviour.Command Inheritance Object RunBehaviour.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command"
  },
  "api/Global.RunBehaviour.html": {
    "href": "api/Global.RunBehaviour.html",
    "title": "Class RunBehaviour | Heroes of the Shrine",
    "keywords": "Class RunBehaviour Inheritance Object BaseComponent CharacterBehaviour PlayableBehaviour < RunBehaviour.Command > BaseMovementBehaviour < RunBehaviour.Command > RunBehaviour Implements IMovementBehaviour IPlayableBehaviour Inherited Members BaseMovementBehaviour<RunBehaviour.Command>.cooldown BaseMovementBehaviour<RunBehaviour.Command>.CanPlay(RunBehaviour.Command) PlayableBehaviour<RunBehaviour.Command>.PlayEvents PlayableBehaviour<RunBehaviour.Command>.Play(RunBehaviour.Command) PlayableBehaviour<RunBehaviour.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class RunBehaviour : BaseMovementBehaviour<RunBehaviour.Command>, IMovementBehaviour, IPlayableBehaviour Fields runParticles Declaration public ParticleSystem runParticles Field Value Type Description ParticleSystem runSpeedMultiplier Declaration public float runSpeedMultiplier Field Value Type Description Single timeToRun Declaration public float timeToRun Field Value Type Description Single Properties Playing Declaration public override bool Playing { get; } Property Value Type Description Boolean Overrides PlayableBehaviour<RunBehaviour.Command>.Playing Run Declaration public bool Run { get; } Property Value Type Description Boolean Methods Awake() Declaration protected override void Awake() Overrides BaseMovementBehaviour<RunBehaviour.Command>.Awake() DoPlay(RunBehaviour.Command) Declaration protected override void DoPlay(RunBehaviour.Command command) Parameters Type Name Description RunBehaviour.Command command Overrides PlayableBehaviour<RunBehaviour.Command>.DoPlay(RunBehaviour.Command) DoStop() Declaration protected override void DoStop() Overrides PlayableBehaviour<RunBehaviour.Command>.DoStop() Implements IMovementBehaviour IPlayableBehaviour"
  },
  "api/Global.RunKick.html": {
    "href": "api/Global.RunKick.html",
    "title": "Class RunKick | Heroes of the Shrine",
    "keywords": "Class RunKick Inheritance Object BaseComponent CharacterBehaviour PlayableBehaviour < BaseAttack.Command > BaseAttack MotionAttack RunKick Implements IPlayableBehaviour Inherited Members MotionAttack.attackFlow MotionAttack.hitDetector MotionAttack.hitExecutor MotionAttack.Motion MotionAttack.AnticipationPhase() MotionAttack.ActivePhase() MotionAttack.RecoveryPhase() BaseAttack.attackEvents BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.IsMidair BaseAttack.Anticipating BaseAttack.Active BaseAttack.Recovering BaseAttack.Playing BaseAttack.DoPlay(BaseAttack.Command) BaseAttack.DoStop() PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.Awake() CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class RunKick : MotionAttack, IPlayableBehaviour Methods CanPlay(BaseAttack.Command) Declaration public override bool CanPlay(BaseAttack.Command command) Parameters Type Name Description BaseAttack.Command command Returns Type Description Boolean Overrides BaseAttack.CanPlay(BaseAttack.Command) Implements IPlayableBehaviour"
  },
  "api/Global.SerializeInterface.html": {
    "href": "api/Global.SerializeInterface.html",
    "title": "Class SerializeInterface | Heroes of the Shrine",
    "keywords": "Class SerializeInterface Inheritance Object SerializeInterface Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SerializeInterface : PropertyAttribute"
  },
  "api/Global.ShadowObject.html": {
    "href": "api/Global.ShadowObject.html",
    "title": "Class ShadowObject | Heroes of the Shrine",
    "keywords": "Class ShadowObject Inheritance Object BaseComponent ShadowObject Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ShadowObject : BaseComponent Fields animationDefinitions Declaration public AnimationDefinition[] animationDefinitions Field Value Type Description AnimationDefinition [] figure Declaration public Animator figure Field Value Type Description Animator movableEntity Declaration public MovableEntity movableEntity Field Value Type Description MovableEntity shadowScale Declaration public Vector3 shadowScale Field Value Type Description Vector3 Methods Update() Declaration protected override void Update() Overrides BaseComponent.Update()"
  },
  "api/Global.ShowDebugAttribute.html": {
    "href": "api/Global.ShowDebugAttribute.html",
    "title": "Class ShowDebugAttribute | Heroes of the Shrine",
    "keywords": "Class ShowDebugAttribute Inheritance Object ReadonlyAttribute ShowDebugAttribute Inherited Members ReadonlyAttribute.playMode Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ShowDebugAttribute : ReadonlyAttribute Constructors ShowDebugAttribute() Declaration public ShowDebugAttribute()"
  },
  "api/Global.SimpleAttack.AttackFlow.html": {
    "href": "api/Global.SimpleAttack.AttackFlow.html",
    "title": "Class SimpleAttack.AttackFlow | Heroes of the Shrine",
    "keywords": "Class SimpleAttack.AttackFlow Inheritance Object SimpleAttack.AttackFlow Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AttackFlow Fields activeDuration Declaration public float activeDuration Field Value Type Description Single anticipationDuration Declaration public float anticipationDuration Field Value Type Description Single recoveryDuration Declaration public float recoveryDuration Field Value Type Description Single"
  },
  "api/Global.SimpleAttack.html": {
    "href": "api/Global.SimpleAttack.html",
    "title": "Class SimpleAttack | Heroes of the Shrine",
    "keywords": "Class SimpleAttack Simple implementation of BaseAttack , which has a single hit detector, hit executor, and all attack phases have a fixed duration Inheritance Object BaseComponent CharacterBehaviour PlayableBehaviour < BaseAttack.Command > BaseAttack SimpleAttack AirAttack NormalAttack Implements IPlayableBehaviour Inherited Members BaseAttack.attackEvents BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.Motion BaseAttack.IsMidair BaseAttack.Anticipating BaseAttack.Active BaseAttack.Recovering BaseAttack.Playing BaseAttack.CanPlay(BaseAttack.Command) BaseAttack.DoPlay(BaseAttack.Command) BaseAttack.DoStop() PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.Awake() CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SimpleAttack : BaseAttack, IPlayableBehaviour Fields attackFlow Declaration public SimpleAttack.AttackFlow attackFlow Field Value Type Description SimpleAttack.AttackFlow hitDetector Declaration public BaseHitDetector hitDetector Field Value Type Description BaseHitDetector hitExecutor Declaration public ChainHitExecutor hitExecutor Field Value Type Description ChainHitExecutor Methods ActivePhase() Declaration protected override IEnumerator ActivePhase() Returns Type Description IEnumerator Overrides BaseAttack.ActivePhase() AnticipationPhase() Declaration protected override IEnumerator AnticipationPhase() Returns Type Description IEnumerator Overrides BaseAttack.AnticipationPhase() RecoveryPhase() Declaration protected override IEnumerator RecoveryPhase() Returns Type Description IEnumerator Overrides BaseAttack.RecoveryPhase() Implements IPlayableBehaviour"
  },
  "api/Global.SingleHitDetector.html": {
    "href": "api/Global.SingleHitDetector.html",
    "title": "Class SingleHitDetector | Heroes of the Shrine",
    "keywords": "Class SingleHitDetector An hit detector for which each object can be detected only once Inheritance Object BaseHitDetector SingleHitDetector Inherited Members BaseHitDetector.hitbox BaseHitDetector.hitParticles BaseHitDetector.includedHittableTags BaseHitDetector.excludedHittableTags BaseHitDetector.StartDetector(Action<HittableHitbox>, Tags) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SingleHitDetector : BaseHitDetector Methods DoStartDetector(Action<HittableHitbox>) Declaration protected override void DoStartDetector(Action<HittableHitbox> hitCallable) Parameters Type Name Description Action < HittableHitbox > hitCallable Overrides BaseHitDetector.DoStartDetector(Action<HittableHitbox>) StopDetector() Declaration public override void StopDetector() Overrides BaseHitDetector.StopDetector()"
  },
  "api/Global.SlashAttack.html": {
    "href": "api/Global.SlashAttack.html",
    "title": "Class SlashAttack | Heroes of the Shrine",
    "keywords": "Class SlashAttack Inheritance Object BaseComponent CharacterBehaviour PlayableBehaviour < BaseAttack.Command > BaseAttack MotionAttack SlashAttack Implements IPlayableBehaviour Inherited Members MotionAttack.attackFlow MotionAttack.hitDetector MotionAttack.hitExecutor MotionAttack.Motion MotionAttack.AnticipationPhase() MotionAttack.ActivePhase() MotionAttack.RecoveryPhase() BaseAttack.attackEvents BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.IsMidair BaseAttack.Anticipating BaseAttack.Active BaseAttack.Recovering BaseAttack.Playing BaseAttack.CanPlay(BaseAttack.Command) BaseAttack.DoPlay(BaseAttack.Command) BaseAttack.DoStop() PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.Awake() CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SlashAttack : MotionAttack, IPlayableBehaviour Implements IPlayableBehaviour"
  },
  "api/Global.SlideBehaviour.Command.html": {
    "href": "api/Global.SlideBehaviour.Command.html",
    "title": "Class SlideBehaviour.Command | Heroes of the Shrine",
    "keywords": "Class SlideBehaviour.Command Inheritance Object SlideBehaviour.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command Constructors Command(Int32) Declaration public Command(int direction) Parameters Type Name Description Int32 direction Fields direction Declaration public readonly int direction Field Value Type Description Int32"
  },
  "api/Global.SlideBehaviour.html": {
    "href": "api/Global.SlideBehaviour.html",
    "title": "Class SlideBehaviour | Heroes of the Shrine",
    "keywords": "Class SlideBehaviour Inheritance Object BaseComponent CharacterBehaviour PlayableBehaviour < SlideBehaviour.Command > BaseMovementBehaviour < SlideBehaviour.Command > SlideBehaviour Implements IMovementBehaviour IPlayableBehaviour Inherited Members BaseMovementBehaviour<SlideBehaviour.Command>.cooldown BaseMovementBehaviour<SlideBehaviour.Command>.Awake() PlayableBehaviour<SlideBehaviour.Command>.PlayEvents PlayableBehaviour<SlideBehaviour.Command>.Play(SlideBehaviour.Command) PlayableBehaviour<SlideBehaviour.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SlideBehaviour : BaseMovementBehaviour<SlideBehaviour.Command>, IMovementBehaviour, IPlayableBehaviour Fields slideSpeedMultiplier Declaration public float slideSpeedMultiplier Field Value Type Description Single slideStopAcceleration Declaration public float slideStopAcceleration Field Value Type Description Single Properties Playing Declaration public override bool Playing { get; } Property Value Type Description Boolean Overrides PlayableBehaviour<SlideBehaviour.Command>.Playing Slide Declaration public bool Slide { get; } Property Value Type Description Boolean Methods CanPlay(SlideBehaviour.Command) Declaration public override bool CanPlay(SlideBehaviour.Command command) Parameters Type Name Description SlideBehaviour.Command command Returns Type Description Boolean Overrides BaseMovementBehaviour<SlideBehaviour.Command>.CanPlay(SlideBehaviour.Command) DoPlay(SlideBehaviour.Command) Declaration protected override void DoPlay(SlideBehaviour.Command command) Parameters Type Name Description SlideBehaviour.Command command Overrides PlayableBehaviour<SlideBehaviour.Command>.DoPlay(SlideBehaviour.Command) DoStop() Declaration protected override void DoStop() Overrides PlayableBehaviour<SlideBehaviour.Command>.DoStop() Implements IMovementBehaviour IPlayableBehaviour"
  },
  "api/Global.SoundEffect.html": {
    "href": "api/Global.SoundEffect.html",
    "title": "Class SoundEffect | Heroes of the Shrine",
    "keywords": "Class SoundEffect Inheritance Object BaseComponent SoundEffect Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SoundEffect : BaseComponent Methods Play(AudioClip) Declaration public void Play(AudioClip clip) Parameters Type Name Description AudioClip clip"
  },
  "api/Global.SoundEffectsVolumeSlider.html": {
    "href": "api/Global.SoundEffectsVolumeSlider.html",
    "title": "Class SoundEffectsVolumeSlider | Heroes of the Shrine",
    "keywords": "Class SoundEffectsVolumeSlider Inheritance Object BaseComponent SoundEffectsVolumeSlider Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SoundEffectsVolumeSlider : BaseComponent Fields slider Declaration public Slider slider Field Value Type Description Slider"
  },
  "api/Global.SpawnAttack.AttackFlow.html": {
    "href": "api/Global.SpawnAttack.AttackFlow.html",
    "title": "Class SpawnAttack.AttackFlow | Heroes of the Shrine",
    "keywords": "Class SpawnAttack.AttackFlow Inheritance Object SpawnAttack.AttackFlow Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AttackFlow Fields anticipationDuration Declaration public float anticipationDuration Field Value Type Description Single recoveryDuration Declaration public float recoveryDuration Field Value Type Description Single"
  },
  "api/Global.SpawnAttack.html": {
    "href": "api/Global.SpawnAttack.html",
    "title": "Class SpawnAttack | Heroes of the Shrine",
    "keywords": "Class SpawnAttack Inheritance Object BaseComponent CharacterBehaviour PlayableBehaviour < BaseAttack.Command > BaseAttack SpawnAttack Implements IPlayableBehaviour Inherited Members BaseAttack.attackEvents BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.Motion BaseAttack.IsMidair BaseAttack.Anticipating BaseAttack.Active BaseAttack.Recovering BaseAttack.Playing BaseAttack.CanPlay(BaseAttack.Command) BaseAttack.DoPlay(BaseAttack.Command) BaseAttack.DoStop() PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.Awake() CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SpawnAttack : BaseAttack, IPlayableBehaviour Fields attackFlow Declaration public SpawnAttack.AttackFlow attackFlow Field Value Type Description SpawnAttack.AttackFlow enemyPrefab Declaration public GameObject enemyPrefab Field Value Type Description GameObject maxEnemyCount Declaration public int maxEnemyCount Field Value Type Description Int32 spawnPoints Declaration public Vector3[] spawnPoints Field Value Type Description Vector3 [] Methods ActivePhase() Declaration protected override IEnumerator ActivePhase() Returns Type Description IEnumerator Overrides BaseAttack.ActivePhase() AnticipationPhase() Declaration protected override IEnumerator AnticipationPhase() Returns Type Description IEnumerator Overrides BaseAttack.AnticipationPhase() RecoveryPhase() Declaration protected override IEnumerator RecoveryPhase() Returns Type Description IEnumerator Overrides BaseAttack.RecoveryPhase() Implements IPlayableBehaviour"
  },
  "api/Global.SpinningSwordsAttack.AttackFlow.html": {
    "href": "api/Global.SpinningSwordsAttack.AttackFlow.html",
    "title": "Class SpinningSwordsAttack.AttackFlow | Heroes of the Shrine",
    "keywords": "Class SpinningSwordsAttack.AttackFlow Inheritance Object SpinningSwordsAttack.AttackFlow Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AttackFlow Fields activeDuration Declaration public float activeDuration Field Value Type Description Single anticipationDuration Declaration public float anticipationDuration Field Value Type Description Single detector1Duration Declaration public float detector1Duration Field Value Type Description Single detector1StartTime Declaration public float detector1StartTime Field Value Type Description Single detector2Duration Declaration public float detector2Duration Field Value Type Description Single detector2StartTime Declaration public float detector2StartTime Field Value Type Description Single recoveryDuration Declaration public float recoveryDuration Field Value Type Description Single"
  },
  "api/Global.SpinningSwordsAttack.html": {
    "href": "api/Global.SpinningSwordsAttack.html",
    "title": "Class SpinningSwordsAttack | Heroes of the Shrine",
    "keywords": "Class SpinningSwordsAttack Attack that has two hitboxes, each one has different timing inside the active phase Inheritance Object BaseComponent CharacterBehaviour PlayableBehaviour < BaseAttack.Command > BaseAttack SpinningSwordsAttack Implements IPlayableBehaviour Inherited Members BaseAttack.attackEvents BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.Motion BaseAttack.IsMidair BaseAttack.Anticipating BaseAttack.Active BaseAttack.Recovering BaseAttack.Playing BaseAttack.CanPlay(BaseAttack.Command) BaseAttack.DoPlay(BaseAttack.Command) BaseAttack.DoStop() PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.Awake() CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SpinningSwordsAttack : BaseAttack, IPlayableBehaviour Fields attackFlow Declaration public SpinningSwordsAttack.AttackFlow attackFlow Field Value Type Description SpinningSwordsAttack.AttackFlow hitDetector1 Declaration public BaseHitDetector hitDetector1 Field Value Type Description BaseHitDetector hitDetector2 Declaration public BaseHitDetector hitDetector2 Field Value Type Description BaseHitDetector hitExecutor Declaration public ChainHitExecutor hitExecutor Field Value Type Description ChainHitExecutor Methods ActivePhase() Declaration protected override IEnumerator ActivePhase() Returns Type Description IEnumerator Overrides BaseAttack.ActivePhase() AnticipationPhase() Declaration protected override IEnumerator AnticipationPhase() Returns Type Description IEnumerator Overrides BaseAttack.AnticipationPhase() RecoveryPhase() Declaration protected override IEnumerator RecoveryPhase() Returns Type Description IEnumerator Overrides BaseAttack.RecoveryPhase() Implements IPlayableBehaviour"
  },
  "api/Global.StabAttack.html": {
    "href": "api/Global.StabAttack.html",
    "title": "Class StabAttack | Heroes of the Shrine",
    "keywords": "Class StabAttack Inheritance Object BaseComponent CharacterBehaviour PlayableBehaviour < BaseAttack.Command > BaseAttack SimpleAttack NormalAttack StabAttack Implements IPlayableBehaviour Inherited Members SimpleAttack.attackFlow SimpleAttack.hitDetector SimpleAttack.hitExecutor SimpleAttack.AnticipationPhase() SimpleAttack.ActivePhase() SimpleAttack.RecoveryPhase() BaseAttack.attackEvents BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.Motion BaseAttack.IsMidair BaseAttack.Anticipating BaseAttack.Active BaseAttack.Recovering BaseAttack.Playing BaseAttack.CanPlay(BaseAttack.Command) BaseAttack.DoPlay(BaseAttack.Command) BaseAttack.DoStop() PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.Awake() CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class StabAttack : NormalAttack, IPlayableBehaviour Implements IPlayableBehaviour"
  },
  "api/Global.StopEncountersAction.html": {
    "href": "api/Global.StopEncountersAction.html",
    "title": "Class StopEncountersAction | Heroes of the Shrine",
    "keywords": "Class StopEncountersAction Inheritance Object BaseComponent StopEncountersAction Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class StopEncountersAction : BaseComponent Methods Invoke() Declaration public void Invoke()"
  },
  "api/Global.StunBehaviour.Command.html": {
    "href": "api/Global.StunBehaviour.Command.html",
    "title": "Class StunBehaviour.Command | Heroes of the Shrine",
    "keywords": "Class StunBehaviour.Command Inheritance Object StunBehaviour.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command Constructors Command(Single) Declaration public Command(float time) Parameters Type Name Description Single time Fields time Declaration public readonly float time Field Value Type Description Single"
  },
  "api/Global.StunBehaviour.html": {
    "href": "api/Global.StunBehaviour.html",
    "title": "Class StunBehaviour | Heroes of the Shrine",
    "keywords": "Class StunBehaviour Inheritance Object BaseComponent CharacterBehaviour PlayableBehaviour < StunBehaviour.Command > ForcedBehaviour < StunBehaviour.Command > StunBehaviour Implements IForcedBehaviour IPlayableBehaviour Inherited Members PlayableBehaviour<StunBehaviour.Command>.PlayEvents PlayableBehaviour<StunBehaviour.Command>.CanPlay(StunBehaviour.Command) PlayableBehaviour<StunBehaviour.Command>.Play(StunBehaviour.Command) PlayableBehaviour<StunBehaviour.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.Awake() CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class StunBehaviour : ForcedBehaviour<StunBehaviour.Command>, IForcedBehaviour, IPlayableBehaviour Fields stunFrames Declaration public int stunFrames Field Value Type Description Int32 Properties Playing Declaration public override bool Playing { get; } Property Value Type Description Boolean Overrides PlayableBehaviour<StunBehaviour.Command>.Playing Stun Declaration public bool Stun { get; } Property Value Type Description Boolean StunFrame Declaration public int StunFrame { get; } Property Value Type Description Int32 Methods DoPlay(StunBehaviour.Command) Declaration protected override void DoPlay(StunBehaviour.Command command) Parameters Type Name Description StunBehaviour.Command command Overrides PlayableBehaviour<StunBehaviour.Command>.DoPlay(StunBehaviour.Command) DoStop() Declaration protected override void DoStop() Overrides PlayableBehaviour<StunBehaviour.Command>.DoStop() Implements IForcedBehaviour IPlayableBehaviour"
  },
  "api/Global.StunBrainModule.html": {
    "href": "api/Global.StunBrainModule.html",
    "title": "Class StunBrainModule | Heroes of the Shrine",
    "keywords": "Class StunBrainModule State machine parameters related to StunBehaviour Inheritance Object BaseComponent CharacterBehaviour BrainModule StunBrainModule Inherited Members BrainModule.StateMachine BrainModule.Awake() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class StunBrainModule : BrainModule Methods GetParameters() Declaration public override string[] GetParameters() Returns Type Description String [] Overrides BrainModule.GetParameters()"
  },
  "api/Global.StunHitExecutor.html": {
    "href": "api/Global.StunHitExecutor.html",
    "title": "Class StunHitExecutor | Heroes of the Shrine",
    "keywords": "Class StunHitExecutor Hit executor that stuns an hittable Inheritance Object StunHitExecutor Implements IHitExecutor Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class StunHitExecutor : IHitExecutor Fields stunTime Declaration public float stunTime Field Value Type Description Single Duration of stun effect caused by hit Methods Execute(BaseAttack, IHittable) Declaration public void Execute(BaseAttack attack, IHittable hittable) Parameters Type Name Description BaseAttack attack IHittable hittable Implements IHitExecutor"
  },
  "api/Global.SuperArmor.Command.html": {
    "href": "api/Global.SuperArmor.Command.html",
    "title": "Class SuperArmor.Command | Heroes of the Shrine",
    "keywords": "Class SuperArmor.Command Inheritance Object SuperArmor.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command"
  },
  "api/Global.SuperArmor.html": {
    "href": "api/Global.SuperArmor.html",
    "title": "Class SuperArmor | Heroes of the Shrine",
    "keywords": "Class SuperArmor Inheritance Object BaseComponent CharacterBehaviour PlayableBehaviour < SuperArmor.Command > SuperArmor Implements IPlayableBehaviour Inherited Members PlayableBehaviour<SuperArmor.Command>.PlayEvents PlayableBehaviour<SuperArmor.Command>.CanPlay(SuperArmor.Command) PlayableBehaviour<SuperArmor.Command>.Play(SuperArmor.Command) PlayableBehaviour<SuperArmor.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.Awake() CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SuperArmor : PlayableBehaviour<SuperArmor.Command>, IPlayableBehaviour Fields armorCooldown Declaration public float armorCooldown Field Value Type Description Single armorCooldownStart Declaration public float armorCooldownStart Field Value Type Description Single armorHealth Declaration public float armorHealth Field Value Type Description Single damageMultiplier Declaration public float damageMultiplier Field Value Type Description Single onBreak Declaration public ExtEvent onBreak Field Value Type Description ExtEvent onHit Declaration public ExtEvent onHit Field Value Type Description ExtEvent Properties Playing Declaration public override bool Playing { get; } Property Value Type Description Boolean Overrides PlayableBehaviour<SuperArmor.Command>.Playing Methods DoPlay(SuperArmor.Command) Declaration protected override void DoPlay(SuperArmor.Command command) Parameters Type Name Description SuperArmor.Command command Overrides PlayableBehaviour<SuperArmor.Command>.DoPlay(SuperArmor.Command) DoStop() Declaration protected override void DoStop() Overrides PlayableBehaviour<SuperArmor.Command>.DoStop() GetProgress() Declaration public float GetProgress() Returns Type Description Single HitArmor(Single) Declaration public void HitArmor(float damage) Parameters Type Name Description Single damage Implements IPlayableBehaviour"
  },
  "api/Global.SuperArmorBar.html": {
    "href": "api/Global.SuperArmorBar.html",
    "title": "Class SuperArmorBar | Heroes of the Shrine",
    "keywords": "Class SuperArmorBar Inheritance Object BaseComponent SuperArmorBar Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SuperArmorBar : BaseComponent Fields superArmor Declaration public SuperArmor superArmor Field Value Type Description SuperArmor Methods Update() Declaration protected override void Update() Overrides BaseComponent.Update()"
  },
  "api/Global.SuperArmorBrainModule.html": {
    "href": "api/Global.SuperArmorBrainModule.html",
    "title": "Class SuperArmorBrainModule | Heroes of the Shrine",
    "keywords": "Class SuperArmorBrainModule State machine parameters related to SuperArmorBrainModule.superArmor Inheritance Object BaseComponent CharacterBehaviour BrainModule SuperArmorBrainModule Inherited Members BrainModule.StateMachine CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SuperArmorBrainModule : BrainModule Methods Awake() Declaration protected override void Awake() Overrides BrainModule.Awake() GetParameters() Declaration public override string[] GetParameters() Returns Type Description String [] Overrides BrainModule.GetParameters()"
  },
  "api/Global.SuperArmorHittableHitbox.html": {
    "href": "api/Global.SuperArmorHittableHitbox.html",
    "title": "Class SuperArmorHittableHitbox | Heroes of the Shrine",
    "keywords": "Class SuperArmorHittableHitbox HittableHitbox that cannot receive knockback or stun, and proxies hits to SuperArmorHittableHitbox.superArmor Inheritance Object BaseComponent HittableHitbox SuperArmorHittableHitbox Implements IHittable Inherited Members HittableHitbox.hittableBehaviour HittableHitbox.onHit HittableHitbox.figure HittableHitbox.blinkMaterial HittableHitbox.blinkTime HittableHitbox.Hitbox HittableHitbox.Character HittableHitbox.Blink() HittableHitbox.CanGetHit() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SuperArmorHittableHitbox : HittableHitbox, IHittable Methods Awake() Declaration protected override void Awake() Overrides HittableHitbox.Awake() Hit(Single) Declaration public override void Hit(float damage) Parameters Type Name Description Single damage Overrides HittableHitbox.Hit(Single) Knockback(Single, Single, Single) Declaration public override void Knockback(float power, float angleDegrees, float stunTime) Parameters Type Name Description Single power Single angleDegrees Single stunTime Overrides HittableHitbox.Knockback(Single, Single, Single) Stun(Single) Declaration public override void Stun(float time) Parameters Type Name Description Single time Overrides HittableHitbox.Stun(Single) Implements IHittable"
  },
  "api/Global.Tag.html": {
    "href": "api/Global.Tag.html",
    "title": "Enum Tag | Heroes of the Shrine",
    "keywords": "Enum Tag Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum Tag Fields Name Description Barrier Boss Enemy Goblin Player Prop Zombie"
  },
  "api/Global.Tags.html": {
    "href": "api/Global.Tags.html",
    "title": "Class Tags | Heroes of the Shrine",
    "keywords": "Class Tags Inheritance Object Tags Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Tags : IReadOnlyCollection<Tag> Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Contains(Tag) Declaration public bool Contains(Tag tag) Parameters Type Name Description Tag tag Returns Type Description Boolean GetEnumerator() Declaration public IEnumerator<Tag> GetEnumerator() Returns Type Description IEnumerator < Tag >"
  },
  "api/Global.TagsDrawer.html": {
    "href": "api/Global.TagsDrawer.html",
    "title": "Class TagsDrawer | Heroes of the Shrine",
    "keywords": "Class TagsDrawer Inheritance Object TagsDrawer Namespace : Global Assembly : cs.temp.dll.dll Syntax public class TagsDrawer : PropertyDrawer Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Global.TextLink.html": {
    "href": "api/Global.TextLink.html",
    "title": "Class TextLink | Heroes of the Shrine",
    "keywords": "Class TextLink Inheritance Object BaseComponent TextLink Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class TextLink : BaseComponent Fields url Declaration public string url Field Value Type Description String Methods JumpToLink() Declaration public void JumpToLink()"
  },
  "api/Global.Transition.html": {
    "href": "api/Global.Transition.html",
    "title": "Class Transition | Heroes of the Shrine",
    "keywords": "Class Transition Inheritance Object Transition Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Transition Fields finalColor Declaration public Color finalColor Field Value Type Description Color graphic Declaration public MaskableGraphic graphic Field Value Type Description MaskableGraphic startColor Declaration public Color startColor Field Value Type Description Color transitionDuration Declaration public float transitionDuration Field Value Type Description Single"
  },
  "api/Global.TransitionAction.html": {
    "href": "api/Global.TransitionAction.html",
    "title": "Class TransitionAction | Heroes of the Shrine",
    "keywords": "Class TransitionAction Inheritance Object BaseComponent TransitionAction Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class TransitionAction : BaseComponent Fields sceneName Declaration public string sceneName Field Value Type Description String Methods Invoke() Declaration public void Invoke()"
  },
  "api/Global.Uppercut.html": {
    "href": "api/Global.Uppercut.html",
    "title": "Class Uppercut | Heroes of the Shrine",
    "keywords": "Class Uppercut Inheritance Object BaseComponent CharacterBehaviour PlayableBehaviour < BaseAttack.Command > BaseAttack SimpleAttack NormalAttack Uppercut Implements IPlayableBehaviour Inherited Members SimpleAttack.attackFlow SimpleAttack.hitDetector SimpleAttack.hitExecutor SimpleAttack.AnticipationPhase() SimpleAttack.ActivePhase() SimpleAttack.RecoveryPhase() BaseAttack.attackEvents BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.Motion BaseAttack.IsMidair BaseAttack.Anticipating BaseAttack.Active BaseAttack.Recovering BaseAttack.Playing BaseAttack.CanPlay(BaseAttack.Command) BaseAttack.DoPlay(BaseAttack.Command) BaseAttack.DoStop() PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.Awake() CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Uppercut : NormalAttack, IPlayableBehaviour Implements IPlayableBehaviour"
  },
  "api/Global.WalkableGrid.html": {
    "href": "api/Global.WalkableGrid.html",
    "title": "Class WalkableGrid | Heroes of the Shrine",
    "keywords": "Class WalkableGrid Inheritance Object BaseComponent WalkableGrid Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class WalkableGrid : BaseComponent Fields entity Declaration public GameEntity entity Field Value Type Description GameEntity gridWorldSize Declaration public Vector3 gridWorldSize Field Value Type Description Vector3 nodeRadius Declaration public float nodeRadius Field Value Type Description Single Methods ClosestWalkableNode(Vector3, Node[]) Declaration public Node ClosestWalkableNode(Vector3 worldPosition, Node[] excluded = null) Parameters Type Name Description Vector3 worldPosition Node [] excluded Returns Type Description Node GetCircle(Vector3, Single) Declaration public IEnumerable<Node> GetCircle(Vector3 center, float radius) Parameters Type Name Description Vector3 center Single radius Returns Type Description IEnumerable < Node > IsInside(Vector3) Declaration public bool IsInside(Vector3 point) Parameters Type Name Description Vector3 point Returns Type Description Boolean IsWalkable(Node, Node[]) Declaration public static bool IsWalkable(Node node, Node[] excluded = null) Parameters Type Name Description Node node Node [] excluded Returns Type Description Boolean LineOfSight(Node, Node, Node[]) Declaration public bool LineOfSight(Node a, Node b, Node[] excluded = null) Parameters Type Name Description Node a Node b Node [] excluded Returns Type Description Boolean NodeFromWorldPoint(Vector3) Declaration public Node NodeFromWorldPoint(Vector3 worldPosition) Parameters Type Name Description Vector3 worldPosition Returns Type Description Node WalkableNeighbors(Node, Node[]) Declaration public List<Node> WalkableNeighbors(Node node, Node[] excluded = null) Parameters Type Name Description Node node Node [] excluded Returns Type Description List < Node >"
  },
  "api/Global.WalkBehaviour.Command.html": {
    "href": "api/Global.WalkBehaviour.Command.html",
    "title": "Class WalkBehaviour.Command | Heroes of the Shrine",
    "keywords": "Class WalkBehaviour.Command Inheritance Object WalkBehaviour.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command Constructors Command(Vector2, Boolean) Declaration public Command(Vector2 direction, bool fitLookDirection = true) Parameters Type Name Description Vector2 direction Boolean fitLookDirection Command(Vector3, Boolean) Declaration public Command(Vector3 direction, bool fitLookDirection = true) Parameters Type Name Description Vector3 direction Boolean fitLookDirection Fields direction Declaration public readonly Vector2 direction Field Value Type Description Vector2 fitLookDirection Declaration public readonly bool fitLookDirection Field Value Type Description Boolean"
  },
  "api/Global.WalkBehaviour.html": {
    "href": "api/Global.WalkBehaviour.html",
    "title": "Class WalkBehaviour | Heroes of the Shrine",
    "keywords": "Class WalkBehaviour Inheritance Object BaseComponent CharacterBehaviour PlayableBehaviour < WalkBehaviour.Command > BaseMovementBehaviour < WalkBehaviour.Command > WalkBehaviour Implements IMovementBehaviour IPlayableBehaviour Inherited Members BaseMovementBehaviour<WalkBehaviour.Command>.cooldown PlayableBehaviour<WalkBehaviour.Command>.PlayEvents PlayableBehaviour<WalkBehaviour.Command>.Play(WalkBehaviour.Command) PlayableBehaviour<WalkBehaviour.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Enabled CharacterBehaviour.EnableBehaviours(Type[]) CharacterBehaviour.DisableBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class WalkBehaviour : BaseMovementBehaviour<WalkBehaviour.Command>, IMovementBehaviour, IPlayableBehaviour Fields defaultSpeed Declaration public float defaultSpeed Field Value Type Description Single speed Declaration public float speed Field Value Type Description Single Properties Playing Declaration public override bool Playing { get; } Property Value Type Description Boolean Overrides PlayableBehaviour<WalkBehaviour.Command>.Playing Walk Declaration public bool Walk { get; } Property Value Type Description Boolean Methods Awake() Declaration protected override void Awake() Overrides BaseMovementBehaviour<WalkBehaviour.Command>.Awake() CanPlay(WalkBehaviour.Command) Declaration public override bool CanPlay(WalkBehaviour.Command command) Parameters Type Name Description WalkBehaviour.Command command Returns Type Description Boolean Overrides BaseMovementBehaviour<WalkBehaviour.Command>.CanPlay(WalkBehaviour.Command) DoPlay(WalkBehaviour.Command) Declaration protected override void DoPlay(WalkBehaviour.Command command) Parameters Type Name Description WalkBehaviour.Command command Overrides PlayableBehaviour<WalkBehaviour.Command>.DoPlay(WalkBehaviour.Command) DoStop() Declaration protected override void DoStop() Overrides PlayableBehaviour<WalkBehaviour.Command>.DoStop() Implements IMovementBehaviour IPlayableBehaviour"
  },
  "api/Global.WalkSoundEffect.html": {
    "href": "api/Global.WalkSoundEffect.html",
    "title": "Class WalkSoundEffect | Heroes of the Shrine",
    "keywords": "Class WalkSoundEffect Inheritance Object BaseComponent WalkSoundEffect Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class WalkSoundEffect : BaseComponent Fields walkAudioSource Declaration public AudioSource walkAudioSource Field Value Type Description AudioSource"
  },
  "api/Global.WaveAnnouncer.html": {
    "href": "api/Global.WaveAnnouncer.html",
    "title": "Class WaveAnnouncer | Heroes of the Shrine",
    "keywords": "Class WaveAnnouncer Inheritance Object BaseComponent WaveAnnouncer Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class WaveAnnouncer : BaseComponent Fields duration Declaration public float duration Field Value Type Description Single text Declaration public TMP_Text text Field Value Type Description TMP_Text Methods Activate(Int32) Declaration public void Activate(int waveIndex) Parameters Type Name Description Int32 waveIndex"
  },
  "index.html": {
    "href": "index.html",
    "title": "Heroes of the Shrine | Heroes of the Shrine",
    "keywords": "Heroes of the Shrine"
  },
  "manual/add-encounters.html": {
    "href": "manual/add-encounters.html",
    "title": "Add Encounters | Heroes of the Shrine",
    "keywords": "Add Encounters Enemies in the game are often spawned in a form of an encounter. The encounter is divided to waves, and when one wave finishes, the next will invoke. Camera Behaviour While in encounter, the camera border is restricted between two X coordinated. The camera will follow the player between these positions, but it will not exceed. When the encounter is over, the camera border will return back to normal. If an encounter starts and the camera is not yet inside the restricted border, it will follow the player into the border. While the encounter is active, the player cannot exceed the camera border. However, enemies can exceed the border, to prevent them from being trapped between the player and border. Add an Encounter Create an empty game object, and give it an indicative name. Add a trigger for the encounter. More info in Adding Triggrs . Instead, you can also attach the encounter to an existing UnityEvent , such as Post Cutscene Event . Add the Encounter Action component, located in Assets/Scripts/Level/Actions . From the trigger, attach the method Invoke of the new Encounter Action. Customization Wave announcer Wave announcer is a prefab of a UI object that will be activated once a wave starts. The prefab must have the component Wave Announcer . The component accepts a property Text , which is a reference to a TextMeshPro component. It's used to display the announcement: \"Wave X begins!\". Wave definitions Wave definitions is a list where each element defines a wave in the encounter, and each wave is a list of enemy definitions. Each instance of an enemy has to be defined separately. The defined enemies are spawned when the wave starts, and the player has to eliminate them to finish the wave. Each enemy definiton has the following properties: prefab : Enemy to spawn. Direction : Side of the camera border from which the enemy walks into the encounter ( Left or Right ). Z : Z coordinate from in which the enemy spawns. Part of wave : If true, the enemy has to be eliminated in order to finish the wave. First wave pre spawned enemies List of enemy objects from the scene (not prefabs). The player has to eliminate them to finish the first wave, in addition to the enemies spawned in that wave (if any). Time to alarm Delay (in seconds) before enemies start attacking the player. This property affects all the enemies defined in Wave definitions (regardless of whether they are Part of wave ), and also enemies defined in First wave pre spawned enemies . When the delay finishes, it will activate a trigger animator parameter called Alarm . Camera border Border of the camera during the encounter. More info in Camera Behaviour section. Spawn source distance Specifies the distance outside the camera border where enemies are spawned. Enemies should enter the camera border by themselves. Post encounter event UnityEvent to invoke when the encounter is over. Pick an object or drag one in, and select any of its methods to invoke."
  },
  "manual/add-triggers.html": {
    "href": "manual/add-triggers.html",
    "title": "Add Triggers | Heroes of the Shrine",
    "keywords": "Add Triggers Triggers are components that invoke a UnityEvent based on a defined condition in the level. Once a trigger fires, it cannot fire again. Use triggers to check conditions that depend on the scene state in that certain point of time. Triggers never depend on other triggers, and should not be used to react to another action. For example, \"Encounter is over\" is not a trigger, but simply a UnityEvent in Encounter Action . Add a trigger Create an empty game object, and give it an indicative name. Attach the trigger component that you want, located in Scripts/Level/Triggers . Define the properties required by the trigger you have chosen. Attach an action by clicking '+'. First, select the game object on which the action occurs. Using the dropdown in the right, select the function that will be invoked by the trigger, in one of the components. Note The action can even be a function on the same object. For example, you can create an object with a line trigger that invokes an encounter action , both on the same game object. Available Triggers Line Trigger : fires when the player position in the X axis, is greater than the specified Minimum X . When editing, a purple line Gizmo is drawn, representing Minimum X . Rect Trigger : fires when the player enters a rectangle on the ground. When editing, a purple rectangle Gizmo is drawn, representing the rectangle's position and size . Even though position and size are Vector3 , the Y value is ignored. Death Trigger : fires when the player dies. If the player dies while being in knockback, it will fire once they land. Warning The player object might not be destroyed when the trigger fires, because Die Behaviour may define a death animation , which starts after the trigger is fired."
  },
  "manual/create-cutscenes.html": {
    "href": "manual/create-cutscenes.html",
    "title": "Creating Cutscenes | Heroes of the Shrine",
    "keywords": "Creating Cutscenes Use cutscenes in the game to override normal game behaviour. Cutscenes block player input, and disable enemies' state machines. Wikipedia defines cutscenes as such: A cutscene is a sequence in a video game that is not interactive, interrupting the gameplay. Such scenes are used to show conversations between characters, set the mood, reward the player, introduce newer models and gameplay elements, show the effects of a player's actions, create emotional connections, improve pacing or foreshadow future events. Cutscenes are represented by a Unity Timeline . Timelines can contain multiple tracks, that modify properties of scene objects over time. They can be used to create animations, move objects around, and even call functions on components! Cutscenes should be constant, meaning object positions will never be relative to the positions before the cutscene. To overcome this issue, Cutscene Action will move characters from their previous position, to a specified initial position. Important Before the cutscene starts, make sure there are no spawned enemies in the scene. Spawned enemies cannot have a move definition . Their state machine will be disabled once the cutscene starts, and it might look weird. Create a Cutscene Create an empty game object, and give it an indicative name. Add a trigger for the cutscene. More info in Adding Triggrs . Instead, you can also attach the cutscene to an existing UnityEvent , such as Post Encounter Event . Add the Cutscene Action component, located in Assets/Scripts/Level/Actions . From the trigger, attach the method Invoke of the new Cutscene Action. Create a new folder in Assets/Timelines . Give it an indicative name that describes the cutscene. Inside the folder, create a timeline asset, and give it the same name as the folder. In the same object, attach a Playable Director component. Change the Playable to the timeline you have created, and make sure that Play On Awake is unchecked (unless this cutscene should play on level start). Drag the Playable Director to the director property of the Cutscene Action . In the hierarchy, select the cutscene object you added. Open the Timeline window where you can edit tracks, and start adding tracks (by clicking '+') to build the cutscene! Customization Move Definitions Define where characters from the scene should move before the encounter starts. Note The Target must have a Forced Walk Behaviour component attached. Director Playable Director component that contains the timeline to play. Post Cutscene Event UnityEvent to invoke when the cutscene is over. Pick an object or drag one in, and select any of its methods to invoke. Useful Tracks Animation Track Animation Track is used to animate objects, as well as change their properties over time (e.g. move them around). Each animation track is related to a single object in the scene. To animate an object in the timeline, it must have an Animator component, even if it doesn't have an animator controller (animations state machine). Each track can modify multiple properties, but it is recommended to split an animation to multiple tracks where it fits. To create a new Animation Track , follow these steps (if the track is based on an existing clip, skip step 1): Go to your timeline folder in Assets/Timelines . Create a new animation clip and give it an indicative name. Select the game object that contains the timeline, click the '+' icon in the timeline window, and select \"Animation Track\". Drag the object you want to animate from the scene. If the object doesn't already have an Animator , make one and then drag it to the track. Right click the new track, and select \"Add From Animation Clip\". There, select the clip you created in step 1 (or a clip you already have). Double click in the track area to open the animation clip. Start adding keyframes that change properties over time. Warning Unfortunately, editing properties of a movable object does not reflect in the scene while editing them. Note By default, the interpolation of a float value between two keyframes, is not linear and has a certain smooth curve: In order to change it to linear, from the animation window click the \"Curves\" button in the bottom. Select all keyframes (Ctrl+A), right click on one of them and select \"Both Tangents\" -> \"Linear\". The curve should become linear. Click the \"Dropsheet\" button in the bottom to see the normal animation window again. If you select the clip (grey rectangle in the track), you will see the following in the inspector: Using these properties, you can set a Speed Multiplier for the clip, and change the extrapolation between clips. Activation Track Activation Track is used to change activate and deactivate objects. Deactivated objects do not appear in the game, and cannot affect the game in any way. To create a new Activation Track , follow these steps: Select the game object that contains the timeline, click the '+' icon in the timeline window, and select \"Activation Track\". Drag the object you want to modify from the scene. The rectangle in the timeline specifies when the object is active inside the cutscene. Signal Track Signal Track is used to call a functions on a component of any object in the scene. They use the familiar UnityEvent API. To create a new Signal Track , follow these steps: Select the game object that contains the timeline, and add the component Signal Receiver , if it wasn't already attached. Click the \"Add Reaction\" icon inside the component to add a new signal reaction. Inside the dropdown, select an existing Signal or create a new one. Store them inside Assets/Timelines/Signals , and give the signal an indicative name. Click the '+' icon inside the reaction. Attach a UnityEvent that will be invoked when the selected signal is emitted. First, select the game object that has the function. Using the dropdown in the right, select the function that will be invoked by the trigger, in one of the components. Select the game object that contains the timeline, click the '+' icon in the timeline window, and select \"Signal Track\". Drag the game object that contains the timeline to the empty field. Right click inside the track area, and select \"Add Signal Emitter\". From the inspector, change the Emit Signal to the signal you used in the Signal Receiver component."
  },
  "manual/create-scenes.html": {
    "href": "manual/create-scenes.html",
    "title": "Creating Scenes | Heroes of the Shrine",
    "keywords": "Creating Scenes Heroes of the Shrine is divided into scenes. The Unity manual states: Scenes are where you work with content in Unity. They are assets that contain all or part of a game or application. For example, you might build a simple game in a single scene, while for a more complex game, you might use one scene per level, each with its own environments, characters, obstacles, decorations, and UI . You can create any number of scenes in a project. Each level can rely on multiple scenes, each representing a different part in the level. Scene transitions are costy in terms of client resources, thus they shouldn't occur very often. However, and even more important, is to use scenes where it fits. Scene Structure In our game, each scenes should have a Scene Root game object. Scene Root is a prefab, located in Assets/Prefabs , and it contains essential global objects and scripts (and even the player itself). Scenes will also contain enemies, UI, and level definitions (encounters, transitions, cutscenes, etc.) Note All UI elements must live under the Canvas object in the Scene Root . Create a Scene To add a new scene follow these steps: Create a scene asset in Assets/Scenes . Give it an indicative name, such as Level3Forest . Get inside your new scene, by double clicking the asset. Delete the Main Camera object that is included in the scene template. The Scene Root you are about to add, has a camera that already conatins all needed scripts. Add Scene Root to the scene, by dragging it from Assets/Prefabs/Scene Root . Add scene background using normal 2D sprites. Set the walkable grid position and size . Set world border in the camera's Camera Movement component. Set the camera's initial position using its transform . Note The initial offset between camera position to the player position is kept through the scene. If you want to change the camera zoom, go to the component Pixel Perfect Camera . Click \"Run In Edit Mode\", and play with the value of Assets Pixels Per Unit . Add the entrance cutscene inside Player Entrance object. Refer to the cutscenes manual , and skip steps 1-4 because they have already been done in Scene Root . Also, in step 7, the Playable Director already exists. You only need to attach the timeline from step 6 to it. Warning The player position should always stay inside the walkable grid . To achieve that, set the player's position (in Movable Object ) to be inside the walkable grid . Also, if you animate the position inside the timeline, make sure it is always inside the grid, even in the first frame. In Player Death , set the Objects To Destroy . The list should have the HUD (by default), and the foreground sprite of the level (you have to select it manually). Add the enemies, encounters, hazards and cutscenes - everything that makes this scene unique. Save your changes! Warning Ctrl+S is usually sufficient for saving, but sometimes it might skip some parts. In order to make sure you saved everything, right click the scene object in the hierarchy, and click \"Save Scene\"."
  }
}