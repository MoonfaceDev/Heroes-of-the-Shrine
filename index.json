{
  "api/Borodar.RainbowFolders.Editor.AssetInfo.html": {
    "href": "api/Borodar.RainbowFolders.Editor.AssetInfo.html",
    "title": "Class AssetInfo | Heroes of the Shrine",
    "keywords": "Class AssetInfo Inheritance Object AssetInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Borodar.RainbowFolders.Editor Assembly : cs.temp.dll.dll Syntax public class AssetInfo Fields NAME Declaration public const string NAME = \"Rainbow Folders\" Field Value Type Description String STORE_ID Declaration public const string STORE_ID = \"50668\" Field Value Type Description String VERSION Declaration public const string VERSION = \"0.5.0\" Field Value Type Description String"
  },
  "api/Borodar.RainbowFolders.Editor.DraggablePopupWindow.html": {
    "href": "api/Borodar.RainbowFolders.Editor.DraggablePopupWindow.html",
    "title": "Class DraggablePopupWindow | Heroes of the Shrine",
    "keywords": "Class DraggablePopupWindow Inheritance Object DraggablePopupWindow RainbowFoldersPopup RainbowFoldersWelcome Namespace : Borodar.RainbowFolders.Editor Assembly : cs.temp.dll.dll Syntax public abstract class DraggablePopupWindow : EditorWindow Methods GetDraggableWindow<T>() Returns the first DraggablePopupWindow of type T which is currently on the screen. If there is none, creates and shows new window and returns the instance of it. Declaration public static T GetDraggableWindow<T>() where T : DraggablePopupWindow Returns Type Description T Type Parameters Name Description T OnGUI() Callback for drawing GUI controls for the popup window. Declaration public virtual void OnGUI() Show<T>(Rect, Boolean) Show draggable editor window with popup-style framing. Declaration public void Show<T>(Rect position, bool focus = true) where T : DraggablePopupWindow Parameters Type Name Description Rect position Boolean focus Type Parameters Name Description T"
  },
  "api/Borodar.RainbowFolders.Editor.FolderColor.html": {
    "href": "api/Borodar.RainbowFolders.Editor.FolderColor.html",
    "title": "Class FolderColor | Heroes of the Shrine",
    "keywords": "Class FolderColor Inheritance Object FolderColor Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Borodar.RainbowFolders.Editor Assembly : cs.temp.dll.dll Syntax public class FolderColor Fields Color Declaration public FolderColorName Color Field Value Type Description FolderColorName LargeIcon Declaration public Texture2D LargeIcon Field Value Type Description Texture2D SmallIcon Declaration public Texture2D SmallIcon Field Value Type Description Texture2D"
  },
  "api/Borodar.RainbowFolders.Editor.FolderColorName.html": {
    "href": "api/Borodar.RainbowFolders.Editor.FolderColorName.html",
    "title": "Enum FolderColorName | Heroes of the Shrine",
    "keywords": "Enum FolderColorName Namespace : Borodar.RainbowFolders.Editor Assembly : cs.temp.dll.dll Syntax public enum FolderColorName Fields Name Description Blue BondiBlue Green Indigo Lime Magenta Orange Red Vermilion Violet Yellow YellowOrange"
  },
  "api/Borodar.RainbowFolders.Editor.FolderColorsStorage.html": {
    "href": "api/Borodar.RainbowFolders.Editor.FolderColorsStorage.html",
    "title": "Class FolderColorsStorage | Heroes of the Shrine",
    "keywords": "Class FolderColorsStorage Inheritance Object FolderColorsStorage Namespace : Borodar.RainbowFolders.Editor Assembly : cs.temp.dll.dll Syntax public class FolderColorsStorage : ScriptableObject Fields ColorFolderIcons Declaration public List<FolderColor> ColorFolderIcons Field Value Type Description List < FolderColor > Properties Instance Declaration public static FolderColorsStorage Instance { get; } Property Value Type Description FolderColorsStorage Methods GetIconsByColor(FolderColorName) Declaration public FolderIconPair GetIconsByColor(FolderColorName color) Parameters Type Name Description FolderColorName color Returns Type Description FolderIconPair"
  },
  "api/Borodar.RainbowFolders.Editor.FolderColorsStorageEditor.html": {
    "href": "api/Borodar.RainbowFolders.Editor.FolderColorsStorageEditor.html",
    "title": "Class FolderColorsStorageEditor | Heroes of the Shrine",
    "keywords": "Class FolderColorsStorageEditor Inheritance Object FolderColorsStorageEditor Namespace : Borodar.RainbowFolders.Editor Assembly : cs.temp.dll.dll Syntax public class FolderColorsStorageEditor : UnityEditor.Editor Methods OnEnable() Declaration protected void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Borodar.RainbowFolders.Editor.FolderIconPair.html": {
    "href": "api/Borodar.RainbowFolders.Editor.FolderIconPair.html",
    "title": "Class FolderIconPair | Heroes of the Shrine",
    "keywords": "Class FolderIconPair Represents as pair of icons to substitute for a folder Inheritance Object FolderIconPair Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Borodar.RainbowFolders.Editor Assembly : cs.temp.dll.dll Syntax public class FolderIconPair Fields LargeIcon Declaration public Texture2D LargeIcon Field Value Type Description Texture2D SmallIcon Declaration public Texture2D SmallIcon Field Value Type Description Texture2D"
  },
  "api/Borodar.RainbowFolders.Editor.FolderPlatform.html": {
    "href": "api/Borodar.RainbowFolders.Editor.FolderPlatform.html",
    "title": "Class FolderPlatform | Heroes of the Shrine",
    "keywords": "Class FolderPlatform Inheritance Object FolderPlatform Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Borodar.RainbowFolders.Editor Assembly : cs.temp.dll.dll Syntax public class FolderPlatform Fields LargeIcon Declaration public Texture2D LargeIcon Field Value Type Description Texture2D Platform Declaration public FolderPlatformName Platform Field Value Type Description FolderPlatformName SmallIcon Declaration public Texture2D SmallIcon Field Value Type Description Texture2D"
  },
  "api/Borodar.RainbowFolders.Editor.FolderPlatformDrawer.html": {
    "href": "api/Borodar.RainbowFolders.Editor.FolderPlatformDrawer.html",
    "title": "Class FolderPlatformDrawer | Heroes of the Shrine",
    "keywords": "Class FolderPlatformDrawer Inheritance Object FolderPlatformDrawer Namespace : Borodar.RainbowFolders.Editor Assembly : cs.temp.dll.dll Syntax public class FolderPlatformDrawer : PropertyDrawer Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Borodar.RainbowFolders.Editor.FolderPlatformName.html": {
    "href": "api/Borodar.RainbowFolders.Editor.FolderPlatformName.html",
    "title": "Enum FolderPlatformName | Heroes of the Shrine",
    "keywords": "Enum FolderPlatformName Namespace : Borodar.RainbowFolders.Editor Assembly : cs.temp.dll.dll Syntax public enum FolderPlatformName Fields Name Description Android iOS Mac WebGL Windows"
  },
  "api/Borodar.RainbowFolders.Editor.FolderPlatformsStorage.html": {
    "href": "api/Borodar.RainbowFolders.Editor.FolderPlatformsStorage.html",
    "title": "Class FolderPlatformsStorage | Heroes of the Shrine",
    "keywords": "Class FolderPlatformsStorage Inheritance Object FolderPlatformsStorage Namespace : Borodar.RainbowFolders.Editor Assembly : cs.temp.dll.dll Syntax public class FolderPlatformsStorage : ScriptableObject Fields PlatformFolderIcons Declaration public List<FolderPlatform> PlatformFolderIcons Field Value Type Description List < FolderPlatform > Properties Instance Declaration public static FolderPlatformsStorage Instance { get; } Property Value Type Description FolderPlatformsStorage Methods GetIconsByType(FolderPlatformName) Declaration public FolderIconPair GetIconsByType(FolderPlatformName platform) Parameters Type Name Description FolderPlatformName platform Returns Type Description FolderIconPair"
  },
  "api/Borodar.RainbowFolders.Editor.FolderPlatformsStorageEditor.html": {
    "href": "api/Borodar.RainbowFolders.Editor.FolderPlatformsStorageEditor.html",
    "title": "Class FolderPlatformsStorageEditor | Heroes of the Shrine",
    "keywords": "Class FolderPlatformsStorageEditor Inheritance Object FolderPlatformsStorageEditor Namespace : Borodar.RainbowFolders.Editor Assembly : cs.temp.dll.dll Syntax public class FolderPlatformsStorageEditor : UnityEditor.Editor Methods OnEnable() Declaration protected void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Borodar.RainbowFolders.Editor.FolderTag.html": {
    "href": "api/Borodar.RainbowFolders.Editor.FolderTag.html",
    "title": "Class FolderTag | Heroes of the Shrine",
    "keywords": "Class FolderTag Inheritance Object FolderTag Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Borodar.RainbowFolders.Editor Assembly : cs.temp.dll.dll Syntax public class FolderTag Fields LargeIcon Declaration public Texture2D LargeIcon Field Value Type Description Texture2D SmallIcon Declaration public Texture2D SmallIcon Field Value Type Description Texture2D Tag Declaration public FolderTagName Tag Field Value Type Description FolderTagName"
  },
  "api/Borodar.RainbowFolders.Editor.FolderTagName.html": {
    "href": "api/Borodar.RainbowFolders.Editor.FolderTagName.html",
    "title": "Enum FolderTagName | Heroes of the Shrine",
    "keywords": "Enum FolderTagName Namespace : Borodar.RainbowFolders.Editor Assembly : cs.temp.dll.dll Syntax public enum FolderTagName Fields Name Description Blue Cyan DarkBlue Green Lime Magenta Orange Red Vermilion Violet Yellow YellowOrange"
  },
  "api/Borodar.RainbowFolders.Editor.FolderTagsStorage.html": {
    "href": "api/Borodar.RainbowFolders.Editor.FolderTagsStorage.html",
    "title": "Class FolderTagsStorage | Heroes of the Shrine",
    "keywords": "Class FolderTagsStorage Inheritance Object FolderTagsStorage Namespace : Borodar.RainbowFolders.Editor Assembly : cs.temp.dll.dll Syntax public class FolderTagsStorage : ScriptableObject Fields ColorFolderTags Declaration public List<FolderTag> ColorFolderTags Field Value Type Description List < FolderTag > Properties Instance Declaration public static FolderTagsStorage Instance { get; } Property Value Type Description FolderTagsStorage Methods GetIconsByTag(FolderTagName) Declaration public FolderIconPair GetIconsByTag(FolderTagName tag) Parameters Type Name Description FolderTagName tag Returns Type Description FolderIconPair"
  },
  "api/Borodar.RainbowFolders.Editor.FolderTagsStorageEditor.html": {
    "href": "api/Borodar.RainbowFolders.Editor.FolderTagsStorageEditor.html",
    "title": "Class FolderTagsStorageEditor | Heroes of the Shrine",
    "keywords": "Class FolderTagsStorageEditor Inheritance Object FolderTagsStorageEditor Namespace : Borodar.RainbowFolders.Editor Assembly : cs.temp.dll.dll Syntax public class FolderTagsStorageEditor : UnityEditor.Editor Methods OnEnable() Declaration protected void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Borodar.RainbowFolders.Editor.FolderType.html": {
    "href": "api/Borodar.RainbowFolders.Editor.FolderType.html",
    "title": "Class FolderType | Heroes of the Shrine",
    "keywords": "Class FolderType Inheritance Object FolderType Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Borodar.RainbowFolders.Editor Assembly : cs.temp.dll.dll Syntax public class FolderType Fields LargeIcon Declaration public Texture2D LargeIcon Field Value Type Description Texture2D SmallIcon Declaration public Texture2D SmallIcon Field Value Type Description Texture2D Type Declaration public FolderTypeName Type Field Value Type Description FolderTypeName"
  },
  "api/Borodar.RainbowFolders.Editor.FolderTypeName.html": {
    "href": "api/Borodar.RainbowFolders.Editor.FolderTypeName.html",
    "title": "Enum FolderTypeName | Heroes of the Shrine",
    "keywords": "Enum FolderTypeName Namespace : Borodar.RainbowFolders.Editor Assembly : cs.temp.dll.dll Syntax public enum FolderTypeName Fields Name Description Audio Brackets Editor Extensions Fonts Materials Meshes Plugins Prefabs Rainbow Resources Scenes Scripts Shaders Terrains Textures"
  },
  "api/Borodar.RainbowFolders.Editor.FolderTypesStorage.html": {
    "href": "api/Borodar.RainbowFolders.Editor.FolderTypesStorage.html",
    "title": "Class FolderTypesStorage | Heroes of the Shrine",
    "keywords": "Class FolderTypesStorage Inheritance Object FolderTypesStorage Namespace : Borodar.RainbowFolders.Editor Assembly : cs.temp.dll.dll Syntax public class FolderTypesStorage : ScriptableObject Fields TypeFolderIcons Declaration public List<FolderType> TypeFolderIcons Field Value Type Description List < FolderType > Properties Instance Declaration public static FolderTypesStorage Instance { get; } Property Value Type Description FolderTypesStorage Methods GetIconsByType(FolderTypeName) Declaration public FolderIconPair GetIconsByType(FolderTypeName type) Parameters Type Name Description FolderTypeName type Returns Type Description FolderIconPair"
  },
  "api/Borodar.RainbowFolders.Editor.FolderTypesStorageEditor.html": {
    "href": "api/Borodar.RainbowFolders.Editor.FolderTypesStorageEditor.html",
    "title": "Class FolderTypesStorageEditor | Heroes of the Shrine",
    "keywords": "Class FolderTypesStorageEditor Inheritance Object FolderTypesStorageEditor Namespace : Borodar.RainbowFolders.Editor Assembly : cs.temp.dll.dll Syntax public class FolderTypesStorageEditor : UnityEditor.Editor Methods OnEnable() Declaration protected void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Borodar.RainbowFolders.Editor.html": {
    "href": "api/Borodar.RainbowFolders.Editor.html",
    "title": "Namespace Borodar.RainbowFolders.Editor | Heroes of the Shrine",
    "keywords": "Namespace Borodar.RainbowFolders.Editor Classes AssetInfo DraggablePopupWindow FolderColor FolderColorsStorage FolderColorsStorageEditor FolderIconPair Represents as pair of icons to substitute for a folder FolderPlatform FolderPlatformDrawer FolderPlatformsStorage FolderPlatformsStorageEditor FolderTag FolderTagsStorage FolderTagsStorageEditor FolderType FolderTypesStorage FolderTypesStorageEditor RainbowFoldersBrowserIcons RainbowFoldersContextMenu RainbowFoldersEditorUtility RainbowFoldersPopup RainbowFoldersPreferences RainbowFoldersPreferences.EditorPrefsItem<T> RainbowFoldersPreferences.EditorPrefsString RainbowFoldersPresetsMenu RainbowFoldersWelcome Enums FolderColorName FolderPlatformName FolderTagName FolderTypeName"
  },
  "api/Borodar.RainbowFolders.Editor.RainbowFoldersBrowserIcons.html": {
    "href": "api/Borodar.RainbowFolders.Editor.RainbowFoldersBrowserIcons.html",
    "title": "Class RainbowFoldersBrowserIcons | Heroes of the Shrine",
    "keywords": "Class RainbowFoldersBrowserIcons Inheritance Object RainbowFoldersBrowserIcons Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Borodar.RainbowFolders.Editor Assembly : cs.temp.dll.dll Syntax public class RainbowFoldersBrowserIcons"
  },
  "api/Borodar.RainbowFolders.Editor.RainbowFoldersContextMenu.html": {
    "href": "api/Borodar.RainbowFolders.Editor.RainbowFoldersContextMenu.html",
    "title": "Class RainbowFoldersContextMenu | Heroes of the Shrine",
    "keywords": "Class RainbowFoldersContextMenu Inheritance Object RainbowFoldersContextMenu Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Borodar.RainbowFolders.Editor Assembly : cs.temp.dll.dll Syntax public static class RainbowFoldersContextMenu Methods ApplyCustom() Declaration public static void ApplyCustom() Blue() Declaration public static void Blue() BondiBlue() Declaration public static void BondiBlue() Green() Declaration public static void Green() Indigo() Declaration public static void Indigo() IsValidFolder() Declaration public static bool IsValidFolder() Returns Type Description Boolean Lime() Declaration public static void Lime() Magenta() Declaration public static void Magenta() OpenSettings() Declaration public static void OpenSettings() Orange() Declaration public static void Orange() PlatformAndroid() Declaration public static void PlatformAndroid() PlatformiOS() Declaration public static void PlatformiOS() PlatformMac() Declaration public static void PlatformMac() PlatformWebGL() Declaration public static void PlatformWebGL() PlatformWindows() Declaration public static void PlatformWindows() Red() Declaration public static void Red() RevertToDefault() Declaration public static void RevertToDefault() TagBlue() Declaration public static void TagBlue() TagCyan() Declaration public static void TagCyan() TagDarkBlue() Declaration public static void TagDarkBlue() TagGreen() Declaration public static void TagGreen() TagLime() Declaration public static void TagLime() TagMagenta() Declaration public static void TagMagenta() TagOrange() Declaration public static void TagOrange() TagRed() Declaration public static void TagRed() TagVermilion() Declaration public static void TagVermilion() TagViolet() Declaration public static void TagViolet() TagYellow() Declaration public static void TagYellow() TagYellowOrange() Declaration public static void TagYellowOrange() TypeAudio() Declaration public static void TypeAudio() TypeBrackets() Declaration public static void TypeBrackets() TypeEditor() Declaration public static void TypeEditor() TypeExtensions() Declaration public static void TypeExtensions() TypeFonts() Declaration public static void TypeFonts() TypeMaterials() Declaration public static void TypeMaterials() TypeMeshes() Declaration public static void TypeMeshes() TypePlugins() Declaration public static void TypePlugins() TypePrefabs() Declaration public static void TypePrefabs() TypeRainbow() Declaration public static void TypeRainbow() TypeResources() Declaration public static void TypeResources() TypeScenes() Declaration public static void TypeScenes() TypeScripts() Declaration public static void TypeScripts() TypeShaders() Declaration public static void TypeShaders() TypeTerrains() Declaration public static void TypeTerrains() TypeTextures() Declaration public static void TypeTextures() Vermilion() Declaration public static void Vermilion() Violet() Declaration public static void Violet() Yellow() Declaration public static void Yellow() YellowOrange() Declaration public static void YellowOrange()"
  },
  "api/Borodar.RainbowFolders.Editor.RainbowFoldersEditorUtility.html": {
    "href": "api/Borodar.RainbowFolders.Editor.RainbowFoldersEditorUtility.html",
    "title": "Class RainbowFoldersEditorUtility | Heroes of the Shrine",
    "keywords": "Class RainbowFoldersEditorUtility Inheritance Object RainbowFoldersEditorUtility Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Borodar.RainbowFolders.Editor Assembly : cs.temp.dll.dll Syntax public static class RainbowFoldersEditorUtility Methods CreateAsset<T>(String, String) Creates .asset file of the specified Declaration public static void CreateAsset<T>(string baseName, string forcedPath = \"\") where T : ScriptableObject Parameters Type Name Description String baseName String forcedPath Type Parameters Name Description T GetAssetLogo() Declaration public static Texture2D GetAssetLogo() Returns Type Description Texture2D GetDefaultFolderIcon() Declaration public static Texture2D GetDefaultFolderIcon() Returns Type Description Texture2D GetDeleteButtonIcon() Declaration public static Texture2D GetDeleteButtonIcon() Returns Type Description Texture2D GetEditFolderIcon(Boolean) Declaration public static Texture2D GetEditFolderIcon(bool isSmall) Parameters Type Name Description Boolean isSmall Returns Type Description Texture2D GetPresetsButtonIcon() Declaration public static Texture2D GetPresetsButtonIcon() Returns Type Description Texture2D GetProjectWindow() Declaration public static EditorWindow GetProjectWindow() Returns Type Description EditorWindow GetSettingsButtonIcon() Declaration public static Texture2D GetSettingsButtonIcon() Returns Type Description Texture2D LoadFromAsset<T>(String) Declaration public static T LoadFromAsset<T>(string relativePath) where T : UnityEngine.Object Parameters Type Name Description String relativePath Returns Type Description T Type Parameters Name Description T"
  },
  "api/Borodar.RainbowFolders.Editor.RainbowFoldersPopup.html": {
    "href": "api/Borodar.RainbowFolders.Editor.RainbowFoldersPopup.html",
    "title": "Class RainbowFoldersPopup | Heroes of the Shrine",
    "keywords": "Class RainbowFoldersPopup Inheritance Object DraggablePopupWindow RainbowFoldersPopup Inherited Members DraggablePopupWindow.GetDraggableWindow<T>() DraggablePopupWindow.Show<T>(Rect, Boolean) Namespace : Borodar.RainbowFolders.Editor Assembly : cs.temp.dll.dll Syntax public class RainbowFoldersPopup : DraggablePopupWindow Methods GetDraggableWindow() Declaration public static RainbowFoldersPopup GetDraggableWindow() Returns Type Description RainbowFoldersPopup OnGUI() Declaration public override void OnGUI() Overrides DraggablePopupWindow.OnGUI() ShowWithParams(Vector2, List<String>, Int32) Declaration public void ShowWithParams(Vector2 position, List<string> paths, int pathIndex) Parameters Type Name Description Vector2 position List < String > paths Int32 pathIndex"
  },
  "api/Borodar.RainbowFolders.Editor.RainbowFoldersPreferences.EditorPrefsItem-1.html": {
    "href": "api/Borodar.RainbowFolders.Editor.RainbowFoldersPreferences.EditorPrefsItem-1.html",
    "title": "Class RainbowFoldersPreferences.EditorPrefsItem<T> | Heroes of the Shrine",
    "keywords": "Class RainbowFoldersPreferences.EditorPrefsItem<T> Inheritance Object RainbowFoldersPreferences.EditorPrefsItem<T> RainbowFoldersPreferences.EditorPrefsString Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Borodar.RainbowFolders.Editor Assembly : cs.temp.dll.dll Syntax public abstract class EditorPrefsItem<T> Type Parameters Name Description T Constructors EditorPrefsItem(String, String, T) Declaration protected EditorPrefsItem(string key, string label, T defaultValue) Parameters Type Name Description String key String label T defaultValue Fields DefaultValue Declaration public T DefaultValue Field Value Type Description T Key Declaration public string Key Field Value Type Description String Label Declaration public string Label Field Value Type Description String Properties Value Declaration public abstract T Value { get; set; } Property Value Type Description T Methods Draw() Declaration public abstract void Draw() Operators Implicit(RainbowFoldersPreferences.EditorPrefsItem<T> to T) Declaration public static implicit operator T(RainbowFoldersPreferences.EditorPrefsItem<T> s) Parameters Type Name Description RainbowFoldersPreferences.EditorPrefsItem <T> s Returns Type Description T"
  },
  "api/Borodar.RainbowFolders.Editor.RainbowFoldersPreferences.EditorPrefsString.html": {
    "href": "api/Borodar.RainbowFolders.Editor.RainbowFoldersPreferences.EditorPrefsString.html",
    "title": "Class RainbowFoldersPreferences.EditorPrefsString | Heroes of the Shrine",
    "keywords": "Class RainbowFoldersPreferences.EditorPrefsString Inheritance Object RainbowFoldersPreferences.EditorPrefsItem < String > RainbowFoldersPreferences.EditorPrefsString Inherited Members RainbowFoldersPreferences.EditorPrefsItem<String>.Key RainbowFoldersPreferences.EditorPrefsItem<String>.Label RainbowFoldersPreferences.EditorPrefsItem<String>.DefaultValue Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Borodar.RainbowFolders.Editor Assembly : cs.temp.dll.dll Syntax public class EditorPrefsString : RainbowFoldersPreferences.EditorPrefsItem<string> Constructors EditorPrefsString(String, String, String) Declaration public EditorPrefsString(string key, string label, string defaultValue) Parameters Type Name Description String key String label String defaultValue Properties Value Declaration public override string Value { get; set; } Property Value Type Description String Overrides Borodar.RainbowFolders.Editor.RainbowFoldersPreferences.EditorPrefsItem<System.String>.Value Methods Draw() Declaration public override void Draw() Overrides Borodar.RainbowFolders.Editor.RainbowFoldersPreferences.EditorPrefsItem<System.String>.Draw()"
  },
  "api/Borodar.RainbowFolders.Editor.RainbowFoldersPreferences.html": {
    "href": "api/Borodar.RainbowFolders.Editor.RainbowFoldersPreferences.html",
    "title": "Class RainbowFoldersPreferences | Heroes of the Shrine",
    "keywords": "Class RainbowFoldersPreferences Inheritance Object RainbowFoldersPreferences Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Borodar.RainbowFolders.Editor Assembly : cs.temp.dll.dll Syntax public class RainbowFoldersPreferences Fields HomeFolder Declaration public static RainbowFoldersPreferences.EditorPrefsString HomeFolder Field Value Type Description RainbowFoldersPreferences.EditorPrefsString Methods EditorPreferences() Declaration public static void EditorPreferences()"
  },
  "api/Borodar.RainbowFolders.Editor.RainbowFoldersPresetsMenu.html": {
    "href": "api/Borodar.RainbowFolders.Editor.RainbowFoldersPresetsMenu.html",
    "title": "Class RainbowFoldersPresetsMenu | Heroes of the Shrine",
    "keywords": "Class RainbowFoldersPresetsMenu Inheritance Object RainbowFoldersPresetsMenu Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Borodar.RainbowFolders.Editor Assembly : cs.temp.dll.dll Syntax public static class RainbowFoldersPresetsMenu Methods ShowDropDown(Rect, RainbowFolder) Declaration public static void ShowDropDown(Rect position, RainbowFolder folder) Parameters Type Name Description Rect position RainbowFolder folder"
  },
  "api/Borodar.RainbowFolders.Editor.RainbowFoldersWelcome.html": {
    "href": "api/Borodar.RainbowFolders.Editor.RainbowFoldersWelcome.html",
    "title": "Class RainbowFoldersWelcome | Heroes of the Shrine",
    "keywords": "Class RainbowFoldersWelcome Inheritance Object DraggablePopupWindow RainbowFoldersWelcome Inherited Members DraggablePopupWindow.GetDraggableWindow<T>() DraggablePopupWindow.Show<T>(Rect, Boolean) Namespace : Borodar.RainbowFolders.Editor Assembly : cs.temp.dll.dll Syntax public class RainbowFoldersWelcome : DraggablePopupWindow Fields PREF_KEY Declaration public const string PREF_KEY = \"RainbowFolders.IsWelcomeShown\" Field Value Type Description String Methods OnGUI() Declaration public override void OnGUI() Overrides DraggablePopupWindow.OnGUI() ShowWindow() Declaration public static void ShowWindow()"
  },
  "api/Borodar.RainbowFolders.Editor.Settings.FolderColorDrawer.html": {
    "href": "api/Borodar.RainbowFolders.Editor.Settings.FolderColorDrawer.html",
    "title": "Class FolderColorDrawer | Heroes of the Shrine",
    "keywords": "Class FolderColorDrawer Inheritance Object FolderColorDrawer Namespace : Borodar.RainbowFolders.Editor.Settings Assembly : cs.temp.dll.dll Syntax public class FolderColorDrawer : PropertyDrawer Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Borodar.RainbowFolders.Editor.Settings.FolderTagDrawer.html": {
    "href": "api/Borodar.RainbowFolders.Editor.Settings.FolderTagDrawer.html",
    "title": "Class FolderTagDrawer | Heroes of the Shrine",
    "keywords": "Class FolderTagDrawer Inheritance Object FolderTagDrawer Namespace : Borodar.RainbowFolders.Editor.Settings Assembly : cs.temp.dll.dll Syntax public class FolderTagDrawer : PropertyDrawer Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Borodar.RainbowFolders.Editor.Settings.FolderTypeDrawer.html": {
    "href": "api/Borodar.RainbowFolders.Editor.Settings.FolderTypeDrawer.html",
    "title": "Class FolderTypeDrawer | Heroes of the Shrine",
    "keywords": "Class FolderTypeDrawer Inheritance Object FolderTypeDrawer Namespace : Borodar.RainbowFolders.Editor.Settings Assembly : cs.temp.dll.dll Syntax public class FolderTypeDrawer : PropertyDrawer Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Borodar.RainbowFolders.Editor.Settings.html": {
    "href": "api/Borodar.RainbowFolders.Editor.Settings.html",
    "title": "Namespace Borodar.RainbowFolders.Editor.Settings | Heroes of the Shrine",
    "keywords": "Namespace Borodar.RainbowFolders.Editor.Settings Classes FolderColorDrawer FolderTagDrawer FolderTypeDrawer RainbowFolder RainbowFolderDrawer RainbowFoldersSettings RainbowFoldersSettingsEditor Enums RainbowFolder.KeyType"
  },
  "api/Borodar.RainbowFolders.Editor.Settings.RainbowFolder.html": {
    "href": "api/Borodar.RainbowFolders.Editor.Settings.RainbowFolder.html",
    "title": "Class RainbowFolder | Heroes of the Shrine",
    "keywords": "Class RainbowFolder Inheritance Object RainbowFolder Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Borodar.RainbowFolders.Editor.Settings Assembly : cs.temp.dll.dll Syntax public class RainbowFolder Constructors RainbowFolder(RainbowFolder) Declaration public RainbowFolder(RainbowFolder value) Parameters Type Name Description RainbowFolder value RainbowFolder(RainbowFolder.KeyType, String) Declaration public RainbowFolder(RainbowFolder.KeyType type, string key) Parameters Type Name Description RainbowFolder.KeyType type String key RainbowFolder(RainbowFolder.KeyType, String, Texture2D, Texture2D) Declaration public RainbowFolder(RainbowFolder.KeyType type, string key, Texture2D smallIcon, Texture2D largeIcon) Parameters Type Name Description RainbowFolder.KeyType type String key Texture2D smallIcon Texture2D largeIcon Fields Key Declaration public string Key Field Value Type Description String LargeIcon Declaration public Texture2D LargeIcon Field Value Type Description Texture2D SmallIcon Declaration public Texture2D SmallIcon Field Value Type Description Texture2D Type Declaration public RainbowFolder.KeyType Type Field Value Type Description RainbowFolder.KeyType Methods CopyFrom(RainbowFolder) Declaration public void CopyFrom(RainbowFolder target) Parameters Type Name Description RainbowFolder target HasAtLeastOneIcon() Declaration public bool HasAtLeastOneIcon() Returns Type Description Boolean"
  },
  "api/Borodar.RainbowFolders.Editor.Settings.RainbowFolder.KeyType.html": {
    "href": "api/Borodar.RainbowFolders.Editor.Settings.RainbowFolder.KeyType.html",
    "title": "Enum RainbowFolder.KeyType | Heroes of the Shrine",
    "keywords": "Enum RainbowFolder.KeyType Namespace : Borodar.RainbowFolders.Editor.Settings Assembly : cs.temp.dll.dll Syntax public enum KeyType Fields Name Description Name Path"
  },
  "api/Borodar.RainbowFolders.Editor.Settings.RainbowFolderDrawer.html": {
    "href": "api/Borodar.RainbowFolders.Editor.Settings.RainbowFolderDrawer.html",
    "title": "Class RainbowFolderDrawer | Heroes of the Shrine",
    "keywords": "Class RainbowFolderDrawer Inheritance Object RainbowFolderDrawer Namespace : Borodar.RainbowFolders.Editor.Settings Assembly : cs.temp.dll.dll Syntax public class RainbowFolderDrawer : PropertyDrawer Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Borodar.RainbowFolders.Editor.Settings.RainbowFoldersSettings.html": {
    "href": "api/Borodar.RainbowFolders.Editor.Settings.RainbowFoldersSettings.html",
    "title": "Class RainbowFoldersSettings | Heroes of the Shrine",
    "keywords": "Class RainbowFoldersSettings Inheritance Object RainbowFoldersSettings Namespace : Borodar.RainbowFolders.Editor.Settings Assembly : cs.temp.dll.dll Syntax public class RainbowFoldersSettings : ScriptableObject Fields Folders Declaration public List<RainbowFolder> Folders Field Value Type Description List < RainbowFolder > Properties Instance Declaration public static RainbowFoldersSettings Instance { get; } Property Value Type Description RainbowFoldersSettings Methods AddFolder(RainbowFolder) Declaration public void AddFolder(RainbowFolder value) Parameters Type Name Description RainbowFolder value ChangeFolderIcons(RainbowFolder) Declaration public void ChangeFolderIcons(RainbowFolder value) Parameters Type Name Description RainbowFolder value ChangeFolderIconsByPath(String, FolderIconPair) Declaration public void ChangeFolderIconsByPath(string path, FolderIconPair icons) Parameters Type Name Description String path FolderIconPair icons GetFolder(RainbowFolder) Searches for a folder config that has the same type and key values. Returns the first occurrence within the settings, if found; null otherwise. Declaration public RainbowFolder GetFolder(RainbowFolder match) Parameters Type Name Description RainbowFolder match Returns Type Description RainbowFolder GetFolderByPath(String) Searches for a folder config that should be applied for the specified path (regardless of the key type). Returns the first occurrence within the settings, if found; null otherwise. Declaration public RainbowFolder GetFolderByPath(string folderPath) Parameters Type Name Description String folderPath Returns Type Description RainbowFolder GetFolderIcon(String, Boolean) Declaration public Texture2D GetFolderIcon(string folderPath, bool small = true) Parameters Type Name Description String folderPath Boolean small Returns Type Description Texture2D RemoveAll(RainbowFolder) Declaration public void RemoveAll(RainbowFolder match) Parameters Type Name Description RainbowFolder match RemoveAllByPath(String) Declaration public void RemoveAllByPath(string path) Parameters Type Name Description String path UpdateFolder(RainbowFolder, RainbowFolder) Searches for a folder config that has the same type and key, and updates its other fields with provided value, if found; creates new folder config otherwise. Declaration public void UpdateFolder(RainbowFolder match, RainbowFolder value) Parameters Type Name Description RainbowFolder match RainbowFolder value"
  },
  "api/Borodar.RainbowFolders.Editor.Settings.RainbowFoldersSettingsEditor.html": {
    "href": "api/Borodar.RainbowFolders.Editor.Settings.RainbowFoldersSettingsEditor.html",
    "title": "Class RainbowFoldersSettingsEditor | Heroes of the Shrine",
    "keywords": "Class RainbowFoldersSettingsEditor Inheritance Object RainbowFoldersSettingsEditor Namespace : Borodar.RainbowFolders.Editor.Settings Assembly : cs.temp.dll.dll Syntax public class RainbowFoldersSettingsEditor : UnityEditor.Editor Methods OnEnable() Declaration protected void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Borodar.ReorderableList.AddMenuClickedEventArgs.html": {
    "href": "api/Borodar.ReorderableList.AddMenuClickedEventArgs.html",
    "title": "Class AddMenuClickedEventArgs | Heroes of the Shrine",
    "keywords": "Class AddMenuClickedEventArgs Arguments which are passed to AddMenuClickedEventHandler . Inheritance Object AddMenuClickedEventArgs Namespace : Borodar.ReorderableList Assembly : cs.temp.dll.dll Syntax public sealed class AddMenuClickedEventArgs : EventArgs Constructors AddMenuClickedEventArgs(IReorderableListAdaptor, Rect) Initializes a new instance of ItemMovedEventArgs . Declaration public AddMenuClickedEventArgs(IReorderableListAdaptor adaptor, Rect buttonPosition) Parameters Type Name Description IReorderableListAdaptor adaptor Reorderable list adaptor. Rect buttonPosition Position of the add menu button. Properties Adaptor Gets adaptor to reorderable list container. Declaration public IReorderableListAdaptor Adaptor { get; } Property Value Type Description IReorderableListAdaptor ButtonPosition Gets position of the add menu button. Declaration public Rect ButtonPosition { get; } Property Value Type Description Rect"
  },
  "api/Borodar.ReorderableList.AddMenuClickedEventHandler.html": {
    "href": "api/Borodar.ReorderableList.AddMenuClickedEventHandler.html",
    "title": "Delegate AddMenuClickedEventHandler | Heroes of the Shrine",
    "keywords": "Delegate AddMenuClickedEventHandler An event handler which is invoked when the \"Add Menu\" button is clicked. Namespace : Borodar.ReorderableList Assembly : cs.temp.dll.dll Syntax public delegate void AddMenuClickedEventHandler(object sender, AddMenuClickedEventArgs args); Parameters Type Name Description Object sender Object which raised event. AddMenuClickedEventArgs args Event arguments."
  },
  "api/Borodar.ReorderableList.ElementAdderMenuBuilder.html": {
    "href": "api/Borodar.ReorderableList.ElementAdderMenuBuilder.html",
    "title": "Class ElementAdderMenuBuilder | Heroes of the Shrine",
    "keywords": "Class ElementAdderMenuBuilder Factory methods that create IElementAdderMenuBuilder<TContext> instances that can then be used to build element adder menus. Inheritance Object ElementAdderMenuBuilder Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Borodar.ReorderableList Assembly : cs.temp.dll.dll Syntax public static class ElementAdderMenuBuilder Examples The following example demonstrates how to build and display a menu which allows the user to add elements to a given context object upon clicking a button: public class ShoppingListElementAdder : IElementAdder<ShoppingList> { public ShoppingListElementAdder(ShoppingList shoppingList) { Object = shoppingList; } public ShoppingList Object { get; private set; } public bool CanAddElement(Type type) { return true; } public object AddElement(Type type) { var instance = Activator.CreateInstance(type); shoppingList.Add((ShoppingItem)instance); return instance; } } private void DrawAddMenuButton(ShoppingList shoppingList) { var content = new GUIContent(\"Add Menu\"); Rect position = GUILayoutUtility.GetRect(content, GUI.skin.button); if (GUI.Button(position, content)) { var builder = ElementAdderMenuBuilder.For<ShoppingList>(ShoppingItem); builder.SetElementAdder(new ShoppingListElementAdder(shoppingList)); var menu = builder.GetMenu(); menu.DropDown(buttonPosition); } } public class ShoppingListElementAdder extends IElementAdder.<ShoppingList> { var _object:ShoppingList; function ShoppingListElementAdder(shoppingList:ShoppingList) { Object = shoppingList; } function get Object():ShoppingList { return _object; } function CanAddElement(type:Type):boolean { return true; } function AddElement(type:Type):System.Object { var instance = Activator.CreateInstance(type); shoppingList.Add((ShoppingItem)instance); return instance; } } function DrawAddMenuButton(shoppingList:ShoppingList) { var content = new GUIContent('Add Menu'); var position = GUILayoutUtility.GetRect(content, GUI.skin.button); if (GUI.Button(position, content)) { var builder = ElementAdderMenuBuilder.For.<ShoppingList>(ShoppingItem); builder.SetElementAdder(new ShoppingListElementAdder(shoppingList)); var menu = builder.GetMenu(); menu.DropDown(buttonPosition); } } Methods For<TContext>() Gets a IElementAdderMenuBuilder<TContext> to build an element adder menu for a context object of the type TContext . Declaration public static IElementAdderMenuBuilder<TContext> For<TContext>() Returns Type Description IElementAdderMenuBuilder <TContext> A new IElementAdderMenuBuilder<TContext> instance. Type Parameters Name Description TContext Type of the context object that elements can be added to. See Also SetContractType(Type) For<TContext>(Type) Gets a IElementAdderMenuBuilder<TContext> to build an element adder menu for a context object of the type TContext . Declaration public static IElementAdderMenuBuilder<TContext> For<TContext>(Type contractType) Parameters Type Name Description Type contractType Contract type of addable elements. Returns Type Description IElementAdderMenuBuilder <TContext> A new IElementAdderMenuBuilder<TContext> instance. Type Parameters Name Description TContext Type of the context object that elements can be added to. See Also SetContractType(Type)"
  },
  "api/Borodar.ReorderableList.ElementAdderMenuCommandAttribute.html": {
    "href": "api/Borodar.ReorderableList.ElementAdderMenuCommandAttribute.html",
    "title": "Class ElementAdderMenuCommandAttribute | Heroes of the Shrine",
    "keywords": "Class ElementAdderMenuCommandAttribute Annotate IElementAdderMenuCommand<TContext> implementations with a ElementAdderMenuCommandAttribute to associate it with the contract type of addable elements. Inheritance Object ElementAdderMenuCommandAttribute Namespace : Borodar.ReorderableList Assembly : cs.temp.dll.dll Syntax public sealed class ElementAdderMenuCommandAttribute : Attribute Examples The following source code demonstrates how to add a helper menu command to the add element menu of a shopping list: [ElementAdderMenuCommand(typeof(ShoppingItem))] public class AddFavoriteShoppingItemsCommand : IElementAdderMenuCommand<ShoppingList> { public AddFavoriteShoppingItemsCommand() { Content = new GUIContent(\"Add Favorite Items\"); } public GUIContent Content { get; private set; } public bool CanExecute(IElementAdder<ShoppingList> elementAdder) { return true; } public void Execute(IElementAdder<ShoppingList> elementAdder) { // TODO: Add favorite items to the shopping list! } } @ElementAdderMenuCommand(ShoppingItem) class AddFavoriteShoppingItemsCommand extends IElementAdderMenuCommand.<ShoppingList> { var _content:GUIContent = new GUIContent('Add Favorite Items'); function get Content():GUIContent { return _content; } function CanExecute(elementAdder:IElementAdder.<ShoppingList>):boolean { return true; } function Execute(elementAdder:IElementAdder.<ShoppingList>) { // TODO: Add favorite items to the shopping list! } } Constructors ElementAdderMenuCommandAttribute(Type) Initializes a new instance of the ElementAdderMenuCommandAttribute class. Declaration public ElementAdderMenuCommandAttribute(Type contractType) Parameters Type Name Description Type contractType Contract type of addable elements. Properties ContractType Gets the contract type of addable elements. Declaration public Type ContractType { get; } Property Value Type Description Type"
  },
  "api/Borodar.ReorderableList.ElementAdderMeta.html": {
    "href": "api/Borodar.ReorderableList.ElementAdderMeta.html",
    "title": "Class ElementAdderMeta | Heroes of the Shrine",
    "keywords": "Class ElementAdderMeta Provides meta information which is useful when creating new implementations of the IElementAdderMenuBuilder<TContext> interface. Inheritance Object ElementAdderMeta Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Borodar.ReorderableList Assembly : cs.temp.dll.dll Syntax public static class ElementAdderMeta Methods GetConcreteElementTypes(Type) Gets an array of all the concrete element types that implement the specified contractType . Declaration public static Type[] GetConcreteElementTypes(Type contractType) Parameters Type Name Description Type contractType Contract type of addable elements. Returns Type Description Type [] An array of zero or more concrete element types. Exceptions Type Condition ArgumentNullException If contractType is null . See Also GetConcreteElementTypes(Type, Func<Type, Boolean>[]) GetConcreteElementTypes(Type, Func<Type, Boolean>[]) Gets a filtered array of the concrete element types that implement the specified contractType . Declaration public static Type[] GetConcreteElementTypes(Type contractType, Func<Type, bool>[] filters) Parameters Type Name Description Type contractType Contract type of addable elements. Func < Type , Boolean >[] filters An array of zero or more filters. Returns Type Description Type [] An array of zero or more concrete element types. Remarks A type is excluded from the resulting array when one or more of the specified filters returns a value of false . Exceptions Type Condition ArgumentNullException If contractType is null . See Also GetConcreteElementTypes(Type) GetMenuCommands<TContext>(Type) Gets an array of IElementAdderMenuCommand<TContext> instances that are associated with the specified contractType . Declaration public static IElementAdderMenuCommand<TContext>[] GetMenuCommands<TContext>(Type contractType) Parameters Type Name Description Type contractType Contract type of addable elements. Returns Type Description IElementAdderMenuCommand <TContext>[] An array containing zero or more IElementAdderMenuCommand<TContext> instances. Type Parameters Name Description TContext Type of the context object that elements can be added to. Exceptions Type Condition ArgumentNullException If contractType is null . See Also GetMenuCommandTypes<TContext>(Type) GetMenuCommandTypes<TContext>(Type) Gets an array of the IElementAdderMenuCommand<TContext> types that are associated with the specified contractType . Declaration public static Type[] GetMenuCommandTypes<TContext>(Type contractType) Parameters Type Name Description Type contractType Contract type of addable elements. Returns Type Description Type [] An array containing zero or more Type . Type Parameters Name Description TContext Type of the context object that elements can be added to. Exceptions Type Condition ArgumentNullException If contractType is null . See Also GetMenuCommands<TContext>(Type)"
  },
  "api/Borodar.ReorderableList.GenericListAdaptor-1.html": {
    "href": "api/Borodar.ReorderableList.GenericListAdaptor-1.html",
    "title": "Class GenericListAdaptor<T> | Heroes of the Shrine",
    "keywords": "Class GenericListAdaptor<T> Reorderable list adaptor for generic list. Inheritance Object GenericListAdaptor<T> Implements IReorderableListAdaptor Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Borodar.ReorderableList Assembly : cs.temp.dll.dll Syntax public class GenericListAdaptor<T> : IReorderableListAdaptor Type Parameters Name Description T Type of list element. Remarks This adaptor can be subclassed to add special logic to item height calculation. You may want to implement a custom adaptor class where specialised functionality is needed. List elements which implement the ICloneable interface are cloned using that interface upon duplication; otherwise the item value or reference is simply copied. Constructors GenericListAdaptor(IList<T>, ReorderableListControl.ItemDrawer<T>, Single) Initializes a new instance of GenericListAdaptor<T> . Declaration public GenericListAdaptor(IList<T> list, ReorderableListControl.ItemDrawer<T> itemDrawer, float itemHeight) Parameters Type Name Description IList <T> list The list which can be reordered. ReorderableListControl.ItemDrawer <T> itemDrawer Callback to draw list item. Single itemHeight Height of list item in pixels. Fields FixedItemHeight Fixed height of each list item. Declaration public float FixedItemHeight Field Value Type Description Single Properties Count Gets count of elements in list. Declaration public int Count { get; } Property Value Type Description Int32 Item[Int32] Gets element from list. Declaration public T this[int index] { get; } Parameters Type Name Description Int32 index Zero-based index of element. Property Value Type Description T The element. List Gets the underlying list data structure. Declaration public IList<T> List { get; } Property Value Type Description IList <T> Methods Add() Add new element at end of list. Declaration public virtual void Add() BeginGUI() Occurs before any list items are drawn. Declaration public virtual void BeginGUI() Remarks This method is only used to handle GUI repaint events. CanDrag(Int32) Determines whether an item can be reordered by dragging mouse. Declaration public virtual bool CanDrag(int index) Parameters Type Name Description Int32 index Zero-based index for list element. Returns Type Description Boolean A value of true if item can be dragged; otherwise false . Remarks This should be a light-weight method since it will be used to determine whether grab handle should be included for each item in a reorderable list. Please note that returning a value of false does not prevent movement on list item since other draggable items can be moved around it. CanRemove(Int32) Determines whether an item can be removed from list. Declaration public virtual bool CanRemove(int index) Parameters Type Name Description Int32 index Zero-based index for list element. Returns Type Description Boolean A value of true if item can be removed; otherwise false . Remarks This should be a light-weight method since it will be used to determine whether remove button should be included for each item in list. This is redundant when HideRemoveButtons is specified. Clear() Clear all elements from list. Declaration public virtual void Clear() DrawItem(Rect, Int32) Draws main interface for a list item. Declaration public virtual void DrawItem(Rect position, int index) Parameters Type Name Description Rect position Position in GUI. Int32 index Zero-based index of array element. Remarks This method is used to handle all GUI events. DrawItemBackground(Rect, Int32) Draws background of a list item. Declaration public virtual void DrawItemBackground(Rect position, int index) Parameters Type Name Description Rect position Total position of list element in GUI. Int32 index Zero-based index of array element. Remarks This method is only used to handle GUI repaint events. Background of list item spans a slightly larger area than the main interface that is drawn by DrawItem(Rect, Int32) since it is drawn behind the grab handle. Duplicate(Int32) Duplicate existing element. Declaration public virtual void Duplicate(int index) Parameters Type Name Description Int32 index Zero-based index of list element. Remarks Consider using the ICloneable interface to duplicate list elements where appropriate. EndGUI() Occurs after all list items have been drawn. Declaration public virtual void EndGUI() Remarks This method is only used to handle GUI repaint events. GetItemHeight(Int32) Gets height of list item in pixels. Declaration public virtual float GetItemHeight(int index) Parameters Type Name Description Int32 index Zero-based index of array element. Returns Type Description Single Measurement in pixels. Insert(Int32) Insert new element at specified index. Declaration public virtual void Insert(int index) Parameters Type Name Description Int32 index Zero-based index for list element. Move(Int32, Int32) Move element from source index to destination index. Declaration public virtual void Move(int sourceIndex, int destIndex) Parameters Type Name Description Int32 sourceIndex Zero-based index of source element. Int32 destIndex Zero-based index of destination element. Remove(Int32) Remove element at specified index. Declaration public virtual void Remove(int index) Parameters Type Name Description Int32 index Zero-based index of list element. Implements IReorderableListAdaptor"
  },
  "api/Borodar.ReorderableList.html": {
    "href": "api/Borodar.ReorderableList.html",
    "title": "Namespace Borodar.ReorderableList | Heroes of the Shrine",
    "keywords": "Namespace Borodar.ReorderableList Classes AddMenuClickedEventArgs Arguments which are passed to AddMenuClickedEventHandler . ElementAdderMenuBuilder Factory methods that create IElementAdderMenuBuilder<TContext> instances that can then be used to build element adder menus. ElementAdderMenuCommandAttribute Annotate IElementAdderMenuCommand<TContext> implementations with a ElementAdderMenuCommandAttribute to associate it with the contract type of addable elements. ElementAdderMeta Provides meta information which is useful when creating new implementations of the IElementAdderMenuBuilder<TContext> interface. GenericListAdaptor<T> Reorderable list adaptor for generic list. ItemInsertedEventArgs Arguments which are passed to ItemInsertedEventHandler . ItemMovedEventArgs Arguments which are passed to ItemMovedEventHandler . ItemMovingEventArgs Arguments which are passed to ItemMovingEventHandler . ItemRemovingEventArgs Arguments which are passed to ItemRemovingEventHandler . ReorderableListControl Base class for custom reorderable list control. ReorderableListGUI Utility class for drawing reorderable lists. ReorderableListStyles Styles for the ReorderableListControl . SerializedPropertyAdaptor Reorderable list adaptor for serialized array property. Interfaces IElementAdder<TContext> Interface for an object which adds elements to a context object of the type TContext . IElementAdderMenu Interface for a menu interface. IElementAdderMenuBuilder<TContext> Interface for building an IElementAdderMenu . IElementAdderMenuCommand<TContext> Interface for a menu command that can be included in an IElementAdderMenu either by annotating an implementation of the IElementAdderMenuCommand<TContext> interface with ElementAdderMenuCommandAttribute or directly by calling AddCustomCommand(IElementAdderMenuCommand<TContext>) . IReorderableListAdaptor Adaptor allowing reorderable list control to interface with list data. IReorderableListDropTarget Can be implemented along with IReorderableListAdaptor when drop insertion or ordering is desired. Enums ReorderableListFlags Additional flags which can be passed into reorderable list field. Delegates AddMenuClickedEventHandler An event handler which is invoked when the \"Add Menu\" button is clicked. ItemInsertedEventHandler An event handler which is invoked after new list item is inserted. ItemMovedEventHandler An event handler which is invoked after a list item is moved. ItemMovingEventHandler An event handler which is invoked before a list item is moved. ItemRemovingEventHandler An event handler which is invoked before a list item is removed. ReorderableListControl.DrawEmpty Invoked to draw content for empty list. ReorderableListControl.DrawEmptyAbsolute Invoked to draw content for empty list with absolute positioning. ReorderableListControl.ItemDrawer<T> Invoked to draw list item."
  },
  "api/Borodar.ReorderableList.IElementAdder-1.html": {
    "href": "api/Borodar.ReorderableList.IElementAdder-1.html",
    "title": "Interface IElementAdder<TContext> | Heroes of the Shrine",
    "keywords": "Interface IElementAdder<TContext> Interface for an object which adds elements to a context object of the type TContext . Namespace : Borodar.ReorderableList Assembly : cs.temp.dll.dll Syntax public interface IElementAdder<TContext> Type Parameters Name Description TContext Type of the context object that elements can be added to. Properties Object Gets the context object. Declaration TContext Object { get; } Property Value Type Description TContext Methods AddElement(Type) Adds an element of the specified type to the associated context object. Declaration object AddElement(Type type) Parameters Type Name Description Type type Type of element to add. Returns Type Description Object The new element. CanAddElement(Type) Determines whether a new element of the specified type can be added to the associated context object. Declaration bool CanAddElement(Type type) Parameters Type Name Description Type type Type of element to add. Returns Type Description Boolean A value of true if an element of the specified type can be added; otherwise, a value of false ."
  },
  "api/Borodar.ReorderableList.IElementAdderMenu.html": {
    "href": "api/Borodar.ReorderableList.IElementAdderMenu.html",
    "title": "Interface IElementAdderMenu | Heroes of the Shrine",
    "keywords": "Interface IElementAdderMenu Interface for a menu interface. Namespace : Borodar.ReorderableList Assembly : cs.temp.dll.dll Syntax public interface IElementAdderMenu Properties IsEmpty Gets a value indicating whether the menu contains any items. Declaration bool IsEmpty { get; } Property Value Type Description Boolean true if the menu contains one or more items; otherwise, false . Methods DropDown(Rect) Displays the drop-down menu inside an editor GUI. Declaration void DropDown(Rect position) Parameters Type Name Description Rect position Position of menu button in the GUI. Remarks This method should only be used during OnGUI and OnSceneGUI events; for instance, inside an editor window, a custom inspector or scene view."
  },
  "api/Borodar.ReorderableList.IElementAdderMenuBuilder-1.html": {
    "href": "api/Borodar.ReorderableList.IElementAdderMenuBuilder-1.html",
    "title": "Interface IElementAdderMenuBuilder<TContext> | Heroes of the Shrine",
    "keywords": "Interface IElementAdderMenuBuilder<TContext> Interface for building an IElementAdderMenu . Namespace : Borodar.ReorderableList Assembly : cs.temp.dll.dll Syntax public interface IElementAdderMenuBuilder<TContext> Type Parameters Name Description TContext Type of the context object that elements can be added to. Methods AddCustomCommand(IElementAdderMenuCommand<TContext>) Adds a custom command to the menu. Declaration void AddCustomCommand(IElementAdderMenuCommand<TContext> command) Parameters Type Name Description IElementAdderMenuCommand <TContext> command The custom command. Exceptions Type Condition ArgumentNullException If command is null . AddTypeFilter(Func<Type, Boolean>) Adds a filter function which determines whether types can be included or whether they need to be excluded. Declaration void AddTypeFilter(Func<Type, bool> typeFilter) Parameters Type Name Description Func < Type , Boolean > typeFilter Filter function. Remarks If a filter function returns a value of false then that type will not be included in the menu interface. Exceptions Type Condition ArgumentNullException If typeFilter is null . GetMenu() Builds and returns a new IElementAdderMenu instance. Declaration IElementAdderMenu GetMenu() Returns Type Description IElementAdderMenu A new IElementAdderMenu instance each time the method is invoked. SetContractType(Type) Sets contract type of the elements that can be included in the IElementAdderMenu . Only non-abstract class types that are assignable from the contractType will be included in the built menu. Declaration void SetContractType(Type contractType) Parameters Type Name Description Type contractType Contract type of addable elements. SetElementAdder(IElementAdder<TContext>) Set the IElementAdder<TContext> implementation which is used when adding new elements to the context object. Declaration void SetElementAdder(IElementAdder<TContext> elementAdder) Parameters Type Name Description IElementAdder <TContext> elementAdder Element adder. Remarks Specify a value of null for elementAdder to prevent the selection of any types. SetTypeDisplayNameFormatter(Func<Type, String>) Set the function that formats the display of type names in the user interface. Declaration void SetTypeDisplayNameFormatter(Func<Type, string> formatter) Parameters Type Name Description Func < Type , String > formatter Function that formats display name of type; or null . Remarks Specify a value of null for formatter to assume the default formatting function."
  },
  "api/Borodar.ReorderableList.IElementAdderMenuCommand-1.html": {
    "href": "api/Borodar.ReorderableList.IElementAdderMenuCommand-1.html",
    "title": "Interface IElementAdderMenuCommand<TContext> | Heroes of the Shrine",
    "keywords": "Interface IElementAdderMenuCommand<TContext> Interface for a menu command that can be included in an IElementAdderMenu either by annotating an implementation of the IElementAdderMenuCommand<TContext> interface with ElementAdderMenuCommandAttribute or directly by calling AddCustomCommand(IElementAdderMenuCommand<TContext>) . Namespace : Borodar.ReorderableList Assembly : cs.temp.dll.dll Syntax public interface IElementAdderMenuCommand<TContext> Type Parameters Name Description TContext Type of the context object that elements can be added to. Properties Content Gets the content of the menu command. Declaration GUIContent Content { get; } Property Value Type Description GUIContent Methods CanExecute(IElementAdder<TContext>) Determines whether the command can be executed. Declaration bool CanExecute(IElementAdder<TContext> elementAdder) Parameters Type Name Description IElementAdder <TContext> elementAdder The associated element adder provides access to the TContext instance. Returns Type Description Boolean A value of true if the command can execute; otherwise, false . Execute(IElementAdder<TContext>) Executes the command. Declaration void Execute(IElementAdder<TContext> elementAdder) Parameters Type Name Description IElementAdder <TContext> elementAdder The associated element adder provides access to the TContext instance."
  },
  "api/Borodar.ReorderableList.Internal.GUIHelper.html": {
    "href": "api/Borodar.ReorderableList.Internal.GUIHelper.html",
    "title": "Class GUIHelper | Heroes of the Shrine",
    "keywords": "Class GUIHelper Utility functions to assist with GUIs. Inheritance Object GUIHelper Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Borodar.ReorderableList.Internal Assembly : cs.temp.dll.dll Syntax public static class GUIHelper Fields FocusTextInControl Focus control and text editor where applicable. Declaration public static Action<string> FocusTextInControl Field Value Type Description Action < String > VisibleRect Gets visible rectangle within GUI. Declaration public static Func<Rect> VisibleRect Field Value Type Description Func < Rect > Remarks VisibleRect = TopmostRect + scrollViewOffsets Methods DrawTexture(Rect, Texture2D) Draw texture using to workaround bug in Unity where flickers when embedded inside a property drawer. Declaration public static void DrawTexture(Rect position, Texture2D texture) Parameters Type Name Description Rect position Position of which to draw texture in space of GUI. Texture2D texture Texture. IconButton(Rect, Boolean, Texture2D, Texture2D, GUIStyle) Declaration public static bool IconButton(Rect position, bool visible, Texture2D iconNormal, Texture2D iconActive, GUIStyle style) Parameters Type Name Description Rect position Boolean visible Texture2D iconNormal Texture2D iconActive GUIStyle style Returns Type Description Boolean IconButton(Rect, Texture2D, Texture2D, GUIStyle) Declaration public static bool IconButton(Rect position, Texture2D iconNormal, Texture2D iconActive, GUIStyle style) Parameters Type Name Description Rect position Texture2D iconNormal Texture2D iconActive GUIStyle style Returns Type Description Boolean Separator(Rect) Declaration public static void Separator(Rect position) Parameters Type Name Description Rect position Separator(Rect, Color) Declaration public static void Separator(Rect position, Color color) Parameters Type Name Description Rect position Color color"
  },
  "api/Borodar.ReorderableList.Internal.html": {
    "href": "api/Borodar.ReorderableList.Internal.html",
    "title": "Namespace Borodar.ReorderableList.Internal | Heroes of the Shrine",
    "keywords": "Namespace Borodar.ReorderableList.Internal Classes GUIHelper Utility functions to assist with GUIs. ReorderableListResources Resources to assist with reorderable list control. SerializedPropertyUtility Utility functionality for SerializedPropertyAdaptor implementations. Enums ReorderableListTexture"
  },
  "api/Borodar.ReorderableList.Internal.ReorderableListResources.html": {
    "href": "api/Borodar.ReorderableList.Internal.ReorderableListResources.html",
    "title": "Class ReorderableListResources | Heroes of the Shrine",
    "keywords": "Class ReorderableListResources Resources to assist with reorderable list control. Inheritance Object ReorderableListResources Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Borodar.ReorderableList.Internal Assembly : cs.temp.dll.dll Syntax public static class ReorderableListResources Properties texHighlightColor Declaration public static Texture2D texHighlightColor { get; } Property Value Type Description Texture2D Methods CreatePixelTexture(String, Color) Create 1x1 pixel texture of specified color. Declaration public static Texture2D CreatePixelTexture(string name, Color color) Parameters Type Name Description String name Name for texture object. Color color Pixel color. Returns Type Description Texture2D The new Texture2D instance. GetTexture(ReorderableListTexture) Gets light or dark version of the specified texture. Declaration public static Texture2D GetTexture(ReorderableListTexture name) Parameters Type Name Description ReorderableListTexture name Returns Type Description Texture2D"
  },
  "api/Borodar.ReorderableList.Internal.ReorderableListTexture.html": {
    "href": "api/Borodar.ReorderableList.Internal.ReorderableListTexture.html",
    "title": "Enum ReorderableListTexture | Heroes of the Shrine",
    "keywords": "Enum ReorderableListTexture Namespace : Borodar.ReorderableList.Internal Assembly : cs.temp.dll.dll Syntax public enum ReorderableListTexture Fields Name Description Button_Active Button_Normal Button2_Active Button2_Normal Container2Background ContainerBackground GrabHandle Icon_Add_Active Icon_Add_Normal Icon_AddMenu_Active Icon_AddMenu_Normal Icon_Menu_Active Icon_Menu_Normal Icon_Remove_Active Icon_Remove_Normal TitleBackground"
  },
  "api/Borodar.ReorderableList.Internal.SerializedPropertyUtility.html": {
    "href": "api/Borodar.ReorderableList.Internal.SerializedPropertyUtility.html",
    "title": "Class SerializedPropertyUtility | Heroes of the Shrine",
    "keywords": "Class SerializedPropertyUtility Utility functionality for SerializedPropertyAdaptor implementations. Inheritance Object SerializedPropertyUtility Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Borodar.ReorderableList.Internal Assembly : cs.temp.dll.dll Syntax public static class SerializedPropertyUtility Methods CopyPropertyValue(SerializedProperty, SerializedProperty) Copies value of sourceProperty into . Declaration public static void CopyPropertyValue(SerializedProperty destProperty, SerializedProperty sourceProperty) Parameters Type Name Description SerializedProperty destProperty Destination property. SerializedProperty sourceProperty Source property. ResetValue(SerializedProperty) Reset the value of a property. Declaration public static void ResetValue(SerializedProperty property) Parameters Type Name Description SerializedProperty property Serialized property for a serialized property."
  },
  "api/Borodar.ReorderableList.IReorderableListAdaptor.html": {
    "href": "api/Borodar.ReorderableList.IReorderableListAdaptor.html",
    "title": "Interface IReorderableListAdaptor | Heroes of the Shrine",
    "keywords": "Interface IReorderableListAdaptor Adaptor allowing reorderable list control to interface with list data. Namespace : Borodar.ReorderableList Assembly : cs.temp.dll.dll Syntax public interface IReorderableListAdaptor Properties Count Gets count of elements in list. Declaration int Count { get; } Property Value Type Description Int32 Methods Add() Add new element at end of list. Declaration void Add() BeginGUI() Occurs before any list items are drawn. Declaration void BeginGUI() Remarks This method is only used to handle GUI repaint events. CanDrag(Int32) Determines whether an item can be reordered by dragging mouse. Declaration bool CanDrag(int index) Parameters Type Name Description Int32 index Zero-based index for list element. Returns Type Description Boolean A value of true if item can be dragged; otherwise false . Remarks This should be a light-weight method since it will be used to determine whether grab handle should be included for each item in a reorderable list. Please note that returning a value of false does not prevent movement on list item since other draggable items can be moved around it. CanRemove(Int32) Determines whether an item can be removed from list. Declaration bool CanRemove(int index) Parameters Type Name Description Int32 index Zero-based index for list element. Returns Type Description Boolean A value of true if item can be removed; otherwise false . Remarks This should be a light-weight method since it will be used to determine whether remove button should be included for each item in list. This is redundant when HideRemoveButtons is specified. Clear() Clear all elements from list. Declaration void Clear() DrawItem(Rect, Int32) Draws main interface for a list item. Declaration void DrawItem(Rect position, int index) Parameters Type Name Description Rect position Position in GUI. Int32 index Zero-based index of array element. Remarks This method is used to handle all GUI events. DrawItemBackground(Rect, Int32) Draws background of a list item. Declaration void DrawItemBackground(Rect position, int index) Parameters Type Name Description Rect position Total position of list element in GUI. Int32 index Zero-based index of array element. Remarks This method is only used to handle GUI repaint events. Background of list item spans a slightly larger area than the main interface that is drawn by DrawItem(Rect, Int32) since it is drawn behind the grab handle. Duplicate(Int32) Duplicate existing element. Declaration void Duplicate(int index) Parameters Type Name Description Int32 index Zero-based index of list element. Remarks Consider using the ICloneable interface to duplicate list elements where appropriate. EndGUI() Occurs after all list items have been drawn. Declaration void EndGUI() Remarks This method is only used to handle GUI repaint events. GetItemHeight(Int32) Gets height of list item in pixels. Declaration float GetItemHeight(int index) Parameters Type Name Description Int32 index Zero-based index of array element. Returns Type Description Single Measurement in pixels. Insert(Int32) Insert new element at specified index. Declaration void Insert(int index) Parameters Type Name Description Int32 index Zero-based index for list element. Move(Int32, Int32) Move element from source index to destination index. Declaration void Move(int sourceIndex, int destIndex) Parameters Type Name Description Int32 sourceIndex Zero-based index of source element. Int32 destIndex Zero-based index of destination element. Remove(Int32) Remove element at specified index. Declaration void Remove(int index) Parameters Type Name Description Int32 index Zero-based index of list element."
  },
  "api/Borodar.ReorderableList.IReorderableListDropTarget.html": {
    "href": "api/Borodar.ReorderableList.IReorderableListDropTarget.html",
    "title": "Interface IReorderableListDropTarget | Heroes of the Shrine",
    "keywords": "Interface IReorderableListDropTarget Can be implemented along with IReorderableListAdaptor when drop insertion or ordering is desired. Namespace : Borodar.ReorderableList Assembly : cs.temp.dll.dll Syntax public interface IReorderableListDropTarget Remarks This type of \"drop\" functionality can occur when the \"drag\" phase of the drag and drop operation was initiated elsewhere. For example, a custom IReorderableListAdaptor could insert entirely new items by dragging and dropping from the Unity \"Project\" window. Methods CanDropInsert(Int32) Determines whether an item is being dragged and that it can be inserted or moved by dropping somewhere into the reorderable list control. Declaration bool CanDropInsert(int insertionIndex) Parameters Type Name Description Int32 insertionIndex Zero-based index of insertion. Returns Type Description Boolean A value of true if item can be dropped; otherwise false . Remarks This method is always called whilst drawing an editor GUI. ProcessDropInsertion(Int32) Processes the current drop insertion operation when CanDropInsert(Int32) returns a value of true to process, accept or cancel. Declaration void ProcessDropInsertion(int insertionIndex) Parameters Type Name Description Int32 insertionIndex Zero-based index of insertion. Remarks This method is always called whilst drawing an editor GUI. This method is only called when CanDropInsert(Int32) returns a value of true ."
  },
  "api/Borodar.ReorderableList.ItemInsertedEventArgs.html": {
    "href": "api/Borodar.ReorderableList.ItemInsertedEventArgs.html",
    "title": "Class ItemInsertedEventArgs | Heroes of the Shrine",
    "keywords": "Class ItemInsertedEventArgs Arguments which are passed to ItemInsertedEventHandler . Inheritance Object ItemInsertedEventArgs Namespace : Borodar.ReorderableList Assembly : cs.temp.dll.dll Syntax public sealed class ItemInsertedEventArgs : EventArgs Constructors ItemInsertedEventArgs(IReorderableListAdaptor, Int32, Boolean) Initializes a new instance of ItemInsertedEventArgs . Declaration public ItemInsertedEventArgs(IReorderableListAdaptor adaptor, int itemIndex, bool wasDuplicated) Parameters Type Name Description IReorderableListAdaptor adaptor Reorderable list adaptor. Int32 itemIndex Zero-based index of item. Boolean wasDuplicated Indicates if inserted item was duplicated from another item. Properties Adaptor Gets adaptor to reorderable list container which contains element. Declaration public IReorderableListAdaptor Adaptor { get; } Property Value Type Description IReorderableListAdaptor ItemIndex Gets zero-based index of item which was inserted. Declaration public int ItemIndex { get; } Property Value Type Description Int32 WasDuplicated Indicates if inserted item was duplicated from another item. Declaration public bool WasDuplicated { get; } Property Value Type Description Boolean"
  },
  "api/Borodar.ReorderableList.ItemInsertedEventHandler.html": {
    "href": "api/Borodar.ReorderableList.ItemInsertedEventHandler.html",
    "title": "Delegate ItemInsertedEventHandler | Heroes of the Shrine",
    "keywords": "Delegate ItemInsertedEventHandler An event handler which is invoked after new list item is inserted. Namespace : Borodar.ReorderableList Assembly : cs.temp.dll.dll Syntax public delegate void ItemInsertedEventHandler(object sender, ItemInsertedEventArgs args); Parameters Type Name Description Object sender Object which raised event. ItemInsertedEventArgs args Event arguments."
  },
  "api/Borodar.ReorderableList.ItemMovedEventArgs.html": {
    "href": "api/Borodar.ReorderableList.ItemMovedEventArgs.html",
    "title": "Class ItemMovedEventArgs | Heroes of the Shrine",
    "keywords": "Class ItemMovedEventArgs Arguments which are passed to ItemMovedEventHandler . Inheritance Object ItemMovedEventArgs Namespace : Borodar.ReorderableList Assembly : cs.temp.dll.dll Syntax public sealed class ItemMovedEventArgs : EventArgs Constructors ItemMovedEventArgs(IReorderableListAdaptor, Int32, Int32) Initializes a new instance of ItemMovedEventArgs . Declaration public ItemMovedEventArgs(IReorderableListAdaptor adaptor, int oldItemIndex, int newItemIndex) Parameters Type Name Description IReorderableListAdaptor adaptor Reorderable list adaptor. Int32 oldItemIndex Old zero-based index of item. Int32 newItemIndex New zero-based index of item. Properties Adaptor Gets adaptor to reorderable list container which contains element. Declaration public IReorderableListAdaptor Adaptor { get; } Property Value Type Description IReorderableListAdaptor NewItemIndex Gets new zero-based index of the item which was moved. Declaration public int NewItemIndex { get; } Property Value Type Description Int32 OldItemIndex Gets old zero-based index of the item which was moved. Declaration public int OldItemIndex { get; } Property Value Type Description Int32"
  },
  "api/Borodar.ReorderableList.ItemMovedEventHandler.html": {
    "href": "api/Borodar.ReorderableList.ItemMovedEventHandler.html",
    "title": "Delegate ItemMovedEventHandler | Heroes of the Shrine",
    "keywords": "Delegate ItemMovedEventHandler An event handler which is invoked after a list item is moved. Namespace : Borodar.ReorderableList Assembly : cs.temp.dll.dll Syntax public delegate void ItemMovedEventHandler(object sender, ItemMovedEventArgs args); Parameters Type Name Description Object sender Object which raised event. ItemMovedEventArgs args Event arguments."
  },
  "api/Borodar.ReorderableList.ItemMovingEventArgs.html": {
    "href": "api/Borodar.ReorderableList.ItemMovingEventArgs.html",
    "title": "Class ItemMovingEventArgs | Heroes of the Shrine",
    "keywords": "Class ItemMovingEventArgs Arguments which are passed to ItemMovingEventHandler . Inheritance Object ItemMovingEventArgs Namespace : Borodar.ReorderableList Assembly : cs.temp.dll.dll Syntax public sealed class ItemMovingEventArgs : CancelEventArgs Constructors ItemMovingEventArgs(IReorderableListAdaptor, Int32, Int32) Initializes a new instance of ItemMovingEventArgs . Declaration public ItemMovingEventArgs(IReorderableListAdaptor adaptor, int itemIndex, int destinationItemIndex) Parameters Type Name Description IReorderableListAdaptor adaptor Reorderable list adaptor. Int32 itemIndex Zero-based index of item. Int32 destinationItemIndex Xero-based index of item destination. Properties Adaptor Gets adaptor to reorderable list container which contains element. Declaration public IReorderableListAdaptor Adaptor { get; } Property Value Type Description IReorderableListAdaptor DestinationItemIndex Gets the new candidate zero-based index for the item. Declaration public int DestinationItemIndex { get; } Property Value Type Description Int32 See Also NewItemIndex ItemIndex Gets current zero-based index of item which is going to be moved. Declaration public int ItemIndex { get; } Property Value Type Description Int32 NewItemIndex Gets zero-based index of item after it has been moved. Declaration public int NewItemIndex { get; } Property Value Type Description Int32 See Also DestinationItemIndex"
  },
  "api/Borodar.ReorderableList.ItemMovingEventHandler.html": {
    "href": "api/Borodar.ReorderableList.ItemMovingEventHandler.html",
    "title": "Delegate ItemMovingEventHandler | Heroes of the Shrine",
    "keywords": "Delegate ItemMovingEventHandler An event handler which is invoked before a list item is moved. Namespace : Borodar.ReorderableList Assembly : cs.temp.dll.dll Syntax public delegate void ItemMovingEventHandler(object sender, ItemMovingEventArgs args); Parameters Type Name Description Object sender Object which raised event. ItemMovingEventArgs args Event arguments. Remarks Moving of item can be cancelled by setting to true ."
  },
  "api/Borodar.ReorderableList.ItemRemovingEventArgs.html": {
    "href": "api/Borodar.ReorderableList.ItemRemovingEventArgs.html",
    "title": "Class ItemRemovingEventArgs | Heroes of the Shrine",
    "keywords": "Class ItemRemovingEventArgs Arguments which are passed to ItemRemovingEventHandler . Inheritance Object ItemRemovingEventArgs Namespace : Borodar.ReorderableList Assembly : cs.temp.dll.dll Syntax public sealed class ItemRemovingEventArgs : CancelEventArgs Constructors ItemRemovingEventArgs(IReorderableListAdaptor, Int32) Initializes a new instance of ItemRemovingEventArgs . Declaration public ItemRemovingEventArgs(IReorderableListAdaptor adaptor, int itemIndex) Parameters Type Name Description IReorderableListAdaptor adaptor Reorderable list adaptor. Int32 itemIndex Zero-based index of item. Properties Adaptor Gets adaptor to reorderable list container which contains element. Declaration public IReorderableListAdaptor Adaptor { get; } Property Value Type Description IReorderableListAdaptor ItemIndex Gets zero-based index of item which is being removed. Declaration public int ItemIndex { get; } Property Value Type Description Int32"
  },
  "api/Borodar.ReorderableList.ItemRemovingEventHandler.html": {
    "href": "api/Borodar.ReorderableList.ItemRemovingEventHandler.html",
    "title": "Delegate ItemRemovingEventHandler | Heroes of the Shrine",
    "keywords": "Delegate ItemRemovingEventHandler An event handler which is invoked before a list item is removed. Namespace : Borodar.ReorderableList Assembly : cs.temp.dll.dll Syntax public delegate void ItemRemovingEventHandler(object sender, ItemRemovingEventArgs args); Parameters Type Name Description Object sender Object which raised event. ItemRemovingEventArgs args Event arguments. Remarks Item removal can be cancelled by setting to true ."
  },
  "api/Borodar.ReorderableList.ReorderableListControl.DrawEmpty.html": {
    "href": "api/Borodar.ReorderableList.ReorderableListControl.DrawEmpty.html",
    "title": "Delegate ReorderableListControl.DrawEmpty | Heroes of the Shrine",
    "keywords": "Delegate ReorderableListControl.DrawEmpty Invoked to draw content for empty list. Namespace : Borodar.ReorderableList Assembly : cs.temp.dll.dll Syntax public delegate void DrawEmpty(); Remarks Callback should make use of GUILayout to present controls. Examples The following listing displays a label for empty list control: using Rotorz.ReorderableList; using System.Collections.Generic; using UnityEditor; using UnityEngine; public class ExampleWindow : EditorWindow { private List<string> _list; private void OnEnable() { _list = new List<string>(); } private void OnGUI() { ReorderableListGUI.ListField(_list, ReorderableListGUI.TextFieldItemDrawer, DrawEmptyMessage); } private string DrawEmptyMessage() { GUILayout.Label(\"List is empty!\", EditorStyles.miniLabel); } } import Rotorz.ReorderableList; import System.Collections.Generic; class ExampleWindow extends EditorWindow { private var _list:List.<String>; function OnEnable() { _list = new List.<String>(); } function OnGUI() { ReorderableListGUI.ListField(_list, ReorderableListGUI.TextFieldItemDrawer, DrawEmptyMessage); } function DrawEmptyMessage() { GUILayout.Label('List is empty!', EditorStyles.miniLabel); } }"
  },
  "api/Borodar.ReorderableList.ReorderableListControl.DrawEmptyAbsolute.html": {
    "href": "api/Borodar.ReorderableList.ReorderableListControl.DrawEmptyAbsolute.html",
    "title": "Delegate ReorderableListControl.DrawEmptyAbsolute | Heroes of the Shrine",
    "keywords": "Delegate ReorderableListControl.DrawEmptyAbsolute Invoked to draw content for empty list with absolute positioning. Namespace : Borodar.ReorderableList Assembly : cs.temp.dll.dll Syntax public delegate void DrawEmptyAbsolute(Rect position); Parameters Type Name Description Rect position Position of empty content."
  },
  "api/Borodar.ReorderableList.ReorderableListControl.html": {
    "href": "api/Borodar.ReorderableList.ReorderableListControl.html",
    "title": "Class ReorderableListControl | Heroes of the Shrine",
    "keywords": "Class ReorderableListControl Base class for custom reorderable list control. Inheritance Object ReorderableListControl Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Borodar.ReorderableList Assembly : cs.temp.dll.dll Syntax public class ReorderableListControl Constructors ReorderableListControl() Initializes a new instance of ReorderableListControl . Declaration public ReorderableListControl() ReorderableListControl(ReorderableListFlags) Initializes a new instance of ReorderableListControl . Declaration public ReorderableListControl(ReorderableListFlags flags) Parameters Type Name Description ReorderableListFlags flags Optional flags which affect behavior of control. Fields AnchorBackgroundColor Background color of anchor list item. Declaration public static readonly Color AnchorBackgroundColor Field Value Type Description Color CommandClearAll Content for \"Clear All\" command. Declaration protected static readonly GUIContent CommandClearAll Field Value Type Description GUIContent CommandDuplicate Content for \"Duplicate\" command. Declaration protected static readonly GUIContent CommandDuplicate Field Value Type Description GUIContent CommandInsertAbove Content for \"Insert Above\" command. Declaration protected static readonly GUIContent CommandInsertAbove Field Value Type Description GUIContent CommandInsertBelow Content for \"Insert Below\" command. Declaration protected static readonly GUIContent CommandInsertBelow Field Value Type Description GUIContent CommandMoveToBottom Content for \"Move to Bottom\" command. Declaration protected static readonly GUIContent CommandMoveToBottom Field Value Type Description GUIContent CommandMoveToTop Content for \"Move to Top\" command. Declaration protected static readonly GUIContent CommandMoveToTop Field Value Type Description GUIContent CommandRemove Content for \"Remove\" command. Declaration protected static readonly GUIContent CommandRemove Field Value Type Description GUIContent DefaultContextHandler Default functionality to handle context command. Declaration protected static readonly GenericMenu.MenuFunction2 DefaultContextHandler Field Value Type Description GenericMenu.MenuFunction2 Examples Can be used when adding custom items to the context menu: protected override void AddItemsToMenu(GenericMenu menu, int itemIndex, IReorderableListAdaptor adaptor) { var specialCommand = new GUIContent(\"Special Command\"); menu.AddItem(specialCommand, false, defaultContextHandler, specialCommand); } function AddItemsToMenu(menu:GenericMenu, itemIndex:int, list:IReorderableListAdaptor) { var specialCommand = new GUIContent('Special Command'); menu.AddItem(specialCommand, false, defaultContextHandler, specialCommand); } See Also AddItemsToMenu(GenericMenu, Int32, IReorderableListAdaptor) TargetBackgroundColor Background color of target slot when dragging list item. Declaration public static readonly Color TargetBackgroundColor Field Value Type Description Color Properties ContainerStyle Gets or sets style used to draw background of list control. Declaration public GUIStyle ContainerStyle { get; set; } Property Value Type Description GUIStyle See Also Container CurrentItemTotalPosition Gets the total position of the list item that is currently being drawn. Declaration public static Rect CurrentItemTotalPosition { get; } Property Value Type Description Rect Remarks The value of this property should be ignored for type events when using reorderable list controls with automatic layout. CurrentListControlID Gets the control ID of the list that is currently being drawn. Declaration public static int CurrentListControlID { get; } Property Value Type Description Int32 CurrentListPosition Gets the position of the list control that is currently being drawn. Declaration public static Rect CurrentListPosition { get; } Property Value Type Description Rect Remarks The value of this property should be ignored for type events when using reorderable list controls with automatic layout. Flags Gets or sets flags which affect behavior of control. Declaration public ReorderableListFlags Flags { get; set; } Property Value Type Description ReorderableListFlags FooterButtonStyle Gets or sets style used to draw footer buttons. Declaration public GUIStyle FooterButtonStyle { get; set; } Property Value Type Description GUIStyle See Also FooterButton HorizontalLineAtEnd Gets or sets a boolean value indicating whether a horizontal line should be shown below the last list item at the end of the list control. Declaration public bool HorizontalLineAtEnd { get; set; } Property Value Type Description Boolean Remarks Horizontal line is not drawn for an empty list regardless of the value of this property. HorizontalLineAtStart Gets or sets a boolean value indicating whether a horizontal line should be shown above the first list item at the start of the list control. Declaration public bool HorizontalLineAtStart { get; set; } Property Value Type Description Boolean Remarks Horizontal line is not drawn for an empty list regardless of the value of this property. HorizontalLineColor Gets or sets the color of the horizontal lines that appear between list items. Declaration public Color HorizontalLineColor { get; set; } Property Value Type Description Color ItemButtonStyle Gets or sets style used to draw list item buttons (like the remove button). Declaration public GUIStyle ItemButtonStyle { get; set; } Property Value Type Description GUIStyle See Also ItemButton Methods AddItem(IReorderableListAdaptor) Add item at end of list and raises the event ItemInserted . Declaration protected void AddItem(IReorderableListAdaptor adaptor) Parameters Type Name Description IReorderableListAdaptor adaptor Reorderable list adaptor. AddItemsToMenu(GenericMenu, Int32, IReorderableListAdaptor) Invoked to generate context menu for list item. Declaration protected virtual void AddItemsToMenu(GenericMenu menu, int itemIndex, IReorderableListAdaptor adaptor) Parameters Type Name Description GenericMenu menu Menu which can be populated. Int32 itemIndex Zero-based index of item which was right-clicked. IReorderableListAdaptor adaptor Reorderable list adaptor. CalculateListHeight(IReorderableListAdaptor) Calculate height of list control in pixels. Declaration public float CalculateListHeight(IReorderableListAdaptor adaptor) Parameters Type Name Description IReorderableListAdaptor adaptor Reorderable list adaptor. Returns Type Description Single Required list height in pixels. CalculateListHeight(Int32, Single) Calculate height of list control in pixels. Declaration public float CalculateListHeight(int itemCount, float itemHeight) Parameters Type Name Description Int32 itemCount Count of items in list. Single itemHeight Fixed height of list item. Returns Type Description Single Required list height in pixels. ClearAll(IReorderableListAdaptor) Remove all items from list. Declaration protected bool ClearAll(IReorderableListAdaptor adaptor) Parameters Type Name Description IReorderableListAdaptor adaptor Reorderable list adaptor. Returns Type Description Boolean Returns a value of false if operation was cancelled. Remarks The event ItemRemoving is raised for each item prior to clearing array and allows entire operation to be cancelled. DoCommand(GUIContent, Int32, IReorderableListAdaptor) Call to manually perform command. Declaration public bool DoCommand(GUIContent command, int itemIndex, IReorderableListAdaptor adaptor) Parameters Type Name Description GUIContent command Content representing command. Int32 itemIndex Zero-based index of item which was right-clicked. IReorderableListAdaptor adaptor Reorderable list adaptor. Returns Type Description Boolean A value of true if command was known; otherwise false . Remarks Warning message is logged to console if attempted to execute unknown command. DoCommand(String, Int32, IReorderableListAdaptor) Call to manually perform command. Declaration public bool DoCommand(string commandName, int itemIndex, IReorderableListAdaptor adaptor) Parameters Type Name Description String commandName Name of command. This is the text shown in the context menu. Int32 itemIndex Zero-based index of item which was right-clicked. IReorderableListAdaptor adaptor Reorderable list adaptor. Returns Type Description Boolean A value of true if command was known; otherwise false . Remarks Warning message is logged to console if attempted to execute unknown command. Draw(IReorderableListAdaptor) Declaration public void Draw(IReorderableListAdaptor adaptor) Parameters Type Name Description IReorderableListAdaptor adaptor Draw(IReorderableListAdaptor, ReorderableListControl.DrawEmpty) Declaration public void Draw(IReorderableListAdaptor adaptor, ReorderableListControl.DrawEmpty drawEmpty) Parameters Type Name Description IReorderableListAdaptor adaptor ReorderableListControl.DrawEmpty drawEmpty Draw(Rect, IReorderableListAdaptor) Draw list control with absolute positioning. Declaration public void Draw(Rect position, IReorderableListAdaptor adaptor) Parameters Type Name Description Rect position IReorderableListAdaptor adaptor Draw(Rect, IReorderableListAdaptor, ReorderableListControl.DrawEmptyAbsolute) Draw list control with absolute positioning. Declaration public void Draw(Rect position, IReorderableListAdaptor adaptor, ReorderableListControl.DrawEmptyAbsolute drawEmpty) Parameters Type Name Description Rect position Position of list control in GUI. IReorderableListAdaptor adaptor Reorderable list adaptor. ReorderableListControl.DrawEmptyAbsolute drawEmpty Delegate for drawing empty list. DrawControlFromState(IReorderableListAdaptor, ReorderableListControl.DrawEmpty, ReorderableListFlags) Generate and draw control from state object. Declaration public static void DrawControlFromState(IReorderableListAdaptor adaptor, ReorderableListControl.DrawEmpty drawEmpty, ReorderableListFlags flags) Parameters Type Name Description IReorderableListAdaptor adaptor Reorderable list adaptor. ReorderableListControl.DrawEmpty drawEmpty Delegate for drawing empty list. ReorderableListFlags flags Optional flags to pass into list field. DrawControlFromState(Rect, IReorderableListAdaptor, ReorderableListControl.DrawEmptyAbsolute, ReorderableListFlags) Generate and draw control from state object. Declaration public static void DrawControlFromState(Rect position, IReorderableListAdaptor adaptor, ReorderableListControl.DrawEmptyAbsolute drawEmpty, ReorderableListFlags flags) Parameters Type Name Description Rect position Position of control. IReorderableListAdaptor adaptor Reorderable list adaptor. ReorderableListControl.DrawEmptyAbsolute drawEmpty Delegate for drawing empty list. ReorderableListFlags flags Optional flags to pass into list field. DrawDropIndicator(Rect) Draws drop insertion indicator. Declaration protected virtual void DrawDropIndicator(Rect position) Parameters Type Name Description Rect position Position if the drop indicator. Remarks This method is only ever called during repaint events. DuplicateItem(IReorderableListAdaptor, Int32) Duplicate specified item and raises the event ItemInserted . Declaration protected void DuplicateItem(IReorderableListAdaptor adaptor, int itemIndex) Parameters Type Name Description IReorderableListAdaptor adaptor Reorderable list adaptor. Int32 itemIndex Zero-based index of item. HandleCommand(String, Int32, IReorderableListAdaptor) Invoked to handle context command. Declaration protected virtual bool HandleCommand(string commandName, int itemIndex, IReorderableListAdaptor adaptor) Parameters Type Name Description String commandName Name of command. This is the text shown in the context menu. Int32 itemIndex Zero-based index of item which was right-clicked. IReorderableListAdaptor adaptor Reorderable list adaptor. Returns Type Description Boolean A value of true if command was known; otherwise false . Remarks It is important to set the value of GUI.changed to true if any changes are made by command handler. Default command handling functionality can be inherited: protected override bool HandleCommand(string commandName, int itemIndex, IReorderableListAdaptor adaptor) { if (base.HandleCommand(itemIndex, adaptor)) return true; // Place custom command handling code here... switch (commandName) { case \"Your Command\": return true; } return false; } function HandleCommand(commandName:String, itemIndex:int, adaptor:IReorderableListAdaptor):boolean { if (base.HandleCommand(itemIndex, adaptor)) return true; // Place custom command handling code here... switch (commandName) { case 'Your Command': return true; } return false; } InsertItem(IReorderableListAdaptor, Int32) Insert item at specified index and raises the event ItemInserted . Declaration protected void InsertItem(IReorderableListAdaptor adaptor, int itemIndex) Parameters Type Name Description IReorderableListAdaptor adaptor Reorderable list adaptor. Int32 itemIndex Zero-based index of item. MoveItem(IReorderableListAdaptor, Int32, Int32) Move item from source index to destination index. Declaration protected void MoveItem(IReorderableListAdaptor adaptor, int sourceIndex, int destIndex) Parameters Type Name Description IReorderableListAdaptor adaptor Reorderable list adaptor. Int32 sourceIndex Zero-based index of source item. Int32 destIndex Zero-based index of destination index. OnAddMenuClicked(AddMenuClickedEventArgs) Raises event when add menu button is clicked. Declaration protected virtual void OnAddMenuClicked(AddMenuClickedEventArgs args) Parameters Type Name Description AddMenuClickedEventArgs args Event arguments. OnItemInserted(ItemInsertedEventArgs) Raises event after list item is inserted or duplicated. Declaration protected virtual void OnItemInserted(ItemInsertedEventArgs args) Parameters Type Name Description ItemInsertedEventArgs args Event arguments. OnItemMoved(ItemMovedEventArgs) Raises event after list item has been moved. Declaration protected virtual void OnItemMoved(ItemMovedEventArgs args) Parameters Type Name Description ItemMovedEventArgs args Event arguments. OnItemMoving(ItemMovingEventArgs) Raises event immediately before list item is moved and provides oppertunity to cancel. Declaration protected virtual void OnItemMoving(ItemMovingEventArgs args) Parameters Type Name Description ItemMovingEventArgs args Event arguments. OnItemRemoving(ItemRemovingEventArgs) Raises event before list item is removed and provides oppertunity to cancel. Declaration protected virtual void OnItemRemoving(ItemRemovingEventArgs args) Parameters Type Name Description ItemRemovingEventArgs args Event arguments. RemoveItem(IReorderableListAdaptor, Int32) Remove specified item. Declaration protected bool RemoveItem(IReorderableListAdaptor adaptor, int itemIndex) Parameters Type Name Description IReorderableListAdaptor adaptor Reorderable list adaptor. Int32 itemIndex Zero-based index of item. Returns Type Description Boolean Returns a value of false if operation was cancelled. Remarks The event ItemRemoving is raised prior to removing item and allows removal to be cancelled. Events AddMenuClicked Occurs when add menu button is clicked. Declaration public event AddMenuClickedEventHandler AddMenuClicked Event Type Type Description AddMenuClickedEventHandler Remarks Add menu button is only shown when there is at least one subscriber to this event. ItemInserted Occurs after list item is inserted or duplicated. Declaration public event ItemInsertedEventHandler ItemInserted Event Type Type Description ItemInsertedEventHandler ItemMoved Occurs after list item has been moved. Declaration public event ItemMovedEventHandler ItemMoved Event Type Type Description ItemMovedEventHandler ItemMoving Occurs immediately before list item is moved allowing for move operation to be cancelled. Declaration public event ItemMovingEventHandler ItemMoving Event Type Type Description ItemMovingEventHandler ItemRemoving Occurs before list item is removed and allowing for remove operation to be cancelled. Declaration public event ItemRemovingEventHandler ItemRemoving Event Type Type Description ItemRemovingEventHandler"
  },
  "api/Borodar.ReorderableList.ReorderableListControl.ItemDrawer-1.html": {
    "href": "api/Borodar.ReorderableList.ReorderableListControl.ItemDrawer-1.html",
    "title": "Delegate ReorderableListControl.ItemDrawer<T> | Heroes of the Shrine",
    "keywords": "Delegate ReorderableListControl.ItemDrawer<T> Invoked to draw list item. Namespace : Borodar.ReorderableList Assembly : cs.temp.dll.dll Syntax public delegate T ItemDrawer<T>(Rect position, T item); Parameters Type Name Description Rect position Position of list item. T item The list item. Returns Type Description T The modified value. Type Parameters Name Description T Type of item list. Remarks GUI controls must be positioned absolutely within the given rectangle since list items must be sized consistently. Examples The following listing presents a text field for each list item: using Rotorz.ReorderableList; using System.Collections.Generic; using UnityEditor; using UnityEngine; public class ExampleWindow : EditorWindow { public List<string> wishlist = new List<string>(); private void OnGUI() { ReorderableListGUI.ListField(wishlist, DrawListItem); } private string DrawListItem(Rect position, string value) { // Text fields do not like `null` values! if (value == null) value = \"\"; return EditorGUI.TextField(position, value); } } import Rotorz.ReorderableList; import System.Collections.Generic; class ExampleWindow extends EditorWindow { var wishlist:List.<String>; function OnGUI() { ReorderableListGUI.ListField(wishlist, DrawListItem); } function DrawListItem(position:Rect, value:String):String { // Text fields do not like `null` values! if (value == null) value = ''; return EditorGUI.TextField(position, value); } }"
  },
  "api/Borodar.ReorderableList.ReorderableListFlags.html": {
    "href": "api/Borodar.ReorderableList.ReorderableListFlags.html",
    "title": "Enum ReorderableListFlags | Heroes of the Shrine",
    "keywords": "Enum ReorderableListFlags Additional flags which can be passed into reorderable list field. Namespace : Borodar.ReorderableList Assembly : cs.temp.dll.dll Syntax public enum ReorderableListFlags Examples Multiple flags can be specified if desired: var flags = ReorderableListFlags.HideAddButton | ReorderableListFlags.HideRemoveButtons; ReorderableListGUI.ListField(list, flags); Fields Name Description DisableAutoFocus Do not automatically focus first control of newly added items. DisableAutoScroll Do not attempt to automatically scroll when list is inside a scroll view and the mouse pointer is dragged outside of the visible portion of the list. DisableClipping DisableContextMenu Do not display context menu upon right-clicking grab handle. DisableDuplicateCommand Hide \"Duplicate\" option from context menu. DisableReordering Hide grab handles and disable reordering of list items. HideAddButton Hide add button at base of control. HideRemoveButtons Hide remove buttons from list items. ShowIndices Show zero-based index of array elements."
  },
  "api/Borodar.ReorderableList.ReorderableListGUI.html": {
    "href": "api/Borodar.ReorderableList.ReorderableListGUI.html",
    "title": "Class ReorderableListGUI | Heroes of the Shrine",
    "keywords": "Class ReorderableListGUI Utility class for drawing reorderable lists. Inheritance Object ReorderableListGUI Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Borodar.ReorderableList Assembly : cs.temp.dll.dll Syntax public static class ReorderableListGUI Fields DefaultItemHeight Default list item height is 18 pixels. Declaration public const float DefaultItemHeight = 18F Field Value Type Description Single Properties CurrentItemIndex Gets the zero-based index of the list item that is currently being drawn; or a value of -1 if no item is currently being drawn. Declaration public static int CurrentItemIndex { get; } Property Value Type Description Int32 CurrentItemTotalPosition Gets the total position of the list item that is currently being drawn. Declaration public static Rect CurrentItemTotalPosition { get; } Property Value Type Description Rect Remarks The value of this property should be ignored for type events when using reorderable list controls with automatic layout. CurrentListControlID Gets the control ID of the list that is currently being drawn. Declaration public static int CurrentListControlID { get; } Property Value Type Description Int32 CurrentListPosition Gets the position of the list control that is currently being drawn. Declaration public static Rect CurrentListPosition { get; } Property Value Type Description Rect Remarks The value of this property should be ignored for type events when using reorderable list controls with automatic layout. IndexOfChangedItem Gets or sets the zero-based index of the last item that was changed. A value of -1 indicates that no item was changed by list. Declaration public static int IndexOfChangedItem { get; } Property Value Type Description Int32 Remarks This property should not be set when items are added or removed. Methods CalculateListFieldHeight(IReorderableListAdaptor) Calculate height of list field for adapted collection. Declaration public static float CalculateListFieldHeight(IReorderableListAdaptor adaptor) Parameters Type Name Description IReorderableListAdaptor adaptor Returns Type Description Single Required list height in pixels. CalculateListFieldHeight(IReorderableListAdaptor, ReorderableListFlags) Calculate height of list field for adapted collection. Declaration public static float CalculateListFieldHeight(IReorderableListAdaptor adaptor, ReorderableListFlags flags) Parameters Type Name Description IReorderableListAdaptor adaptor Reorderable list adaptor. ReorderableListFlags flags Optional flags to pass into list field. Returns Type Description Single Required list height in pixels. CalculateListFieldHeight(SerializedProperty) Calculate height of list field for absolute positioning. Declaration public static float CalculateListFieldHeight(SerializedProperty arrayProperty) Parameters Type Name Description SerializedProperty arrayProperty Returns Type Description Single Required list height in pixels. CalculateListFieldHeight(SerializedProperty, ReorderableListFlags) Calculate height of list field for absolute positioning. Declaration public static float CalculateListFieldHeight(SerializedProperty arrayProperty, ReorderableListFlags flags) Parameters Type Name Description SerializedProperty arrayProperty Serializable property. ReorderableListFlags flags Optional flags to pass into list field. Returns Type Description Single Required list height in pixels. CalculateListFieldHeight(Int32) Calculate height of list field for absolute positioning. Declaration public static float CalculateListFieldHeight(int itemCount) Parameters Type Name Description Int32 itemCount Returns Type Description Single Required list height in pixels. CalculateListFieldHeight(Int32, ReorderableListFlags) Calculate height of list field for absolute positioning. Declaration public static float CalculateListFieldHeight(int itemCount, ReorderableListFlags flags) Parameters Type Name Description Int32 itemCount ReorderableListFlags flags Returns Type Description Single Required list height in pixels. CalculateListFieldHeight(Int32, Single) Calculate height of list field for absolute positioning. Declaration public static float CalculateListFieldHeight(int itemCount, float itemHeight) Parameters Type Name Description Int32 itemCount Single itemHeight Returns Type Description Single Required list height in pixels. CalculateListFieldHeight(Int32, Single, ReorderableListFlags) Calculate height of list field for absolute positioning. Declaration public static float CalculateListFieldHeight(int itemCount, float itemHeight, ReorderableListFlags flags) Parameters Type Name Description Int32 itemCount Count of items in list. Single itemHeight Fixed height of list item. ReorderableListFlags flags Optional flags to pass into list field. Returns Type Description Single Required list height in pixels. DefaultItemDrawer<T>(Rect, T) Default list item drawer implementation. Declaration public static T DefaultItemDrawer<T>(Rect position, T item) Parameters Type Name Description Rect position Position to draw list item control(s). T item Value of list item. Returns Type Description T Unmodified value of list item. Type Parameters Name Description T Type of list item. Remarks Always presents the label \"Item drawer not implemented.\". ListField(IReorderableListAdaptor) Declaration public static void ListField(IReorderableListAdaptor adaptor) Parameters Type Name Description IReorderableListAdaptor adaptor ListField(IReorderableListAdaptor, ReorderableListControl.DrawEmpty) Declaration public static void ListField(IReorderableListAdaptor adaptor, ReorderableListControl.DrawEmpty drawEmpty) Parameters Type Name Description IReorderableListAdaptor adaptor ReorderableListControl.DrawEmpty drawEmpty ListField(IReorderableListAdaptor, ReorderableListControl.DrawEmpty, ReorderableListFlags) Declaration public static void ListField(IReorderableListAdaptor adaptor, ReorderableListControl.DrawEmpty drawEmpty, ReorderableListFlags flags) Parameters Type Name Description IReorderableListAdaptor adaptor ReorderableListControl.DrawEmpty drawEmpty ReorderableListFlags flags ListField(IReorderableListAdaptor, ReorderableListFlags) Declaration public static void ListField(IReorderableListAdaptor adaptor, ReorderableListFlags flags) Parameters Type Name Description IReorderableListAdaptor adaptor ReorderableListFlags flags ListField(SerializedProperty) Declaration public static void ListField(SerializedProperty arrayProperty) Parameters Type Name Description SerializedProperty arrayProperty ListField(SerializedProperty, ReorderableListControl.DrawEmpty) Declaration public static void ListField(SerializedProperty arrayProperty, ReorderableListControl.DrawEmpty drawEmpty) Parameters Type Name Description SerializedProperty arrayProperty ReorderableListControl.DrawEmpty drawEmpty ListField(SerializedProperty, ReorderableListControl.DrawEmpty, ReorderableListFlags) Declaration public static void ListField(SerializedProperty arrayProperty, ReorderableListControl.DrawEmpty drawEmpty, ReorderableListFlags flags) Parameters Type Name Description SerializedProperty arrayProperty ReorderableListControl.DrawEmpty drawEmpty ReorderableListFlags flags ListField(SerializedProperty, ReorderableListFlags) Declaration public static void ListField(SerializedProperty arrayProperty, ReorderableListFlags flags) Parameters Type Name Description SerializedProperty arrayProperty ReorderableListFlags flags ListField(SerializedProperty, Single) Declaration public static void ListField(SerializedProperty arrayProperty, float fixedItemHeight) Parameters Type Name Description SerializedProperty arrayProperty Single fixedItemHeight ListField(SerializedProperty, Single, ReorderableListControl.DrawEmpty) Declaration public static void ListField(SerializedProperty arrayProperty, float fixedItemHeight, ReorderableListControl.DrawEmpty drawEmpty) Parameters Type Name Description SerializedProperty arrayProperty Single fixedItemHeight ReorderableListControl.DrawEmpty drawEmpty ListField(SerializedProperty, Single, ReorderableListControl.DrawEmpty, ReorderableListFlags) Declaration public static void ListField(SerializedProperty arrayProperty, float fixedItemHeight, ReorderableListControl.DrawEmpty drawEmpty, ReorderableListFlags flags) Parameters Type Name Description SerializedProperty arrayProperty Single fixedItemHeight ReorderableListControl.DrawEmpty drawEmpty ReorderableListFlags flags ListField(SerializedProperty, Single, ReorderableListFlags) Declaration public static void ListField(SerializedProperty arrayProperty, float fixedItemHeight, ReorderableListFlags flags) Parameters Type Name Description SerializedProperty arrayProperty Single fixedItemHeight ReorderableListFlags flags ListField<T>(IList<T>, ReorderableListControl.ItemDrawer<T>) Declaration public static void ListField<T>(IList<T> list, ReorderableListControl.ItemDrawer<T> drawItem) Parameters Type Name Description IList <T> list ReorderableListControl.ItemDrawer <T> drawItem Type Parameters Name Description T ListField<T>(IList<T>, ReorderableListControl.ItemDrawer<T>, ReorderableListControl.DrawEmpty) Declaration public static void ListField<T>(IList<T> list, ReorderableListControl.ItemDrawer<T> drawItem, ReorderableListControl.DrawEmpty drawEmpty) Parameters Type Name Description IList <T> list ReorderableListControl.ItemDrawer <T> drawItem ReorderableListControl.DrawEmpty drawEmpty Type Parameters Name Description T ListField<T>(IList<T>, ReorderableListControl.ItemDrawer<T>, ReorderableListControl.DrawEmpty, ReorderableListFlags) Declaration public static void ListField<T>(IList<T> list, ReorderableListControl.ItemDrawer<T> drawItem, ReorderableListControl.DrawEmpty drawEmpty, ReorderableListFlags flags) Parameters Type Name Description IList <T> list ReorderableListControl.ItemDrawer <T> drawItem ReorderableListControl.DrawEmpty drawEmpty ReorderableListFlags flags Type Parameters Name Description T ListField<T>(IList<T>, ReorderableListControl.ItemDrawer<T>, ReorderableListControl.DrawEmpty, Single) Declaration public static void ListField<T>(IList<T> list, ReorderableListControl.ItemDrawer<T> drawItem, ReorderableListControl.DrawEmpty drawEmpty, float itemHeight) Parameters Type Name Description IList <T> list ReorderableListControl.ItemDrawer <T> drawItem ReorderableListControl.DrawEmpty drawEmpty Single itemHeight Type Parameters Name Description T ListField<T>(IList<T>, ReorderableListControl.ItemDrawer<T>, ReorderableListControl.DrawEmpty, Single, ReorderableListFlags) Declaration public static void ListField<T>(IList<T> list, ReorderableListControl.ItemDrawer<T> drawItem, ReorderableListControl.DrawEmpty drawEmpty, float itemHeight, ReorderableListFlags flags) Parameters Type Name Description IList <T> list ReorderableListControl.ItemDrawer <T> drawItem ReorderableListControl.DrawEmpty drawEmpty Single itemHeight ReorderableListFlags flags Type Parameters Name Description T ListField<T>(IList<T>, ReorderableListControl.ItemDrawer<T>, ReorderableListFlags) Declaration public static void ListField<T>(IList<T> list, ReorderableListControl.ItemDrawer<T> drawItem, ReorderableListFlags flags) Parameters Type Name Description IList <T> list ReorderableListControl.ItemDrawer <T> drawItem ReorderableListFlags flags Type Parameters Name Description T ListField<T>(IList<T>, ReorderableListControl.ItemDrawer<T>, Single) Declaration public static void ListField<T>(IList<T> list, ReorderableListControl.ItemDrawer<T> drawItem, float itemHeight) Parameters Type Name Description IList <T> list ReorderableListControl.ItemDrawer <T> drawItem Single itemHeight Type Parameters Name Description T ListField<T>(IList<T>, ReorderableListControl.ItemDrawer<T>, Single, ReorderableListFlags) Declaration public static void ListField<T>(IList<T> list, ReorderableListControl.ItemDrawer<T> drawItem, float itemHeight, ReorderableListFlags flags) Parameters Type Name Description IList <T> list ReorderableListControl.ItemDrawer <T> drawItem Single itemHeight ReorderableListFlags flags Type Parameters Name Description T ListFieldAbsolute(Rect, IReorderableListAdaptor) Declaration public static void ListFieldAbsolute(Rect position, IReorderableListAdaptor adaptor) Parameters Type Name Description Rect position IReorderableListAdaptor adaptor ListFieldAbsolute(Rect, IReorderableListAdaptor, ReorderableListControl.DrawEmptyAbsolute) Declaration public static void ListFieldAbsolute(Rect position, IReorderableListAdaptor adaptor, ReorderableListControl.DrawEmptyAbsolute drawEmpty) Parameters Type Name Description Rect position IReorderableListAdaptor adaptor ReorderableListControl.DrawEmptyAbsolute drawEmpty ListFieldAbsolute(Rect, IReorderableListAdaptor, ReorderableListControl.DrawEmptyAbsolute, ReorderableListFlags) Declaration public static void ListFieldAbsolute(Rect position, IReorderableListAdaptor adaptor, ReorderableListControl.DrawEmptyAbsolute drawEmpty, ReorderableListFlags flags) Parameters Type Name Description Rect position IReorderableListAdaptor adaptor ReorderableListControl.DrawEmptyAbsolute drawEmpty ReorderableListFlags flags ListFieldAbsolute(Rect, IReorderableListAdaptor, ReorderableListFlags) Declaration public static void ListFieldAbsolute(Rect position, IReorderableListAdaptor adaptor, ReorderableListFlags flags) Parameters Type Name Description Rect position IReorderableListAdaptor adaptor ReorderableListFlags flags ListFieldAbsolute(Rect, SerializedProperty) Declaration public static void ListFieldAbsolute(Rect position, SerializedProperty arrayProperty) Parameters Type Name Description Rect position SerializedProperty arrayProperty ListFieldAbsolute(Rect, SerializedProperty, ReorderableListControl.DrawEmptyAbsolute) Declaration public static void ListFieldAbsolute(Rect position, SerializedProperty arrayProperty, ReorderableListControl.DrawEmptyAbsolute drawEmpty) Parameters Type Name Description Rect position SerializedProperty arrayProperty ReorderableListControl.DrawEmptyAbsolute drawEmpty ListFieldAbsolute(Rect, SerializedProperty, ReorderableListControl.DrawEmptyAbsolute, ReorderableListFlags) Declaration public static void ListFieldAbsolute(Rect position, SerializedProperty arrayProperty, ReorderableListControl.DrawEmptyAbsolute drawEmpty, ReorderableListFlags flags) Parameters Type Name Description Rect position SerializedProperty arrayProperty ReorderableListControl.DrawEmptyAbsolute drawEmpty ReorderableListFlags flags ListFieldAbsolute(Rect, SerializedProperty, ReorderableListFlags) Declaration public static void ListFieldAbsolute(Rect position, SerializedProperty arrayProperty, ReorderableListFlags flags) Parameters Type Name Description Rect position SerializedProperty arrayProperty ReorderableListFlags flags ListFieldAbsolute(Rect, SerializedProperty, Single) Declaration public static void ListFieldAbsolute(Rect position, SerializedProperty arrayProperty, float fixedItemHeight) Parameters Type Name Description Rect position SerializedProperty arrayProperty Single fixedItemHeight ListFieldAbsolute(Rect, SerializedProperty, Single, ReorderableListControl.DrawEmptyAbsolute) Declaration public static void ListFieldAbsolute(Rect position, SerializedProperty arrayProperty, float fixedItemHeight, ReorderableListControl.DrawEmptyAbsolute drawEmpty) Parameters Type Name Description Rect position SerializedProperty arrayProperty Single fixedItemHeight ReorderableListControl.DrawEmptyAbsolute drawEmpty ListFieldAbsolute(Rect, SerializedProperty, Single, ReorderableListControl.DrawEmptyAbsolute, ReorderableListFlags) Declaration public static void ListFieldAbsolute(Rect position, SerializedProperty arrayProperty, float fixedItemHeight, ReorderableListControl.DrawEmptyAbsolute drawEmpty, ReorderableListFlags flags) Parameters Type Name Description Rect position SerializedProperty arrayProperty Single fixedItemHeight ReorderableListControl.DrawEmptyAbsolute drawEmpty ReorderableListFlags flags ListFieldAbsolute(Rect, SerializedProperty, Single, ReorderableListFlags) Declaration public static void ListFieldAbsolute(Rect position, SerializedProperty arrayProperty, float fixedItemHeight, ReorderableListFlags flags) Parameters Type Name Description Rect position SerializedProperty arrayProperty Single fixedItemHeight ReorderableListFlags flags ListFieldAbsolute<T>(Rect, IList<T>, ReorderableListControl.ItemDrawer<T>) Declaration public static void ListFieldAbsolute<T>(Rect position, IList<T> list, ReorderableListControl.ItemDrawer<T> drawItem) Parameters Type Name Description Rect position IList <T> list ReorderableListControl.ItemDrawer <T> drawItem Type Parameters Name Description T ListFieldAbsolute<T>(Rect, IList<T>, ReorderableListControl.ItemDrawer<T>, ReorderableListControl.DrawEmptyAbsolute) Declaration public static void ListFieldAbsolute<T>(Rect position, IList<T> list, ReorderableListControl.ItemDrawer<T> drawItem, ReorderableListControl.DrawEmptyAbsolute drawEmpty) Parameters Type Name Description Rect position IList <T> list ReorderableListControl.ItemDrawer <T> drawItem ReorderableListControl.DrawEmptyAbsolute drawEmpty Type Parameters Name Description T ListFieldAbsolute<T>(Rect, IList<T>, ReorderableListControl.ItemDrawer<T>, ReorderableListControl.DrawEmptyAbsolute, ReorderableListFlags) Declaration public static void ListFieldAbsolute<T>(Rect position, IList<T> list, ReorderableListControl.ItemDrawer<T> drawItem, ReorderableListControl.DrawEmptyAbsolute drawEmpty, ReorderableListFlags flags) Parameters Type Name Description Rect position IList <T> list ReorderableListControl.ItemDrawer <T> drawItem ReorderableListControl.DrawEmptyAbsolute drawEmpty ReorderableListFlags flags Type Parameters Name Description T ListFieldAbsolute<T>(Rect, IList<T>, ReorderableListControl.ItemDrawer<T>, ReorderableListControl.DrawEmptyAbsolute, Single) Declaration public static void ListFieldAbsolute<T>(Rect position, IList<T> list, ReorderableListControl.ItemDrawer<T> drawItem, ReorderableListControl.DrawEmptyAbsolute drawEmpty, float itemHeight) Parameters Type Name Description Rect position IList <T> list ReorderableListControl.ItemDrawer <T> drawItem ReorderableListControl.DrawEmptyAbsolute drawEmpty Single itemHeight Type Parameters Name Description T ListFieldAbsolute<T>(Rect, IList<T>, ReorderableListControl.ItemDrawer<T>, ReorderableListControl.DrawEmptyAbsolute, Single, ReorderableListFlags) Declaration public static void ListFieldAbsolute<T>(Rect position, IList<T> list, ReorderableListControl.ItemDrawer<T> drawItem, ReorderableListControl.DrawEmptyAbsolute drawEmpty, float itemHeight, ReorderableListFlags flags) Parameters Type Name Description Rect position IList <T> list ReorderableListControl.ItemDrawer <T> drawItem ReorderableListControl.DrawEmptyAbsolute drawEmpty Single itemHeight ReorderableListFlags flags Type Parameters Name Description T ListFieldAbsolute<T>(Rect, IList<T>, ReorderableListControl.ItemDrawer<T>, ReorderableListFlags) Declaration public static void ListFieldAbsolute<T>(Rect position, IList<T> list, ReorderableListControl.ItemDrawer<T> drawItem, ReorderableListFlags flags) Parameters Type Name Description Rect position IList <T> list ReorderableListControl.ItemDrawer <T> drawItem ReorderableListFlags flags Type Parameters Name Description T ListFieldAbsolute<T>(Rect, IList<T>, ReorderableListControl.ItemDrawer<T>, Single) Declaration public static void ListFieldAbsolute<T>(Rect position, IList<T> list, ReorderableListControl.ItemDrawer<T> drawItem, float itemHeight) Parameters Type Name Description Rect position IList <T> list ReorderableListControl.ItemDrawer <T> drawItem Single itemHeight Type Parameters Name Description T ListFieldAbsolute<T>(Rect, IList<T>, ReorderableListControl.ItemDrawer<T>, Single, ReorderableListFlags) Declaration public static void ListFieldAbsolute<T>(Rect position, IList<T> list, ReorderableListControl.ItemDrawer<T> drawItem, float itemHeight, ReorderableListFlags flags) Parameters Type Name Description Rect position IList <T> list ReorderableListControl.ItemDrawer <T> drawItem Single itemHeight ReorderableListFlags flags Type Parameters Name Description T TextFieldItemDrawer(Rect, String) Draws text field allowing list items to be edited. Declaration public static string TextFieldItemDrawer(Rect position, string item) Parameters Type Name Description Rect position Position to draw list item control(s). String item Value of list item. Returns Type Description String Modified value of list item. Remarks Null values are automatically changed to empty strings since null values cannot be edited using a text field. Value of GUI.changed is set to true if value of item is modified. Title(GUIContent) Draw title control for list field. Declaration public static void Title(GUIContent title) Parameters Type Name Description GUIContent title Content for title control. Remarks When needed, should be shown immediately before list field. Examples ReorderableListGUI.Title(titleContent); ReorderableListGUI.ListField(list, DynamicListGU.TextFieldItemDrawer); ReorderableListGUI.Title(titleContent); ReorderableListGUI.ListField(list, DynamicListGU.TextFieldItemDrawer); Title(Rect, GUIContent) Draw title control for list field with absolute positioning. Declaration public static void Title(Rect position, GUIContent title) Parameters Type Name Description Rect position Position of control. GUIContent title Content for title control. Title(Rect, String) Draw title control for list field with absolute positioning. Declaration public static void Title(Rect position, string text) Parameters Type Name Description Rect position Position of control. String text Text for title control. Title(String) Draw title control for list field. Declaration public static void Title(string title) Parameters Type Name Description String title Text for title control. Remarks When needed, should be shown immediately before list field. Examples ReorderableListGUI.Title(\"Your Title\"); ReorderableListGUI.ListField(list, DynamicListGU.TextFieldItemDrawer); ReorderableListGUI.Title('Your Title'); ReorderableListGUI.ListField(list, DynamicListGU.TextFieldItemDrawer);"
  },
  "api/Borodar.ReorderableList.ReorderableListStyles.html": {
    "href": "api/Borodar.ReorderableList.ReorderableListStyles.html",
    "title": "Class ReorderableListStyles | Heroes of the Shrine",
    "keywords": "Class ReorderableListStyles Styles for the ReorderableListControl . Inheritance Object ReorderableListStyles Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Borodar.ReorderableList Assembly : cs.temp.dll.dll Syntax public static class ReorderableListStyles Properties Container Gets style for the background of list control. Declaration public static GUIStyle Container { get; } Property Value Type Description GUIStyle Container2 Gets an alternative style for the background of list control. Declaration public static GUIStyle Container2 { get; } Property Value Type Description GUIStyle FooterButton Gets style for footer button. Declaration public static GUIStyle FooterButton { get; } Property Value Type Description GUIStyle FooterButton2 Gets an alternative style for footer button. Declaration public static GUIStyle FooterButton2 { get; } Property Value Type Description GUIStyle HorizontalLineColor Gets color for the horizontal lines that appear between list items. Declaration public static Color HorizontalLineColor { get; } Property Value Type Description Color ItemButton Gets style for remove item button. Declaration public static GUIStyle ItemButton { get; } Property Value Type Description GUIStyle SelectedItem Gets style for the background of a selected item. Declaration public static GUIStyle SelectedItem { get; } Property Value Type Description GUIStyle SelectionBackgroundColor Gets color of background for a selected list item. Declaration public static Color SelectionBackgroundColor { get; } Property Value Type Description Color Title Gets style for title header. Declaration public static GUIStyle Title { get; } Property Value Type Description GUIStyle"
  },
  "api/Borodar.ReorderableList.SerializedPropertyAdaptor.html": {
    "href": "api/Borodar.ReorderableList.SerializedPropertyAdaptor.html",
    "title": "Class SerializedPropertyAdaptor | Heroes of the Shrine",
    "keywords": "Class SerializedPropertyAdaptor Reorderable list adaptor for serialized array property. Inheritance Object SerializedPropertyAdaptor Implements IReorderableListAdaptor Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Borodar.ReorderableList Assembly : cs.temp.dll.dll Syntax public class SerializedPropertyAdaptor : IReorderableListAdaptor Remarks This adaptor can be subclassed to add special logic to item height calculation. You may want to implement a custom adaptor class where specialised functionality is needed. List elements are not cloned using the ICloneable interface when using a to manipulate lists. Constructors SerializedPropertyAdaptor(SerializedProperty) Initializes a new instance of SerializedPropertyAdaptor . Declaration public SerializedPropertyAdaptor(SerializedProperty arrayProperty) Parameters Type Name Description SerializedProperty arrayProperty Serialized property for entire array. SerializedPropertyAdaptor(SerializedProperty, Single) Initializes a new instance of SerializedPropertyAdaptor . Declaration public SerializedPropertyAdaptor(SerializedProperty arrayProperty, float fixedItemHeight) Parameters Type Name Description SerializedProperty arrayProperty Serialized property for entire array. Single fixedItemHeight Non-zero height overrides property drawer height calculation. Fields FixedItemHeight Fixed height of each list item. Declaration public float FixedItemHeight Field Value Type Description Single Remarks Non-zero value overrides property drawer height calculation which is more efficient. Properties arrayProperty Gets the underlying serialized array property. Declaration public SerializedProperty arrayProperty { get; } Property Value Type Description SerializedProperty Count Gets count of elements in list. Declaration public int Count { get; } Property Value Type Description Int32 Item[Int32] Gets element from list. Declaration public SerializedProperty this[int index] { get; } Parameters Type Name Description Int32 index Zero-based index of element. Property Value Type Description SerializedProperty Serialized property wrapper for array element. Methods Add() Add new element at end of list. Declaration public void Add() BeginGUI() Occurs before any list items are drawn. Declaration public virtual void BeginGUI() Remarks This method is only used to handle GUI repaint events. CanDrag(Int32) Determines whether an item can be reordered by dragging mouse. Declaration public virtual bool CanDrag(int index) Parameters Type Name Description Int32 index Zero-based index for list element. Returns Type Description Boolean A value of true if item can be dragged; otherwise false . Remarks This should be a light-weight method since it will be used to determine whether grab handle should be included for each item in a reorderable list. Please note that returning a value of false does not prevent movement on list item since other draggable items can be moved around it. CanRemove(Int32) Determines whether an item can be removed from list. Declaration public virtual bool CanRemove(int index) Parameters Type Name Description Int32 index Zero-based index for list element. Returns Type Description Boolean A value of true if item can be removed; otherwise false . Remarks This should be a light-weight method since it will be used to determine whether remove button should be included for each item in list. This is redundant when HideRemoveButtons is specified. Clear() Clear all elements from list. Declaration public void Clear() DrawItem(Rect, Int32) Draws main interface for a list item. Declaration public virtual void DrawItem(Rect position, int index) Parameters Type Name Description Rect position Position in GUI. Int32 index Zero-based index of array element. Remarks This method is used to handle all GUI events. DrawItemBackground(Rect, Int32) Draws background of a list item. Declaration public virtual void DrawItemBackground(Rect position, int index) Parameters Type Name Description Rect position Total position of list element in GUI. Int32 index Zero-based index of array element. Remarks This method is only used to handle GUI repaint events. Background of list item spans a slightly larger area than the main interface that is drawn by DrawItem(Rect, Int32) since it is drawn behind the grab handle. Duplicate(Int32) Duplicate existing element. Declaration public void Duplicate(int index) Parameters Type Name Description Int32 index Zero-based index of list element. Remarks Consider using the ICloneable interface to duplicate list elements where appropriate. EndGUI() Occurs after all list items have been drawn. Declaration public virtual void EndGUI() Remarks This method is only used to handle GUI repaint events. GetItemHeight(Int32) Gets height of list item in pixels. Declaration public virtual float GetItemHeight(int index) Parameters Type Name Description Int32 index Zero-based index of array element. Returns Type Description Single Measurement in pixels. Insert(Int32) Insert new element at specified index. Declaration public void Insert(int index) Parameters Type Name Description Int32 index Zero-based index for list element. Move(Int32, Int32) Move element from source index to destination index. Declaration public void Move(int sourceIndex, int destIndex) Parameters Type Name Description Int32 sourceIndex Zero-based index of source element. Int32 destIndex Zero-based index of destination element. Remove(Int32) Remove element at specified index. Declaration public void Remove(int index) Parameters Type Name Description Int32 index Zero-based index of list element. Implements IReorderableListAdaptor"
  },
  "api/Global.AbsoluteHitDetector.html": {
    "href": "api/Global.AbsoluteHitDetector.html",
    "title": "Class AbsoluteHitDetector | Heroes of the Shrine",
    "keywords": "Class AbsoluteHitDetector An hit detector that detects hits only in the frame it is started Inheritance Object BaseHitDetector AbsoluteHitDetector Inherited Members BaseHitDetector.hitbox BaseHitDetector.hitParticles BaseHitDetector.includedHittableTags BaseHitDetector.excludedHittableTags BaseHitDetector.onHit BaseHitDetector.StartDetector(Action<HittableHitbox>, Tags) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AbsoluteHitDetector : BaseHitDetector Methods DoStartDetector(Action<HittableHitbox>) Declaration protected override void DoStartDetector(Action<HittableHitbox> hitCallable) Parameters Type Name Description Action < HittableHitbox > hitCallable Overrides BaseHitDetector.DoStartDetector(Action<HittableHitbox>) StopDetector() Declaration public override void StopDetector() Overrides BaseHitDetector.StopDetector()"
  },
  "api/Global.AddIconToHierarchy.html": {
    "href": "api/Global.AddIconToHierarchy.html",
    "title": "Class AddIconToHierarchy | Heroes of the Shrine",
    "keywords": "Class AddIconToHierarchy Inheritance Object AddIconToHierarchy Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AddIconToHierarchy"
  },
  "api/Global.AggressionBrainModule.html": {
    "href": "api/Global.AggressionBrainModule.html",
    "title": "Class AggressionBrainModule | Heroes of the Shrine",
    "keywords": "Class AggressionBrainModule State machine aggression parameter, assigned with a random value (0-1) before each state transition. Can be used for randomizing transitions. Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour BrainModule AggressionBrainModule Inherited Members BrainModule.StateMachine BrainModule.Awake() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AggressionBrainModule : BrainModule Methods GetParameters() Declaration public override string[] GetParameters() Returns Type Description String [] Overrides BrainModule.GetParameters()"
  },
  "api/Global.AirAttack.html": {
    "href": "api/Global.AirAttack.html",
    "title": "Class AirAttack | Heroes of the Shrine",
    "keywords": "Class AirAttack Attack that can be only be played when jumping, and does not prevent walking Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < BaseAttack.Command > PhasedBehaviour < BaseAttack.Command > BaseAttack SimpleAttack AirAttack AirSpinAttack AltAirAttack Implements IControlledBehaviour IPlayableBehaviour Inherited Members SimpleAttack.attackFlow SimpleAttack.hitDetector SimpleAttack.hitExecutor SimpleAttack.AnticipationPhase() SimpleAttack.RecoveryPhase() BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.Awake() BaseAttack.DoPlay(BaseAttack.Command) BaseAttack.DoStop() BaseAttack.StartHitDetector(BaseHitDetector, ChainHitExecutor) PhasedBehaviour<BaseAttack.Command>.phaseEvents PhasedBehaviour<BaseAttack.Command>.Anticipating PhasedBehaviour<BaseAttack.Command>.Active PhasedBehaviour<BaseAttack.Command>.Recovering PhasedBehaviour<BaseAttack.Command>.Playing PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Blocked PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AirAttack : SimpleAttack, IControlledBehaviour, IPlayableBehaviour Fields minHeight Declaration public float minHeight Field Value Type Description Single Properties IsMidair Declaration protected override bool IsMidair { get; } Property Value Type Description Boolean Overrides BaseAttack.IsMidair Motion Declaration protected override MotionSettings Motion { get; } Property Value Type Description MotionSettings Overrides BaseAttack.Motion Methods ActivePhase() Declaration protected override IEnumerator ActivePhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides SimpleAttack.ActivePhase() CanPlay(BaseAttack.Command) Declaration public override bool CanPlay(BaseAttack.Command command) Parameters Type Name Description BaseAttack.Command command Returns Type Description Boolean Overrides BaseAttack.CanPlay(BaseAttack.Command) Implements IControlledBehaviour IPlayableBehaviour"
  },
  "api/Global.AirSpinAttack.html": {
    "href": "api/Global.AirSpinAttack.html",
    "title": "Class AirSpinAttack | Heroes of the Shrine",
    "keywords": "Class AirSpinAttack Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < BaseAttack.Command > PhasedBehaviour < BaseAttack.Command > BaseAttack SimpleAttack AirAttack AirSpinAttack Implements IControlledBehaviour IPlayableBehaviour Inherited Members AirAttack.minHeight AirAttack.Motion AirAttack.IsMidair AirAttack.CanPlay(BaseAttack.Command) AirAttack.ActivePhase() SimpleAttack.attackFlow SimpleAttack.hitDetector SimpleAttack.hitExecutor SimpleAttack.AnticipationPhase() SimpleAttack.RecoveryPhase() BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.Awake() BaseAttack.DoPlay(BaseAttack.Command) BaseAttack.DoStop() BaseAttack.StartHitDetector(BaseHitDetector, ChainHitExecutor) PhasedBehaviour<BaseAttack.Command>.phaseEvents PhasedBehaviour<BaseAttack.Command>.Anticipating PhasedBehaviour<BaseAttack.Command>.Active PhasedBehaviour<BaseAttack.Command>.Recovering PhasedBehaviour<BaseAttack.Command>.Playing PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Blocked PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AirSpinAttack : AirAttack, IControlledBehaviour, IPlayableBehaviour Implements IControlledBehaviour IPlayableBehaviour"
  },
  "api/Global.AlarmBrainModule.html": {
    "href": "api/Global.AlarmBrainModule.html",
    "title": "Class AlarmBrainModule | Heroes of the Shrine",
    "keywords": "Class AlarmBrainModule State machine trigger parameter that can be used for transition between non-aggressive state to aggressive state. Must be called manually. Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour BrainModule AlarmBrainModule Inherited Members BrainModule.StateMachine BrainModule.Awake() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AlarmBrainModule : BrainModule Methods GetParameters() Declaration public override string[] GetParameters() Returns Type Description String [] Overrides BrainModule.GetParameters() SetAlarm() Sets the trigger Declaration public void SetAlarm()"
  },
  "api/Global.AltAirAttack.html": {
    "href": "api/Global.AltAirAttack.html",
    "title": "Class AltAirAttack | Heroes of the Shrine",
    "keywords": "Class AltAirAttack Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < BaseAttack.Command > PhasedBehaviour < BaseAttack.Command > BaseAttack SimpleAttack AirAttack AltAirAttack Implements IControlledBehaviour IPlayableBehaviour Inherited Members AirAttack.minHeight AirAttack.Motion AirAttack.IsMidair AirAttack.CanPlay(BaseAttack.Command) AirAttack.ActivePhase() SimpleAttack.attackFlow SimpleAttack.hitDetector SimpleAttack.hitExecutor SimpleAttack.AnticipationPhase() SimpleAttack.RecoveryPhase() BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.Awake() BaseAttack.DoPlay(BaseAttack.Command) BaseAttack.DoStop() BaseAttack.StartHitDetector(BaseHitDetector, ChainHitExecutor) PhasedBehaviour<BaseAttack.Command>.phaseEvents PhasedBehaviour<BaseAttack.Command>.Anticipating PhasedBehaviour<BaseAttack.Command>.Active PhasedBehaviour<BaseAttack.Command>.Recovering PhasedBehaviour<BaseAttack.Command>.Playing PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Blocked PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AltAirAttack : AirAttack, IControlledBehaviour, IPlayableBehaviour Implements IControlledBehaviour IPlayableBehaviour"
  },
  "api/Global.AltCounterAttack.html": {
    "href": "api/Global.AltCounterAttack.html",
    "title": "Class AltCounterAttack | Heroes of the Shrine",
    "keywords": "Class AltCounterAttack Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < BaseAttack.Command > PhasedBehaviour < BaseAttack.Command > BaseAttack SimpleAttack NormalAttack AltCounterAttack Implements IControlledBehaviour IPlayableBehaviour Inherited Members SimpleAttack.attackFlow SimpleAttack.hitDetector SimpleAttack.hitExecutor SimpleAttack.AnticipationPhase() SimpleAttack.ActivePhase() SimpleAttack.RecoveryPhase() BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.Motion BaseAttack.IsMidair BaseAttack.Awake() BaseAttack.CanPlay(BaseAttack.Command) BaseAttack.DoStop() BaseAttack.StartHitDetector(BaseHitDetector, ChainHitExecutor) PhasedBehaviour<BaseAttack.Command>.phaseEvents PhasedBehaviour<BaseAttack.Command>.Anticipating PhasedBehaviour<BaseAttack.Command>.Active PhasedBehaviour<BaseAttack.Command>.Recovering PhasedBehaviour<BaseAttack.Command>.Playing PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Blocked PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AltCounterAttack : NormalAttack, IControlledBehaviour, IPlayableBehaviour Methods DoPlay(BaseAttack.Command) Declaration protected override void DoPlay(BaseAttack.Command command) Parameters Type Name Description BaseAttack.Command command Overrides BaseAttack.DoPlay(BaseAttack.Command) Implements IControlledBehaviour IPlayableBehaviour"
  },
  "api/Global.AltNormalAttack.html": {
    "href": "api/Global.AltNormalAttack.html",
    "title": "Class AltNormalAttack | Heroes of the Shrine",
    "keywords": "Class AltNormalAttack Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < BaseAttack.Command > PhasedBehaviour < BaseAttack.Command > BaseAttack SimpleAttack NormalAttack AltNormalAttack Implements IControlledBehaviour IPlayableBehaviour Inherited Members SimpleAttack.attackFlow SimpleAttack.hitDetector SimpleAttack.hitExecutor SimpleAttack.AnticipationPhase() SimpleAttack.ActivePhase() SimpleAttack.RecoveryPhase() BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.Motion BaseAttack.IsMidair BaseAttack.Awake() BaseAttack.CanPlay(BaseAttack.Command) BaseAttack.DoPlay(BaseAttack.Command) BaseAttack.DoStop() BaseAttack.StartHitDetector(BaseHitDetector, ChainHitExecutor) PhasedBehaviour<BaseAttack.Command>.phaseEvents PhasedBehaviour<BaseAttack.Command>.Anticipating PhasedBehaviour<BaseAttack.Command>.Active PhasedBehaviour<BaseAttack.Command>.Recovering PhasedBehaviour<BaseAttack.Command>.Playing PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Blocked PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AltNormalAttack : NormalAttack, IControlledBehaviour, IPlayableBehaviour Implements IControlledBehaviour IPlayableBehaviour"
  },
  "api/Global.ArcBehaviour.Command.html": {
    "href": "api/Global.ArcBehaviour.Command.html",
    "title": "Class ArcBehaviour.Command | Heroes of the Shrine",
    "keywords": "Class ArcBehaviour.Command Inheritance Object ArcBehaviour.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command Fields speedMultiplier Declaration public float speedMultiplier Field Value Type Description Single target Declaration public GameEntity target Field Value Type Description GameEntity"
  },
  "api/Global.ArcBehaviour.html": {
    "href": "api/Global.ArcBehaviour.html",
    "title": "Class ArcBehaviour | Heroes of the Shrine",
    "keywords": "Class ArcBehaviour Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < ArcBehaviour.Command > ArcBehaviour Implements IMovementBehaviour IControlledBehaviour IPlayableBehaviour Inherited Members PlayableBehaviour<ArcBehaviour.Command>.PlayEvents PlayableBehaviour<ArcBehaviour.Command>.Blocked PlayableBehaviour<ArcBehaviour.Command>.CanPlay(ArcBehaviour.Command) PlayableBehaviour<ArcBehaviour.Command>.Play(ArcBehaviour.Command) PlayableBehaviour<ArcBehaviour.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ArcBehaviour : PlayableBehaviour<ArcBehaviour.Command>, IMovementBehaviour, IControlledBehaviour, IPlayableBehaviour Properties Playing Declaration public override bool Playing { get; } Property Value Type Description Boolean Overrides PlayableBehaviour<ArcBehaviour.Command>.Playing Methods Awake() Declaration protected override void Awake() Overrides CharacterBehaviour.Awake() DoPlay(ArcBehaviour.Command) Declaration protected override void DoPlay(ArcBehaviour.Command command) Parameters Type Name Description ArcBehaviour.Command command Overrides PlayableBehaviour<ArcBehaviour.Command>.DoPlay(ArcBehaviour.Command) DoStop() Declaration protected override void DoStop() Overrides PlayableBehaviour<ArcBehaviour.Command>.DoStop() Implements IMovementBehaviour IControlledBehaviour IPlayableBehaviour"
  },
  "api/Global.ArcPattern.html": {
    "href": "api/Global.ArcPattern.html",
    "title": "Class ArcPattern | Heroes of the Shrine",
    "keywords": "Class ArcPattern Inheritance Object BasePattern ArcPattern Inherited Members BasePattern.hasRandomExitTime BasePattern.minTime BasePattern.maxTime BasePattern.OnEnter BasePattern.OnExit BasePattern.OnStateUpdate(Animator, AnimatorStateInfo, Int32) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ArcPattern : BasePattern Fields speedMultiplier Declaration public float speedMultiplier Field Value Type Description Single targetTag Declaration public Tag targetTag Field Value Type Description Tag Methods OnStateEnter(Animator, AnimatorStateInfo, Int32) Declaration public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description Animator animator AnimatorStateInfo stateInfo Int32 layerIndex Overrides BasePattern.OnStateEnter(Animator, AnimatorStateInfo, Int32) OnStateExit(Animator, AnimatorStateInfo, Int32) Declaration public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description Animator animator AnimatorStateInfo stateInfo Int32 layerIndex Overrides BasePattern.OnStateExit(Animator, AnimatorStateInfo, Int32)"
  },
  "api/Global.AttackManager.html": {
    "href": "api/Global.AttackManager.html",
    "title": "Class AttackManager | Heroes of the Shrine",
    "keywords": "Class AttackManager Behaviour that runs operation on all attacks Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour AttackManager Inherited Members CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AttackManager : CharacterBehaviour Fields damageTranspiler Declaration public DamageTranspiler damageTranspiler Field Value Type Description DamageTranspiler Hit damage transpiler hittableTags Declaration public Tags hittableTags Field Value Type Description Tags Tags of objects that can get hit by character's attacks knockbackPowerTranspiler Declaration public KnockbackPowerTranspiler knockbackPowerTranspiler Field Value Type Description KnockbackPowerTranspiler Hit knockback power transpiler maxComboDelay Declaration public float maxComboDelay Field Value Type Description Single Time after attack finished, that it is removed from combo history onBlock Declaration public ExtEvent<Hit> onBlock Field Value Type Description ExtEvent < Hit > Attack was blocked onComboBlock Declaration public ExtEvent onComboBlock Field Value Type Description ExtEvent Entire combo was blocked onComboCut Declaration public ExtEvent onComboCut Field Value Type Description ExtEvent Combo was cut in the middle phaseEvents Declaration public PhaseEvents phaseEvents Field Value Type Description PhaseEvents General attack events. These events are invoked whenever a matching event is invoked in any attack. playEvents Declaration public PlayEvents playEvents Field Value Type Description PlayEvents Attacks play and stop events. Whenever any attack starts or stops, these events are invoked. Properties LastAttack Last attack dealt Declaration public BaseAttack LastAttack { get; } Property Value Type Description BaseAttack Playing Declaration public bool Playing { get; } Property Value Type Description Boolean Any attack is playing Methods Awake() Declaration protected override void Awake() Overrides CharacterBehaviour.Awake() CanPlayAttack() Checks if any attack is playing. If attack is recovering, and it doesn't have a hardRecovery , it will not prevent an attack Declaration public bool CanPlayAttack() Returns Type Description Boolean true if attack can be played"
  },
  "api/Global.AttackNode.html": {
    "href": "api/Global.AttackNode.html",
    "title": "Class AttackNode | Heroes of the Shrine",
    "keywords": "Class AttackNode Inheritance Object AttackNode Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AttackNode Fields attackType Declaration public TypeReference attackType Field Value Type Description TypeReference startTime Declaration public float startTime Field Value Type Description Single"
  },
  "api/Global.AttackPattern.html": {
    "href": "api/Global.AttackPattern.html",
    "title": "Class AttackPattern | Heroes of the Shrine",
    "keywords": "Class AttackPattern Inheritance Object BasePattern AttackPattern Inherited Members BasePattern.hasRandomExitTime BasePattern.minTime BasePattern.maxTime BasePattern.OnEnter BasePattern.OnExit BasePattern.OnStateUpdate(Animator, AnimatorStateInfo, Int32) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AttackPattern : BasePattern Fields attacks Declaration public List<AttackNode> attacks Field Value Type Description List < AttackNode > targetTag Declaration public Tag targetTag Field Value Type Description Tag Methods OnStateEnter(Animator, AnimatorStateInfo, Int32) Declaration public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description Animator animator AnimatorStateInfo stateInfo Int32 layerIndex Overrides BasePattern.OnStateEnter(Animator, AnimatorStateInfo, Int32) OnStateExit(Animator, AnimatorStateInfo, Int32) Declaration public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description Animator animator AnimatorStateInfo stateInfo Int32 layerIndex Overrides BasePattern.OnStateExit(Animator, AnimatorStateInfo, Int32)"
  },
  "api/Global.AudioManager.html": {
    "href": "api/Global.AudioManager.html",
    "title": "Class AudioManager | Heroes of the Shrine",
    "keywords": "Class AudioManager Singleton responsible for playing background music and SFX Inheritance Object BaseComponent AudioManager Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AudioManager : BaseComponent Properties Instance Declaration public static AudioManager Instance { get; } Property Value Type Description AudioManager Instance of the singleton MusicVolume Declaration public float MusicVolume { get; set; } Property Value Type Description Single Volume of background music (0-1) SoundVolume Declaration public float SoundVolume { get; set; } Property Value Type Description Single Volume of SFX (0-1) Methods Play(AudioClip) Plays a sound effect. Not affecting other sound effects or background music, meaning two clips can be played simultaneously Declaration public static void Play(AudioClip clip) Parameters Type Name Description AudioClip clip Audio asset to play PlayBackground(AudioClip) Plays a new background music. If a previous clip was played, it will be replaced Declaration public static void PlayBackground(AudioClip clip) Parameters Type Name Description AudioClip clip Audio asset to play StopBackground() Stops background music. If it wasn't playing, then nothing happens Declaration public static void StopBackground()"
  },
  "api/Global.AutoWalkBehaviour.Command.html": {
    "href": "api/Global.AutoWalkBehaviour.Command.html",
    "title": "Class AutoWalkBehaviour.Command | Heroes of the Shrine",
    "keywords": "Class AutoWalkBehaviour.Command Inheritance Object AutoWalkBehaviour.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command Fields destination Declaration public Vector3 destination Field Value Type Description Vector3 getExcluded Declaration public Func<Node[]> getExcluded Field Value Type Description Func < Node []>"
  },
  "api/Global.AutoWalkBehaviour.html": {
    "href": "api/Global.AutoWalkBehaviour.html",
    "title": "Class AutoWalkBehaviour | Heroes of the Shrine",
    "keywords": "Class AutoWalkBehaviour Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < AutoWalkBehaviour.Command > AutoWalkBehaviour Implements IMovementBehaviour IControlledBehaviour IPlayableBehaviour Inherited Members PlayableBehaviour<AutoWalkBehaviour.Command>.PlayEvents PlayableBehaviour<AutoWalkBehaviour.Command>.Blocked PlayableBehaviour<AutoWalkBehaviour.Command>.CanPlay(AutoWalkBehaviour.Command) PlayableBehaviour<AutoWalkBehaviour.Command>.Play(AutoWalkBehaviour.Command) PlayableBehaviour<AutoWalkBehaviour.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AutoWalkBehaviour : PlayableBehaviour<AutoWalkBehaviour.Command>, IMovementBehaviour, IControlledBehaviour, IPlayableBehaviour Properties Playing Declaration public override bool Playing { get; } Property Value Type Description Boolean Overrides PlayableBehaviour<AutoWalkBehaviour.Command>.Playing Methods Awake() Declaration protected override void Awake() Overrides CharacterBehaviour.Awake() DoPlay(AutoWalkBehaviour.Command) Declaration protected override void DoPlay(AutoWalkBehaviour.Command command) Parameters Type Name Description AutoWalkBehaviour.Command command Overrides PlayableBehaviour<AutoWalkBehaviour.Command>.DoPlay(AutoWalkBehaviour.Command) DoStop() Declaration protected override void DoStop() Overrides PlayableBehaviour<AutoWalkBehaviour.Command>.DoStop() Implements IMovementBehaviour IControlledBehaviour IPlayableBehaviour"
  },
  "api/Global.BackwardLaunchAttack.AttackFlow.html": {
    "href": "api/Global.BackwardLaunchAttack.AttackFlow.html",
    "title": "Class BackwardLaunchAttack.AttackFlow | Heroes of the Shrine",
    "keywords": "Class BackwardLaunchAttack.AttackFlow Inheritance Object BackwardLaunchAttack.AttackFlow Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AttackFlow Fields activeDuration Declaration public float activeDuration Field Value Type Description Single anticipationDuration Declaration public float anticipationDuration Field Value Type Description Single detectorDuration Declaration public float detectorDuration Field Value Type Description Single detectorStartTime Declaration public float detectorStartTime Field Value Type Description Single recoveryDuration Declaration public float recoveryDuration Field Value Type Description Single"
  },
  "api/Global.BackwardLaunchAttack.html": {
    "href": "api/Global.BackwardLaunchAttack.html",
    "title": "Class BackwardLaunchAttack | Heroes of the Shrine",
    "keywords": "Class BackwardLaunchAttack Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < BaseAttack.Command > PhasedBehaviour < BaseAttack.Command > BaseAttack BackwardLaunchAttack Implements IControlledBehaviour IPlayableBehaviour Inherited Members BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.Motion BaseAttack.IsMidair BaseAttack.Awake() BaseAttack.CanPlay(BaseAttack.Command) BaseAttack.DoPlay(BaseAttack.Command) BaseAttack.DoStop() BaseAttack.StartHitDetector(BaseHitDetector, ChainHitExecutor) PhasedBehaviour<BaseAttack.Command>.phaseEvents PhasedBehaviour<BaseAttack.Command>.Anticipating PhasedBehaviour<BaseAttack.Command>.Active PhasedBehaviour<BaseAttack.Command>.Recovering PhasedBehaviour<BaseAttack.Command>.Playing PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Blocked PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BackwardLaunchAttack : BaseAttack, IControlledBehaviour, IPlayableBehaviour Fields attackFlow Declaration public BackwardLaunchAttack.AttackFlow attackFlow Field Value Type Description BackwardLaunchAttack.AttackFlow hitDetector Declaration public BaseHitDetector hitDetector Field Value Type Description BaseHitDetector hitExecutor Declaration public ChainHitExecutor hitExecutor Field Value Type Description ChainHitExecutor speed Declaration public float speed Field Value Type Description Single Methods ActivePhase() Declaration protected override IEnumerator ActivePhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<BaseAttack.Command>.ActivePhase() AnticipationPhase() Declaration protected override IEnumerator AnticipationPhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<BaseAttack.Command>.AnticipationPhase() RecoveryPhase() Declaration protected override IEnumerator RecoveryPhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<BaseAttack.Command>.RecoveryPhase() Implements IControlledBehaviour IPlayableBehaviour"
  },
  "api/Global.BaseAttack.Command.html": {
    "href": "api/Global.BaseAttack.Command.html",
    "title": "Class BaseAttack.Command | Heroes of the Shrine",
    "keywords": "Class BaseAttack.Command Inheritance Object BaseAttack.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command"
  },
  "api/Global.BaseAttack.html": {
    "href": "api/Global.BaseAttack.html",
    "title": "Class BaseAttack | Heroes of the Shrine",
    "keywords": "Class BaseAttack Base class for all attacks. Most attacks should derive from SimpleAttack , which has more members and helper methods. Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < BaseAttack.Command > PhasedBehaviour < BaseAttack.Command > BaseAttack BackwardLaunchAttack ElectrifyAttack ForwardPushAttack MotionAttack PossessAttack SimpleAttack SpawnAttack SpikeBallAttack SpinningSwordsAttack Implements IControlledBehaviour IPlayableBehaviour Inherited Members PhasedBehaviour<BaseAttack.Command>.phaseEvents PhasedBehaviour<BaseAttack.Command>.Anticipating PhasedBehaviour<BaseAttack.Command>.Active PhasedBehaviour<BaseAttack.Command>.Recovering PhasedBehaviour<BaseAttack.Command>.Playing PhasedBehaviour<BaseAttack.Command>.AnticipationPhase() PhasedBehaviour<BaseAttack.Command>.ActivePhase() PhasedBehaviour<BaseAttack.Command>.RecoveryPhase() PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Blocked PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public abstract class BaseAttack : PhasedBehaviour<BaseAttack.Command>, IControlledBehaviour, IPlayableBehaviour Fields hardRecovery Declaration public bool hardRecovery Field Value Type Description Boolean If true , The behaviour cannot be interrupted while PhasedBehaviour`1.Recovering is true. instant Declaration public bool instant Field Value Type Description Boolean If true, the behaviour can be played while another interruptible behaviour is playing. interruptible Declaration public bool interruptible Field Value Type Description Boolean If true, an instant behaviour can replace it while this behaviour is playing. previousAttacks Declaration public List<BaseAttack> previousAttacks Field Value Type Description List < BaseAttack > This attack can be played only if the previous attack is one of the previousAttacks . If the attack can also be played without a previous attack, add null to the list. If the list is left empty, the attack can be played after any attack (including null ). Properties IsMidair Declaration protected virtual bool IsMidair { get; } Property Value Type Description Boolean If true , this attack can only play when JumpBehaviour is playing Motion Declaration protected virtual MotionSettings Motion { get; } Property Value Type Description MotionSettings Motion setting Methods Awake() Declaration protected override void Awake() Overrides CharacterBehaviour.Awake() CanPlay(BaseAttack.Command) Declaration public override bool CanPlay(BaseAttack.Command command) Parameters Type Name Description BaseAttack.Command command Returns Type Description Boolean Overrides PlayableBehaviour<BaseAttack.Command>.CanPlay(BaseAttack.Command) DoPlay(BaseAttack.Command) Declaration protected override void DoPlay(BaseAttack.Command command) Parameters Type Name Description BaseAttack.Command command Overrides PhasedBehaviour<BaseAttack.Command>.DoPlay(BaseAttack.Command) DoStop() Declaration protected override void DoStop() Overrides PhasedBehaviour<BaseAttack.Command>.DoStop() StartHitDetector(BaseHitDetector, ChainHitExecutor) Declaration protected void StartHitDetector(BaseHitDetector hitDetector, ChainHitExecutor hitExecutor) Parameters Type Name Description BaseHitDetector hitDetector ChainHitExecutor hitExecutor Implements IControlledBehaviour IPlayableBehaviour"
  },
  "api/Global.BaseComponent.html": {
    "href": "api/Global.BaseComponent.html",
    "title": "Class BaseComponent | Heroes of the Shrine",
    "keywords": "Class BaseComponent Base class for every component, extending with more features Inheritance Object BaseComponent AudioManager CameraFocus CameraFollow CameraMovement CutsceneAction DeathPanel DelayedEvent DestroyAction EffectBar EffectsBar EncounterAction EnergyBar EntityBehaviour EntityManager EventManager EventWrapper FullScreenToggle GameEntity GameManager HealthBar InitEvent KillEntitiesAction LineTrigger MenuManager MoveCamera MusicVolumeSlider PauseManager PlayOnce PossessedHumanBrain PossessSourcesDestroyAction RectTrigger SoundEffect SoundEffectsVolumeSlider StopEncountersAction SuperArmorBar TextLink TransitionAction Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BaseComponent : MonoBehaviour Methods Cancel(String) Cancels a callable with given id. Nothing happens if is not an existing callable Declaration protected void Cancel(string id) Parameters Type Name Description String id ID of the callable to cancel InvokeWhen(Func<Boolean>, Action) Executes a callable when a condition is met Declaration protected string InvokeWhen(Func<bool> condition, Action action) Parameters Type Name Description Func < Boolean > condition Condition to check every frame Action action Callable to execute Returns Type Description String ID of the registered callable Register(Action) Executes a callable every frame Declaration protected string Register(Action action) Parameters Type Name Description Action action Callable to execute Returns Type Description String ID of the registered callable StartInterval(Action, Single) Executes a callable repeatedly with a time delay between each call Declaration protected string StartInterval(Action action, float interval) Parameters Type Name Description Action action Callable to execute Single interval Time to wait between executions, in seconds Returns Type Description String ID of the registered callable StartTimeout(Action, Single) Executes a callable after a certain delay Declaration protected string StartTimeout(Action action, float timeout) Parameters Type Name Description Action action Callable to execute Single timeout Time to wait before execution, in seconds Returns Type Description String ID of the registered callable Unregister(String) Unregisters a callable with given id. Nothing happens if is not an existing callable Declaration protected void Unregister(string id) Parameters Type Name Description String id ID of the callable to unregister Update() Declaration protected virtual void Update()"
  },
  "api/Global.BaseEffect-1.html": {
    "href": "api/Global.BaseEffect-1.html",
    "title": "Class BaseEffect<T> | Heroes of the Shrine",
    "keywords": "Class BaseEffect<T> Base class for effects that character can receive by getting hit Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour <T> BaseEffect<T> ElectrifiedEffect FireEffect PossessedEffect Implements IEffect IPlayableBehaviour Inherited Members PlayableBehaviour<T>.PlayEvents PlayableBehaviour<T>.Blocked PlayableBehaviour<T>.CanPlay(T) PlayableBehaviour<T>.Play(T) PlayableBehaviour<T>.DoPlay(T) PlayableBehaviour<T>.Stop() PlayableBehaviour<T>.DoStop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Awake() CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public abstract class BaseEffect<T> : PlayableBehaviour<T>, IEffect, IPlayableBehaviour Type Parameters Name Description T Type of play command Properties Active Declaration public bool Active { get; protected set; } Property Value Type Description Boolean Is the effect currently active Playing Declaration public override bool Playing { get; } Property Value Type Description Boolean Overrides PlayableBehaviour<T>.Playing Methods GetProgress() Declaration public abstract float GetProgress() Returns Type Description Single Progress of the effect from 0 to 1. Can be used by UI elements to display the progress Implements IEffect IPlayableBehaviour"
  },
  "api/Global.BaseHitDetector.html": {
    "href": "api/Global.BaseHitDetector.html",
    "title": "Class BaseHitDetector | Heroes of the Shrine",
    "keywords": "Class BaseHitDetector Abstract base class for hit detectors, responsible for detecting hits and calling a given function for every hit object Inheritance Object BaseHitDetector AbsoluteHitDetector PeriodicAbsoluteHitDetector PeriodicRelativeHitDetector SingleHitDetector Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public abstract class BaseHitDetector Fields excludedHittableTags Declaration public Tags excludedHittableTags Field Value Type Description Tags Tags of objects this attack cannot hit. hitbox Declaration public Hitbox hitbox Field Value Type Description Hitbox Attached hitbox hitParticles Declaration public HitParticles hitParticles Field Value Type Description HitParticles Attached hit particles includedHittableTags Declaration public Tags includedHittableTags Field Value Type Description Tags Additional tags of objects this attack can hit. onHit Declaration public ExtEvent onHit Field Value Type Description ExtEvent Methods DoStartDetector(Action<HittableHitbox>) Abstract method that starts detecting hits. Implementations should include the concrete logic of hit detection. Declaration protected abstract void DoStartDetector(Action<HittableHitbox> hitCallable) Parameters Type Name Description Action < HittableHitbox > hitCallable Function to be called on detected hit StartDetector(Action<HittableHitbox>, Tags) Starts detecting hits Declaration public void StartDetector(Action<HittableHitbox> hitCallable, Tags hittableTags) Parameters Type Name Description Action < HittableHitbox > hitCallable Function to be called on detected hit Tags hittableTags Tags of object that can get hit StopDetector() Abstract method that stops detecting hits. Implementations should stop anything that BaseHitDetector.DoStartDetector(Action{HittableHitbox}) started. Declaration public abstract void StopDetector()"
  },
  "api/Global.BasePattern.html": {
    "href": "api/Global.BasePattern.html",
    "title": "Class BasePattern | Heroes of the Shrine",
    "keywords": "Class BasePattern Inheritance Object BasePattern ArcPattern AttackPattern EscapePattern FollowPattern IdlePattern RandomRayPattern RepositionPattern Namespace : Global Assembly : cs.temp.dll.dll Syntax public abstract class BasePattern : StateMachineBehaviour Fields hasRandomExitTime Declaration public bool hasRandomExitTime Field Value Type Description Boolean maxTime Declaration public float maxTime Field Value Type Description Single minTime Declaration public float minTime Field Value Type Description Single Methods OnStateEnter(Animator, AnimatorStateInfo, Int32) Declaration public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description Animator animator AnimatorStateInfo stateInfo Int32 layerIndex OnStateExit(Animator, AnimatorStateInfo, Int32) Declaration public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description Animator animator AnimatorStateInfo stateInfo Int32 layerIndex OnStateUpdate(Animator, AnimatorStateInfo, Int32) Declaration public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description Animator animator AnimatorStateInfo stateInfo Int32 layerIndex Events OnEnter Declaration public event Action OnEnter Event Type Type Description Action OnExit Declaration public event Action OnExit Event Type Type Description Action"
  },
  "api/Global.BasePatternEditor.html": {
    "href": "api/Global.BasePatternEditor.html",
    "title": "Class BasePatternEditor | Heroes of the Shrine",
    "keywords": "Class BasePatternEditor Inheritance Object BasePatternEditor Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BasePatternEditor : Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Global.BossHittableHitbox.html": {
    "href": "api/Global.BossHittableHitbox.html",
    "title": "Class BossHittableHitbox | Heroes of the Shrine",
    "keywords": "Class BossHittableHitbox HittableHitbox that converts knockback to stun Inheritance Object BaseComponent EntityBehaviour HittableHitbox BossHittableHitbox Implements IHittable Inherited Members HittableHitbox.hittableBehaviour HittableHitbox.onHit HittableHitbox.figure HittableHitbox.blinkMaterial HittableHitbox.blinkTime HittableHitbox.Hitbox HittableHitbox.Character HittableHitbox.HitEvent HittableHitbox.Awake() HittableHitbox.CanGetHit() HittableHitbox.Hit(ChainHitExecutor, Hit) EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BossHittableHitbox : HittableHitbox, IHittable Methods ProcessHit(IHitExecutor, Hit) Declaration public override void ProcessHit(IHitExecutor executor, Hit hit) Parameters Type Name Description IHitExecutor executor Hit hit Overrides HittableHitbox.ProcessHit(IHitExecutor, Hit) Implements IHittable"
  },
  "api/Global.BrainCore.html": {
    "href": "api/Global.BrainCore.html",
    "title": "Class BrainCore | Heroes of the Shrine",
    "keywords": "Class BrainCore Enemies brain is designed with modular pieces called brain modules. BrainCore class managing state machine and all brain modules. Attach only the required brain modules for your state machine logic. Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour CharacterController BrainCore Inherited Members CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BrainCore : CharacterController Properties StateMachine Declaration public Animator StateMachine { get; } Property Value Type Description Animator Animator component that contains the state machine logic Methods Awake() Declaration protected override void Awake() Overrides CharacterBehaviour.Awake()"
  },
  "api/Global.BrainModule.html": {
    "href": "api/Global.BrainModule.html",
    "title": "Class BrainModule | Heroes of the Shrine",
    "keywords": "Class BrainModule Modular piece of enemy brain. This is a base abstract class for any brain module Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour BrainModule AggressionBrainModule AlarmBrainModule ClosestEnemyBrainModule ClosestToPlayerBrainModule DieBrainModule DistancesBrainModule EnemiesAttackingBrainModule EnemyCountBrainModule EnragedBrainModule HealthBrainModule KnockbackBrainModule PlayerAttackBrainModule PlayerDistanceBrainModule PlayerKnockbackBrainModule PlayerStunBrainModule StunBrainModule SuperArmorBrainModule Inherited Members CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public abstract class BrainModule : CharacterBehaviour Properties StateMachine Declaration protected Animator StateMachine { get; } Property Value Type Description Animator Animator component that contains the state machine logic Methods Awake() Declaration protected override void Awake() Overrides CharacterBehaviour.Awake() GetParameters() The parameters provided by this method will be used to show the parameter names that should be added in state machine Declaration public abstract string[] GetParameters() Returns Type Description String [] Parameter names provided by this module"
  },
  "api/Global.BrainModuleEditor.html": {
    "href": "api/Global.BrainModuleEditor.html",
    "title": "Class BrainModuleEditor | Heroes of the Shrine",
    "keywords": "Class BrainModuleEditor Inheritance Object BrainModuleEditor Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BrainModuleEditor : Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Global.Button.html": {
    "href": "api/Global.Button.html",
    "title": "Enum Button | Heroes of the Shrine",
    "keywords": "Enum Button Button options Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum Button Fields Name Description Attack Defense Escape Heal Jump Run Spike Thread"
  },
  "api/Global.CameraFocus.html": {
    "href": "api/Global.CameraFocus.html",
    "title": "Class CameraFocus | Heroes of the Shrine",
    "keywords": "Class CameraFocus Zooms the camera smoothly Inheritance Object BaseComponent CameraFocus Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class CameraFocus : BaseComponent Fields lerpSpeed Declaration public float lerpSpeed Field Value Type Description Single The speed at which camera size is changing. Higher value is quicker (and less smooth). Methods Zoom(Single) Starts zooming Declaration public void Zoom(float factor) Parameters Type Name Description Single factor Multiplier by which size is increased"
  },
  "api/Global.CameraFollow.html": {
    "href": "api/Global.CameraFollow.html",
    "title": "Class CameraFollow | Heroes of the Shrine",
    "keywords": "Class CameraFollow Make camera follow an entity Inheritance Object BaseComponent CameraFollow Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class CameraFollow : BaseComponent Fields target Declaration public GameEntity target Field Value Type Description GameEntity Tracked entity Methods AddOffset(Vector3) Modify the distance between camera and the tracked object Declaration public void AddOffset(Vector3 change) Parameters Type Name Description Vector3 change Offset vector to add. will leave it the same."
  },
  "api/Global.CameraMovement.html": {
    "href": "api/Global.CameraMovement.html",
    "title": "Class CameraMovement | Heroes of the Shrine",
    "keywords": "Class CameraMovement Moves the camera smoothly inside a rectangle border Inheritance Object BaseComponent CameraMovement Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class CameraMovement : BaseComponent Fields border Declaration public Rect border Field Value Type Description Rect Current border, affected by encounters lerpSpeed Declaration public float lerpSpeed Field Value Type Description Single The speed at which camera is moving. Higher value is quicker (and less smooth). targetPosition Declaration public Vector3 targetPosition Field Value Type Description Vector3 The wanted position of the camera worldBorder Declaration public Rect worldBorder Field Value Type Description Rect Full scene border Methods Lock(Rect) Sets a new camera border Declaration public void Lock(Rect newBorder) Parameters Type Name Description Rect newBorder New camera border Unlock() Changes camera border back to the initial Declaration public void Unlock()"
  },
  "api/Global.ChainHitExecutor.html": {
    "href": "api/Global.ChainHitExecutor.html",
    "title": "Class ChainHitExecutor | Heroes of the Shrine",
    "keywords": "Class ChainHitExecutor Composite hit executor that executes all executors one by one Inheritance Object ChainHitExecutor Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ChainHitExecutor Fields executors Declaration public IHitExecutor[] executors Field Value Type Description IHitExecutor [] List of executors to call Methods Execute(Hit) Declaration public void Execute(Hit hit) Parameters Type Name Description Hit hit"
  },
  "api/Global.Character.html": {
    "href": "api/Global.Character.html",
    "title": "Class Character | Heroes of the Shrine",
    "keywords": "Class Character Shared methods and common components references for characters Inheritance Object BaseComponent EntityBehaviour Character Inherited Members EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Character : EntityBehaviour Fields animator Declaration public Animator animator Field Value Type Description Animator Animator of the figure (related ) attackManager Declaration public AttackManager attackManager Field Value Type Description AttackManager Attached AttackManager , possibly null movableEntity Declaration public MovableEntity movableEntity Field Value Type Description MovableEntity Attached MovableEntity stats Declaration public CharacterStats stats Field Value Type Description CharacterStats Physical attributes Methods BlockBehaviours(Type[]) Blocks behaviours, meaning they cannot be played. If a behaviour is blocked N times, it will have to be unblocked N times so it can be played. Declaration public void BlockBehaviours(params Type[] types) Parameters Type Name Description Type [] types Behaviours to block. All of the attached behaviours from each type will be blocked. IsPlaying<T>() Checks if any of the attached behaviours from type T are playing Declaration public bool IsPlaying<T>() where T : IPlayableBehaviour Returns Type Description Boolean true if any is playing Type Parameters Name Description T Type of the behaviour StopBehaviours(Type[]) Stops behaviours if they where playing Declaration public void StopBehaviours(params Type[] types) Parameters Type Name Description Type [] types Types of behaviours to stop. All of the attached behaviours from each type will be stopped. UnblockBehaviours(Type[]) Unblocks behaviours, meaning they can be played Declaration public void UnblockBehaviours(params Type[] types) Parameters Type Name Description Type [] types Behaviours to unblock. All of the attached behaviours from each type will be unblocked."
  },
  "api/Global.CharacterBehaviour.html": {
    "href": "api/Global.CharacterBehaviour.html",
    "title": "Class CharacterBehaviour | Heroes of the Shrine",
    "keywords": "Class CharacterBehaviour Base class for all character behaviours. Contains useful methods and references to other components. Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour AttackManager BrainModule CharacterController DieBehaviour EnergySystem HealthSystem HittableBehaviour Pathfind PlayableBehaviour<T> WalkParticles WalkSoundEffect Inherited Members EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public abstract class CharacterBehaviour : EntityBehaviour Properties Animator Declaration protected Animator Animator { get; } Property Value Type Description Animator Animator of the figure (related ) AttackManager Declaration public AttackManager AttackManager { get; } Property Value Type Description AttackManager Attached CharacterBehaviour.AttackManager , possibly null Character Declaration public Character Character { get; } Property Value Type Description Character Character reference MovableEntity Declaration public MovableEntity MovableEntity { get; } Property Value Type Description MovableEntity Attached CharacterBehaviour.MovableEntity Methods Awake() Declaration protected virtual void Awake() BlockBehaviours(Type[]) Blocks behaviours, meaning they cannot be played. If a behaviour is blocked N times, it will have to be unblocked N times so it can be played. Declaration protected void BlockBehaviours(params Type[] behaviours) Parameters Type Name Description Type [] behaviours Behaviours to block. All of the attached behaviours from each type will be blocked. IsPlaying<T>() Checks if any of the attached behaviours from type T are playing Declaration protected bool IsPlaying<T>() where T : IPlayableBehaviour Returns Type Description Boolean true if any is playing Type Parameters Name Description T Type of the behaviour StopBehaviours(Type[]) Stops behaviours if they where playing Declaration protected void StopBehaviours(params Type[] types) Parameters Type Name Description Type [] types Types of behaviours to stop. All of the attached behaviours from each type will be stopped. UnblockBehaviours(Type[]) Unblocks behaviours, meaning they can be played Declaration protected void UnblockBehaviours(params Type[] behaviours) Parameters Type Name Description Type [] behaviours Behaviours to unblock. All of the attached behaviours from each type will be unblocked."
  },
  "api/Global.CharacterController.html": {
    "href": "api/Global.CharacterController.html",
    "title": "Class CharacterController | Heroes of the Shrine",
    "keywords": "Class CharacterController Base class for any character controller Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour CharacterController BrainCore PlayerController Inherited Members CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Awake() CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class CharacterController : CharacterBehaviour"
  },
  "api/Global.CharacterStats.html": {
    "href": "api/Global.CharacterStats.html",
    "title": "Class CharacterStats | Heroes of the Shrine",
    "keywords": "Class CharacterStats Stats of a character Inheritance Object CharacterStats Namespace : Global Assembly : cs.temp.dll.dll Syntax public class CharacterStats : ScriptableObject Fields damageMultiplier Declaration public float damageMultiplier Field Value Type Description Single gravityAcceleration Declaration public float gravityAcceleration Field Value Type Description Single The rate in which the character gains speed in Y axis when Y > 0 knockbackPowerMultiplier Declaration public float knockbackPowerMultiplier Field Value Type Description Single"
  },
  "api/Global.ClosestEnemyBrainModule.html": {
    "href": "api/Global.ClosestEnemyBrainModule.html",
    "title": "Class ClosestEnemyBrainModule | Heroes of the Shrine",
    "keywords": "Class ClosestEnemyBrainModule State machine parameter telling the distance from the closest enemy Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour BrainModule ClosestEnemyBrainModule Inherited Members BrainModule.StateMachine BrainModule.Awake() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ClosestEnemyBrainModule : BrainModule Methods GetParameters() Declaration public override string[] GetParameters() Returns Type Description String [] Overrides BrainModule.GetParameters() Update() Declaration protected override void Update() Overrides BaseComponent.Update()"
  },
  "api/Global.ClosestToPlayerBrainModule.html": {
    "href": "api/Global.ClosestToPlayerBrainModule.html",
    "title": "Class ClosestToPlayerBrainModule | Heroes of the Shrine",
    "keywords": "Class ClosestToPlayerBrainModule State machine parameter telling if this is the closest enemy to the player Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour BrainModule ClosestToPlayerBrainModule Inherited Members BrainModule.StateMachine BrainModule.Awake() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ClosestToPlayerBrainModule : BrainModule Methods GetParameters() Declaration public override string[] GetParameters() Returns Type Description String [] Overrides BrainModule.GetParameters() Update() Declaration protected override void Update() Overrides BaseComponent.Update()"
  },
  "api/Global.Cooldown.html": {
    "href": "api/Global.Cooldown.html",
    "title": "Class Cooldown | Heroes of the Shrine",
    "keywords": "Class Cooldown Inheritance Object Cooldown Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Cooldown Fields duration Declaration public float duration Field Value Type Description Single Methods CanPlay() Declaration public bool CanPlay() Returns Type Description Boolean Reset() Declaration public void Reset()"
  },
  "api/Global.CounterAttack.html": {
    "href": "api/Global.CounterAttack.html",
    "title": "Class CounterAttack | Heroes of the Shrine",
    "keywords": "Class CounterAttack Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < BaseAttack.Command > PhasedBehaviour < BaseAttack.Command > BaseAttack MotionAttack CounterAttack Implements IControlledBehaviour IPlayableBehaviour Inherited Members MotionAttack.attackFlow MotionAttack.hitDetector MotionAttack.hitExecutor MotionAttack.Motion MotionAttack.AnticipationPhase() MotionAttack.ActivePhase() MotionAttack.RecoveryPhase() BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.IsMidair BaseAttack.Awake() BaseAttack.CanPlay(BaseAttack.Command) BaseAttack.DoPlay(BaseAttack.Command) BaseAttack.DoStop() BaseAttack.StartHitDetector(BaseHitDetector, ChainHitExecutor) PhasedBehaviour<BaseAttack.Command>.phaseEvents PhasedBehaviour<BaseAttack.Command>.Anticipating PhasedBehaviour<BaseAttack.Command>.Active PhasedBehaviour<BaseAttack.Command>.Recovering PhasedBehaviour<BaseAttack.Command>.Playing PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Blocked PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class CounterAttack : MotionAttack, IControlledBehaviour, IPlayableBehaviour Implements IControlledBehaviour IPlayableBehaviour"
  },
  "api/Global.CutsceneAction.html": {
    "href": "api/Global.CutsceneAction.html",
    "title": "Class CutsceneAction | Heroes of the Shrine",
    "keywords": "Class CutsceneAction Moves entities to predefined points and then plays a cutscene timeline Inheritance Object BaseComponent CutsceneAction Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class CutsceneAction : BaseComponent Fields director Declaration public PlayableDirector director Field Value Type Description PlayableDirector that plays the timeline moveDefinitions Declaration public List<CutsceneAction.MoveDefinition> moveDefinitions Field Value Type Description List < CutsceneAction.MoveDefinition > Move definitions of the participating characters. Add any character whom position is essential for the timeline. The CutsceneAction.MoveDefinition will make their start position determinist for the cutscene. playOnAwake Declaration public bool playOnAwake Field Value Type Description Boolean If true , plays the cutscene right when scene is loaded postCutsceneEvent Declaration public ExtEvent postCutsceneEvent Field Value Type Description ExtEvent Invoked after timeline is finished Methods Invoke() Moves characters according to CutsceneAction.moveDefinitions and plays the cutscene Declaration public void Invoke()"
  },
  "api/Global.CutsceneAction.MoveDefinition.html": {
    "href": "api/Global.CutsceneAction.MoveDefinition.html",
    "title": "Class CutsceneAction.MoveDefinition | Heroes of the Shrine",
    "keywords": "Class CutsceneAction.MoveDefinition Defines how character should move before the cutscene timeline starts Inheritance Object CutsceneAction.MoveDefinition Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class MoveDefinition Fields position Declaration public Vector3 position Field Value Type Description Vector3 Point that character is moving towards rotation Declaration public Rotation rotation Field Value Type Description Rotation Character rotation when the timeline starts speedMultiplier Declaration public float speedMultiplier Field Value Type Description Single Speed multiplier while moving target Declaration public ForcedWalkBehaviour target Field Value Type Description ForcedWalkBehaviour ForcedWalkBehaviour of the character"
  },
  "api/Global.DamageHitExecutor.html": {
    "href": "api/Global.DamageHitExecutor.html",
    "title": "Class DamageHitExecutor | Heroes of the Shrine",
    "keywords": "Class DamageHitExecutor Hit executor that deals damage to an hittable Inheritance Object DamageHitExecutor Implements IHitExecutor Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class DamageHitExecutor : IHitExecutor Fields damage Declaration public float damage Field Value Type Description Single Health reduced to hit characters Methods Execute(Hit) Declaration public void Execute(Hit hit) Parameters Type Name Description Hit hit Implements IHitExecutor"
  },
  "api/Global.DamageTranspiler.html": {
    "href": "api/Global.DamageTranspiler.html",
    "title": "Class DamageTranspiler | Heroes of the Shrine",
    "keywords": "Class DamageTranspiler Inheritance Object HitValueTranspiler < Single > DamageTranspiler Inherited Members HitValueTranspiler<Single>.Transpile(BaseAttack, IHittable, Single) HitValueTranspiler<Single>.Add(HitValueTranspiler.TranspileCallable<>) HitValueTranspiler<Single>.Remove(HitValueTranspiler.TranspileCallable<>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class DamageTranspiler : HitValueTranspiler<float>"
  },
  "api/Global.DeathPanel.html": {
    "href": "api/Global.DeathPanel.html",
    "title": "Class DeathPanel | Heroes of the Shrine",
    "keywords": "Class DeathPanel Plays transitions on a panel when it is activated Inheritance Object BaseComponent DeathPanel Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class DeathPanel : BaseComponent Fields transitions Declaration public DeathPanel.Transition[] transitions Field Value Type Description DeathPanel.Transition []"
  },
  "api/Global.DeathPanel.Transition.html": {
    "href": "api/Global.DeathPanel.Transition.html",
    "title": "Class DeathPanel.Transition | Heroes of the Shrine",
    "keywords": "Class DeathPanel.Transition Inheritance Object DeathPanel.Transition Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Transition Fields finalColor Declaration public Color finalColor Field Value Type Description Color graphic Declaration public MaskableGraphic graphic Field Value Type Description MaskableGraphic startColor Declaration public Color startColor Field Value Type Description Color transitionDuration Declaration public float transitionDuration Field Value Type Description Single"
  },
  "api/Global.DelayedEvent.html": {
    "href": "api/Global.DelayedEvent.html",
    "title": "Class DelayedEvent | Heroes of the Shrine",
    "keywords": "Class DelayedEvent Invokes an event after waiting a given delay Inheritance Object BaseComponent DelayedEvent Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class DelayedEvent : BaseComponent Fields delay Declaration public float delay Field Value Type Description Single Seconds to wait event Declaration public ExtEvent event Field Value Type Description ExtEvent Event to be invoked after the delay Methods Invoke() Invokes the event after waiting Declaration public void Invoke()"
  },
  "api/Global.DestroyAction.html": {
    "href": "api/Global.DestroyAction.html",
    "title": "Class DestroyAction | Heroes of the Shrine",
    "keywords": "Class DestroyAction Destroys multiple Inheritance Object BaseComponent DestroyAction Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class DestroyAction : BaseComponent Fields objects Objects to destroy Declaration public GameObject[] objects Field Value Type Description GameObject [] Methods Invoke() Destroy DestroyAction.objects Declaration public void Invoke()"
  },
  "api/Global.DieBehaviour.html": {
    "href": "api/Global.DieBehaviour.html",
    "title": "Class DieBehaviour | Heroes of the Shrine",
    "keywords": "Class DieBehaviour Behaviours that handles death of character Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour DieBehaviour Inherited Members CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Awake() CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class DieBehaviour : CharacterBehaviour Fields deathAnimationDuration Declaration public float deathAnimationDuration Field Value Type Description Single Time before character is destroyed. Used only if DieBehaviour.destroyOnDeath is true . destroyOnDeath Declaration public bool destroyOnDeath Field Value Type Description Boolean If true , destroys the character after death animation is over onDie Declaration public ExtEvent onDie Field Value Type Description ExtEvent Invoked when character dies"
  },
  "api/Global.DieBrainModule.html": {
    "href": "api/Global.DieBrainModule.html",
    "title": "Class DieBrainModule | Heroes of the Shrine",
    "keywords": "Class DieBrainModule State machine parameters related to DieBehaviour Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour BrainModule DieBrainModule Inherited Members BrainModule.StateMachine BrainModule.Awake() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class DieBrainModule : BrainModule Methods GetParameters() Declaration public override string[] GetParameters() Returns Type Description String [] Overrides BrainModule.GetParameters()"
  },
  "api/Global.DistancesBrainModule.DistanceParameterEntry.html": {
    "href": "api/Global.DistancesBrainModule.DistanceParameterEntry.html",
    "title": "Class DistancesBrainModule.DistanceParameterEntry | Heroes of the Shrine",
    "keywords": "Class DistancesBrainModule.DistanceParameterEntry Point to measure distance from and update related parameters Inheritance Object DistancesBrainModule.DistanceParameterEntry Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class DistanceParameterEntry Fields groundPoint Declaration public Vector2 groundPoint Field Value Type Description Vector2 Coordinates of the point on the ground, translated to (x, 0, y) in world coordinates parameterName Declaration public string parameterName Field Value Type Description String Name of the parameter in the state machine animator"
  },
  "api/Global.DistancesBrainModule.html": {
    "href": "api/Global.DistancesBrainModule.html",
    "title": "Class DistancesBrainModule | Heroes of the Shrine",
    "keywords": "Class DistancesBrainModule State machine parameters based on distances between the enemy, to any defined point in the scene Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour BrainModule DistancesBrainModule Inherited Members BrainModule.StateMachine BrainModule.Awake() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class DistancesBrainModule : BrainModule Fields distanceAnimatorParameters Declaration public List<DistancesBrainModule.DistanceParameterEntry> distanceAnimatorParameters Field Value Type Description List < DistancesBrainModule.DistanceParameterEntry > List of points parameters Methods GetParameters() Declaration public override string[] GetParameters() Returns Type Description String [] Overrides BrainModule.GetParameters() Update() Declaration protected override void Update() Overrides BaseComponent.Update()"
  },
  "api/Global.DodgeBehaviour.Command.html": {
    "href": "api/Global.DodgeBehaviour.Command.html",
    "title": "Class DodgeBehaviour.Command | Heroes of the Shrine",
    "keywords": "Class DodgeBehaviour.Command Inheritance Object DodgeBehaviour.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command Fields direction Declaration public int direction Field Value Type Description Int32"
  },
  "api/Global.DodgeBehaviour.html": {
    "href": "api/Global.DodgeBehaviour.html",
    "title": "Class DodgeBehaviour | Heroes of the Shrine",
    "keywords": "Class DodgeBehaviour Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < DodgeBehaviour.Command > PhasedBehaviour < DodgeBehaviour.Command > DodgeBehaviour Implements IMovementBehaviour IControlledBehaviour IPlayableBehaviour Inherited Members PhasedBehaviour<DodgeBehaviour.Command>.phaseEvents PhasedBehaviour<DodgeBehaviour.Command>.Anticipating PhasedBehaviour<DodgeBehaviour.Command>.Active PhasedBehaviour<DodgeBehaviour.Command>.Recovering PhasedBehaviour<DodgeBehaviour.Command>.Playing PlayableBehaviour<DodgeBehaviour.Command>.PlayEvents PlayableBehaviour<DodgeBehaviour.Command>.Blocked PlayableBehaviour<DodgeBehaviour.Command>.Play(DodgeBehaviour.Command) PlayableBehaviour<DodgeBehaviour.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Awake() CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class DodgeBehaviour : PhasedBehaviour<DodgeBehaviour.Command>, IMovementBehaviour, IControlledBehaviour, IPlayableBehaviour Fields anticipateTime Declaration public float anticipateTime Field Value Type Description Single cooldown Declaration public Cooldown cooldown Field Value Type Description Cooldown distance Declaration public float distance Field Value Type Description Single recoveryTime Declaration public float recoveryTime Field Value Type Description Single Methods ActivePhase() Declaration protected override IEnumerator ActivePhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<DodgeBehaviour.Command>.ActivePhase() AnticipationPhase() Declaration protected override IEnumerator AnticipationPhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<DodgeBehaviour.Command>.AnticipationPhase() CanPlay(DodgeBehaviour.Command) Declaration public override bool CanPlay(DodgeBehaviour.Command command) Parameters Type Name Description DodgeBehaviour.Command command Returns Type Description Boolean Overrides PlayableBehaviour<DodgeBehaviour.Command>.CanPlay(DodgeBehaviour.Command) DoPlay(DodgeBehaviour.Command) Declaration protected override void DoPlay(DodgeBehaviour.Command command) Parameters Type Name Description DodgeBehaviour.Command command Overrides PhasedBehaviour<DodgeBehaviour.Command>.DoPlay(DodgeBehaviour.Command) DoStop() Declaration protected override void DoStop() Overrides PhasedBehaviour<DodgeBehaviour.Command>.DoStop() RecoveryPhase() Declaration protected override IEnumerator RecoveryPhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<DodgeBehaviour.Command>.RecoveryPhase() Implements IMovementBehaviour IControlledBehaviour IPlayableBehaviour"
  },
  "api/Global.EffectBar.html": {
    "href": "api/Global.EffectBar.html",
    "title": "Class EffectBar | Heroes of the Shrine",
    "keywords": "Class EffectBar Single BaseEffect`1 bar Inheritance Object BaseComponent EffectBar Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EffectBar : BaseComponent Fields effect Declaration public IEffect effect Field Value Type Description IEffect Related effect instance on a character Methods Update() Declaration protected override void Update() Overrides BaseComponent.Update()"
  },
  "api/Global.EffectsBar.EffectDefinition.html": {
    "href": "api/Global.EffectsBar.EffectDefinition.html",
    "title": "Class EffectsBar.EffectDefinition | Heroes of the Shrine",
    "keywords": "Class EffectsBar.EffectDefinition Definition for effect and its display properties Inheritance Object EffectsBar.EffectDefinition Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EffectDefinition Fields color Declaration public Color color Field Value Type Description Color Bar filling color effectType Declaration public TypeReference effectType Field Value Type Description TypeReference Type of the effect, inheriting from BaseEffect`1 icon Declaration public Sprite icon Field Value Type Description Sprite Icon displayed next to the bar"
  },
  "api/Global.EffectsBar.html": {
    "href": "api/Global.EffectsBar.html",
    "title": "Class EffectsBar | Heroes of the Shrine",
    "keywords": "Class EffectsBar Spawns EffectBar objects when player receives effects Inheritance Object BaseComponent EffectsBar Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EffectsBar : BaseComponent Fields effectBarPrefab Declaration public GameObject effectBarPrefab Field Value Type Description GameObject Prefab of a single effect bar effects Declaration public EffectsBar.EffectDefinition[] effects Field Value Type Description EffectsBar.EffectDefinition [] Effects that are displayed if applied to the character"
  },
  "api/Global.ElectrifiedEffect.Command.html": {
    "href": "api/Global.ElectrifiedEffect.Command.html",
    "title": "Class ElectrifiedEffect.Command | Heroes of the Shrine",
    "keywords": "Class ElectrifiedEffect.Command Inheritance Object ElectrifiedEffect.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command Fields duration Declaration public float duration Field Value Type Description Single speedReductionMultiplier Declaration public float speedReductionMultiplier Field Value Type Description Single"
  },
  "api/Global.ElectrifiedEffect.html": {
    "href": "api/Global.ElectrifiedEffect.html",
    "title": "Class ElectrifiedEffect | Heroes of the Shrine",
    "keywords": "Class ElectrifiedEffect Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < ElectrifiedEffect.Command > BaseEffect < ElectrifiedEffect.Command > ElectrifiedEffect Implements IEffect IPlayableBehaviour Inherited Members BaseEffect<ElectrifiedEffect.Command>.Active BaseEffect<ElectrifiedEffect.Command>.Playing PlayableBehaviour<ElectrifiedEffect.Command>.PlayEvents PlayableBehaviour<ElectrifiedEffect.Command>.Blocked PlayableBehaviour<ElectrifiedEffect.Command>.CanPlay(ElectrifiedEffect.Command) PlayableBehaviour<ElectrifiedEffect.Command>.Play(ElectrifiedEffect.Command) PlayableBehaviour<ElectrifiedEffect.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ElectrifiedEffect : BaseEffect<ElectrifiedEffect.Command>, IEffect, IPlayableBehaviour Fields particles Declaration public ParticleSystem particles Field Value Type Description ParticleSystem Methods Awake() Declaration protected override void Awake() Overrides CharacterBehaviour.Awake() DoPlay(ElectrifiedEffect.Command) Declaration protected override void DoPlay(ElectrifiedEffect.Command command) Parameters Type Name Description ElectrifiedEffect.Command command Overrides PlayableBehaviour<ElectrifiedEffect.Command>.DoPlay(ElectrifiedEffect.Command) DoStop() Declaration protected override void DoStop() Overrides PlayableBehaviour<ElectrifiedEffect.Command>.DoStop() GetProgress() Declaration public override float GetProgress() Returns Type Description Single Overrides BaseEffect<ElectrifiedEffect.Command>.GetProgress() Implements IEffect IPlayableBehaviour"
  },
  "api/Global.ElectrifyAttack.html": {
    "href": "api/Global.ElectrifyAttack.html",
    "title": "Class ElectrifyAttack | Heroes of the Shrine",
    "keywords": "Class ElectrifyAttack Active phase has two parts - periodic and explosion. After the periodic part is checking for hits a certain number of times, the explosion part starts. Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < BaseAttack.Command > PhasedBehaviour < BaseAttack.Command > BaseAttack ElectrifyAttack Implements IControlledBehaviour IPlayableBehaviour Inherited Members BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.Motion BaseAttack.IsMidair BaseAttack.Awake() BaseAttack.CanPlay(BaseAttack.Command) BaseAttack.DoPlay(BaseAttack.Command) BaseAttack.DoStop() BaseAttack.StartHitDetector(BaseHitDetector, ChainHitExecutor) PhasedBehaviour<BaseAttack.Command>.phaseEvents PhasedBehaviour<BaseAttack.Command>.Anticipating PhasedBehaviour<BaseAttack.Command>.Active PhasedBehaviour<BaseAttack.Command>.Recovering PhasedBehaviour<BaseAttack.Command>.Playing PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Blocked PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ElectrifyAttack : BaseAttack, IControlledBehaviour, IPlayableBehaviour Fields attackFlow Declaration public SimpleAttack.AttackFlow attackFlow Field Value Type Description SimpleAttack.AttackFlow explosionHitDetector Declaration public BaseHitDetector explosionHitDetector Field Value Type Description BaseHitDetector explosionHitExecutor Declaration public ChainHitExecutor explosionHitExecutor Field Value Type Description ChainHitExecutor onExplosion Declaration public ExtEvent onExplosion Field Value Type Description ExtEvent periodicHitCount Declaration public int periodicHitCount Field Value Type Description Int32 periodicHitDetector Declaration public PeriodicAbsoluteHitDetector periodicHitDetector Field Value Type Description PeriodicAbsoluteHitDetector periodicHitExecutor Declaration public ChainHitExecutor periodicHitExecutor Field Value Type Description ChainHitExecutor Methods ActivePhase() Declaration protected override IEnumerator ActivePhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<BaseAttack.Command>.ActivePhase() AnticipationPhase() Declaration protected override IEnumerator AnticipationPhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<BaseAttack.Command>.AnticipationPhase() RecoveryPhase() Declaration protected override IEnumerator RecoveryPhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<BaseAttack.Command>.RecoveryPhase() Implements IControlledBehaviour IPlayableBehaviour"
  },
  "api/Global.ElectrifyHitExecutor.html": {
    "href": "api/Global.ElectrifyHitExecutor.html",
    "title": "Class ElectrifyHitExecutor | Heroes of the Shrine",
    "keywords": "Class ElectrifyHitExecutor Hit executor that applies electrify effect to an hittable Inheritance Object ElectrifyHitExecutor Implements IHitExecutor Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ElectrifyHitExecutor : IHitExecutor Fields duration Declaration public float duration Field Value Type Description Single Effect duration speedMultiplier Declaration public float speedMultiplier Field Value Type Description Single Speed reduction caused by the effect Methods Execute(Hit) Declaration public void Execute(Hit hit) Parameters Type Name Description Hit hit Implements IHitExecutor"
  },
  "api/Global.EncounterAction.EnemySpawnDefinition.html": {
    "href": "api/Global.EncounterAction.EnemySpawnDefinition.html",
    "title": "Class EncounterAction.EnemySpawnDefinition | Heroes of the Shrine",
    "keywords": "Class EncounterAction.EnemySpawnDefinition Definition of a single enemy spawning in a wave Inheritance Object EncounterAction.EnemySpawnDefinition Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EnemySpawnDefinition Fields direction Declaration public Rotation direction Field Value Type Description Rotation Side of the camera to spawn in partOfWave Declaration public bool partOfWave Field Value Type Description Boolean If true , this enemy has to be killed for the wave to be considered \"done\" prefab Declaration public GameObject prefab Field Value Type Description GameObject Prefab of the enemy z Declaration public float z Field Value Type Description Single Z axis value in which enemy spawns"
  },
  "api/Global.EncounterAction.html": {
    "href": "api/Global.EncounterAction.html",
    "title": "Class EncounterAction | Heroes of the Shrine",
    "keywords": "Class EncounterAction Class that manages a single encounter in the scene. An encounter can have multiple waves. Inheritance Object BaseComponent EncounterAction Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EncounterAction : BaseComponent Fields cameraBorder Declaration public Rect cameraBorder Field Value Type Description Rect Border of the camera while the encounter is playing. The camera will never move out of the border. Note that the player cannot cross the camera border, but enemies can. firstWavePreSpawnedEnemies Declaration public GameObject[] firstWavePreSpawnedEnemies Field Value Type Description GameObject [] Objects in the scene of enemies that are already spawned (not prefabs!). They are considered part of the first wave, meaning they have to be killed for the wave to be considered \"done\". onWaveStart Declaration public ExtEvent onWaveStart Field Value Type Description ExtEvent Invoked when any wave starts postEncounterEvent Declaration public ExtEvent postEncounterEvent Field Value Type Description ExtEvent Invoked when last wave finishes spawnSourceDistance Declaration public float spawnSourceDistance Field Value Type Description Single Distance from the camera border side where enemy spawns. For example, if EncounterAction.EnemySpawnDefinition.direction is Rotation.Normal , then the enemy will spawn in the right point of EncounterAction.cameraBorder , plus EncounterAction.spawnSourceDistance in the x Axis. timeToAlarm Declaration public float timeToAlarm Field Value Type Description Single Delay from the time enemy is spawned, to the moment it noticed the player. After EncounterAction.timeToAlarm seconds, a trigger called \"Alarm\" is set in the enemy state machine. Does not affect EncounterAction.firstWavePreSpawnedEnemies . waveDefinitions Declaration public EncounterAction.WaveDefinition[] waveDefinitions Field Value Type Description EncounterAction.WaveDefinition [] Waves in the encounter Methods Invoke() Locks the camera and plays all waves Declaration public void Invoke() Stop() Stops the encounter after the current wave is finished. Note that it won't stop a wave while it's running. Declaration public void Stop()"
  },
  "api/Global.EncounterAction.WaveDefinition.html": {
    "href": "api/Global.EncounterAction.WaveDefinition.html",
    "title": "Class EncounterAction.WaveDefinition | Heroes of the Shrine",
    "keywords": "Class EncounterAction.WaveDefinition Definition of a single wave in the encounter Inheritance Object EncounterAction.WaveDefinition Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class WaveDefinition Fields spawnDefinitions Declaration public EncounterAction.EnemySpawnDefinition[] spawnDefinitions Field Value Type Description EncounterAction.EnemySpawnDefinition [] Enemies spawning in the wave"
  },
  "api/Global.EnemiesAttackingBrainModule.html": {
    "href": "api/Global.EnemiesAttackingBrainModule.html",
    "title": "Class EnemiesAttackingBrainModule | Heroes of the Shrine",
    "keywords": "Class EnemiesAttackingBrainModule State machine parameter telling if any enemy is attacking, including itself Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour BrainModule EnemiesAttackingBrainModule Inherited Members BrainModule.StateMachine BrainModule.Awake() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EnemiesAttackingBrainModule : BrainModule Methods GetParameters() Declaration public override string[] GetParameters() Returns Type Description String [] Overrides BrainModule.GetParameters() Update() Declaration protected override void Update() Overrides BaseComponent.Update()"
  },
  "api/Global.EnemyCountBrainModule.html": {
    "href": "api/Global.EnemyCountBrainModule.html",
    "title": "Class EnemyCountBrainModule | Heroes of the Shrine",
    "keywords": "Class EnemyCountBrainModule State machine parameter telling the number of enemies in the scene, including itself Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour BrainModule EnemyCountBrainModule Inherited Members BrainModule.StateMachine BrainModule.Awake() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EnemyCountBrainModule : BrainModule Methods GetParameters() Declaration public override string[] GetParameters() Returns Type Description String [] Overrides BrainModule.GetParameters() Update() Declaration protected override void Update() Overrides BaseComponent.Update()"
  },
  "api/Global.EnergyBar.html": {
    "href": "api/Global.EnergyBar.html",
    "title": "Class EnergyBar | Heroes of the Shrine",
    "keywords": "Class EnergyBar Inheritance Object BaseComponent EnergyBar Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EnergyBar : BaseComponent Fields energySystem Declaration public EnergySystem energySystem Field Value Type Description EnergySystem Methods Update() Declaration protected override void Update() Overrides BaseComponent.Update()"
  },
  "api/Global.EnergyBurstAttack.html": {
    "href": "api/Global.EnergyBurstAttack.html",
    "title": "Class EnergyBurstAttack | Heroes of the Shrine",
    "keywords": "Class EnergyBurstAttack Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < BaseAttack.Command > PhasedBehaviour < BaseAttack.Command > BaseAttack MotionAttack EnergyBurstAttack Implements IControlledBehaviour IPlayableBehaviour Inherited Members MotionAttack.attackFlow MotionAttack.hitDetector MotionAttack.hitExecutor MotionAttack.Motion MotionAttack.AnticipationPhase() MotionAttack.ActivePhase() MotionAttack.RecoveryPhase() BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.IsMidair BaseAttack.Awake() BaseAttack.CanPlay(BaseAttack.Command) BaseAttack.DoPlay(BaseAttack.Command) BaseAttack.DoStop() BaseAttack.StartHitDetector(BaseHitDetector, ChainHitExecutor) PhasedBehaviour<BaseAttack.Command>.phaseEvents PhasedBehaviour<BaseAttack.Command>.Anticipating PhasedBehaviour<BaseAttack.Command>.Active PhasedBehaviour<BaseAttack.Command>.Recovering PhasedBehaviour<BaseAttack.Command>.Playing PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Blocked PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EnergyBurstAttack : MotionAttack, IControlledBehaviour, IPlayableBehaviour Implements IControlledBehaviour IPlayableBehaviour"
  },
  "api/Global.EnergyRewardHitExecutor.html": {
    "href": "api/Global.EnergyRewardHitExecutor.html",
    "title": "Class EnergyRewardHitExecutor | Heroes of the Shrine",
    "keywords": "Class EnergyRewardHitExecutor Inheritance Object EnergyRewardHitExecutor Implements IHitExecutor Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EnergyRewardHitExecutor : IHitExecutor Fields energyReward Declaration public float energyReward Field Value Type Description Single Methods Execute(Hit) Declaration public void Execute(Hit hit) Parameters Type Name Description Hit hit Implements IHitExecutor"
  },
  "api/Global.EnergySystem.html": {
    "href": "api/Global.EnergySystem.html",
    "title": "Class EnergySystem | Heroes of the Shrine",
    "keywords": "Class EnergySystem Character energy system Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour EnergySystem Inherited Members CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Awake() CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EnergySystem : CharacterBehaviour Fields maxEnergy Declaration public float maxEnergy Field Value Type Description Single Character's full energy value onEnergyGrow Declaration public ExtEvent<float> onEnergyGrow Field Value Type Description ExtEvent < Single > Properties Energy Declaration public float Energy { get; } Property Value Type Description Single Current energy value Fraction Declaration public float Fraction { get; } Property Value Type Description Single Ratio between current energy to full energy Full Declaration public bool Full { get; } Property Value Type Description Boolean Methods AddEnergy(Single) Declaration public void AddEnergy(float amount) Parameters Type Name Description Single amount ResetEnergy() Declaration public void ResetEnergy() TakeEnergy(Single) Declaration public void TakeEnergy(float amount) Parameters Type Name Description Single amount"
  },
  "api/Global.EnragedBrainModule.html": {
    "href": "api/Global.EnragedBrainModule.html",
    "title": "Class EnragedBrainModule | Heroes of the Shrine",
    "keywords": "Class EnragedBrainModule State machine parameter that is set when health is below a certain value Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour BrainModule EnragedBrainModule Inherited Members BrainModule.StateMachine CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EnragedBrainModule : BrainModule Fields rageDamageMultiplier Declaration public float rageDamageMultiplier Field Value Type Description Single Attacks damage multiplier when rage is on rageHealthThreshold Declaration public float rageHealthThreshold Field Value Type Description Single Parameter is set when health gets below this value Methods Awake() Declaration protected override void Awake() Overrides BrainModule.Awake() GetParameters() Declaration public override string[] GetParameters() Returns Type Description String [] Overrides BrainModule.GetParameters()"
  },
  "api/Global.EntityBehaviour.html": {
    "href": "api/Global.EntityBehaviour.html",
    "title": "Class EntityBehaviour | Heroes of the Shrine",
    "keywords": "Class EntityBehaviour Inheritance Object BaseComponent EntityBehaviour Character CharacterBehaviour Figure Hitbox HitParticles HittableHitbox Particles PossessSource ShadowObject SpikeBall WalkableGrid Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EntityBehaviour : BaseComponent Properties Enabled If true , the behaviour is updated ( Update is called). Can be set to false multiple times, as it will change back to true only if it was set to true the same number of times. Declaration public bool Enabled { get; set; } Property Value Type Description Boolean Entity Declaration public GameEntity Entity { get; } Property Value Type Description GameEntity Methods DisableBehaviours(Type[]) Disables behaviours, meaning they are not updated. If a behaviour is disabled N times, it will have to be enabled N times so it enabled again. Declaration public void DisableBehaviours(params Type[] behaviours) Parameters Type Name Description Type [] behaviours Behaviours to disable. All of the attached behaviours from each type will be enabled. EnableBehaviours(Type[]) Enables behaviours, meaning they are updated Declaration public void EnableBehaviours(params Type[] behaviours) Parameters Type Name Description Type [] behaviours Behaviours to enable. All of the attached behaviours from each type will be enabled. GetBehaviour(Type) Declaration public EntityBehaviour GetBehaviour(Type type) Parameters Type Name Description Type type Returns Type Description EntityBehaviour GetBehaviour<T>() Declaration public T GetBehaviour<T>() Returns Type Description T Type Parameters Name Description T GetBehaviours(Type) Declaration public IEnumerable<EntityBehaviour> GetBehaviours(Type type) Parameters Type Name Description Type type Returns Type Description IEnumerable < EntityBehaviour > GetBehaviours<T>() Declaration public IEnumerable<T> GetBehaviours<T>() Returns Type Description IEnumerable <T> Type Parameters Name Description T"
  },
  "api/Global.EntityManager.html": {
    "href": "api/Global.EntityManager.html",
    "title": "Class EntityManager | Heroes of the Shrine",
    "keywords": "Class EntityManager Global store of entities, indexed with tags. Use this instead of expensive methods such as . Inheritance Object BaseComponent EntityManager Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EntityManager : BaseComponent Properties Instance Declaration public static EntityManager Instance { get; } Property Value Type Description EntityManager Instance of the singleton Methods AddEntity(GameEntity) Adds a GameEntity to the store Declaration public void AddEntity(GameEntity entity) Parameters Type Name Description GameEntity entity Entity to add CountEntities(Tag) Count how many entities have a certain tag Declaration public int CountEntities(Tag key) Parameters Type Name Description Tag key Tag to check Returns Type Description Int32 Count of entities have that tag GetEntities(Tag) Get all entities that have a certain tag Declaration public IEnumerable<GameEntity> GetEntities(Tag key) Parameters Type Name Description Tag key Tag to check Returns Type Description IEnumerable < GameEntity > All entities having that tag GetEntities(Tag[]) Get all entities that have one of a list of tags Declaration public IEnumerable<GameEntity> GetEntities(params Tag[] keys) Parameters Type Name Description Tag [] keys List of tags to check Returns Type Description IEnumerable < GameEntity > All entities having any of these tags GetEntity(Tag) Get one entity that has a certain tag Declaration public GameEntity GetEntity(Tag key) Parameters Type Name Description Tag key Tag to check Returns Type Description GameEntity Single entity having this tag. If there is none, then null is returned RemoveEntity(GameEntity) Removes a GameEntity from the store Declaration public void RemoveEntity(GameEntity entity) Parameters Type Name Description GameEntity entity Entity to remove"
  },
  "api/Global.EscapeBehaviour.Command.html": {
    "href": "api/Global.EscapeBehaviour.Command.html",
    "title": "Class EscapeBehaviour.Command | Heroes of the Shrine",
    "keywords": "Class EscapeBehaviour.Command Inheritance Object EscapeBehaviour.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command Fields fitRotation Declaration public bool fitRotation Field Value Type Description Boolean speedMultiplier Declaration public float speedMultiplier Field Value Type Description Single target Declaration public GameEntity target Field Value Type Description GameEntity"
  },
  "api/Global.EscapeBehaviour.html": {
    "href": "api/Global.EscapeBehaviour.html",
    "title": "Class EscapeBehaviour | Heroes of the Shrine",
    "keywords": "Class EscapeBehaviour Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < EscapeBehaviour.Command > EscapeBehaviour Implements IMovementBehaviour IControlledBehaviour IPlayableBehaviour Inherited Members PlayableBehaviour<EscapeBehaviour.Command>.PlayEvents PlayableBehaviour<EscapeBehaviour.Command>.Blocked PlayableBehaviour<EscapeBehaviour.Command>.CanPlay(EscapeBehaviour.Command) PlayableBehaviour<EscapeBehaviour.Command>.Play(EscapeBehaviour.Command) PlayableBehaviour<EscapeBehaviour.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EscapeBehaviour : PlayableBehaviour<EscapeBehaviour.Command>, IMovementBehaviour, IControlledBehaviour, IPlayableBehaviour Properties Active Declaration public bool Active { get; } Property Value Type Description Boolean Playing Declaration public override bool Playing { get; } Property Value Type Description Boolean Overrides PlayableBehaviour<EscapeBehaviour.Command>.Playing Methods Awake() Declaration protected override void Awake() Overrides CharacterBehaviour.Awake() DoPlay(EscapeBehaviour.Command) Declaration protected override void DoPlay(EscapeBehaviour.Command command) Parameters Type Name Description EscapeBehaviour.Command command Overrides PlayableBehaviour<EscapeBehaviour.Command>.DoPlay(EscapeBehaviour.Command) DoStop() Declaration protected override void DoStop() Overrides PlayableBehaviour<EscapeBehaviour.Command>.DoStop() Implements IMovementBehaviour IControlledBehaviour IPlayableBehaviour"
  },
  "api/Global.EscapePattern.html": {
    "href": "api/Global.EscapePattern.html",
    "title": "Class EscapePattern | Heroes of the Shrine",
    "keywords": "Class EscapePattern Inheritance Object BasePattern EscapePattern Inherited Members BasePattern.hasRandomExitTime BasePattern.minTime BasePattern.maxTime BasePattern.OnEnter BasePattern.OnExit BasePattern.OnStateUpdate(Animator, AnimatorStateInfo, Int32) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EscapePattern : BasePattern Fields speedMultiplier Declaration public float speedMultiplier Field Value Type Description Single targetTag Declaration public Tag targetTag Field Value Type Description Tag Methods OnStateEnter(Animator, AnimatorStateInfo, Int32) Declaration public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description Animator animator AnimatorStateInfo stateInfo Int32 layerIndex Overrides BasePattern.OnStateEnter(Animator, AnimatorStateInfo, Int32) OnStateExit(Animator, AnimatorStateInfo, Int32) Declaration public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description Animator animator AnimatorStateInfo stateInfo Int32 layerIndex Overrides BasePattern.OnStateExit(Animator, AnimatorStateInfo, Int32)"
  },
  "api/Global.EventManager.html": {
    "href": "api/Global.EventManager.html",
    "title": "Class EventManager | Heroes of the Shrine",
    "keywords": "Class EventManager Global component that registers events, with a similar API to BaseComponent . Should be used only in classes that don't inherit from BaseComponent . Inheritance Object BaseComponent EventManager Inherited Members BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EventManager : BaseComponent Properties Instance Declaration public static EventManager Instance { get; } Property Value Type Description EventManager Methods Cancel(String) Cancels a callable with given id. Nothing happens if is not an existing callable Declaration public void Cancel(string id) Parameters Type Name Description String id ID of the callable to cancel InvokeWhen(Func<Boolean>, Action) Executes a callable when a condition is met Declaration public string InvokeWhen(Func<bool> condition, Action action) Parameters Type Name Description Func < Boolean > condition Condition to check every frame Action action Callable to execute Returns Type Description String ID of the registered callable Register(Action) Executes a callable every frame Declaration public string Register(Action action) Parameters Type Name Description Action action Callable to execute Returns Type Description String ID of the registered callable StartInterval(Action, Single) Executes a callable repeatedly with a time delay between each call Declaration public string StartInterval(Action action, float interval) Parameters Type Name Description Action action Callable to execute Single interval Time to wait between executions, in seconds Returns Type Description String ID of the registered callable StartTimeout(Action, Single) Executes a callable after a certain delay Declaration public string StartTimeout(Action action, float timeout) Parameters Type Name Description Action action Callable to execute Single timeout Time to wait before execution, in seconds Returns Type Description String ID of the registered callable Unregister(String) Unregisters a callable with given id. Nothing happens if is not an existing callable Declaration public void Unregister(string id) Parameters Type Name Description String id ID of the callable to unregister"
  },
  "api/Global.EventWrapper.html": {
    "href": "api/Global.EventWrapper.html",
    "title": "Class EventWrapper | Heroes of the Shrine",
    "keywords": "Class EventWrapper Invoke an , which has more events than the normal Inheritance Object BaseComponent EventWrapper Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EventWrapper : BaseComponent Fields event Declaration public ExtEvent event Field Value Type Description ExtEvent Wrapped event Methods Invoke() Call the event Declaration public void Invoke()"
  },
  "api/Global.Figure.html": {
    "href": "api/Global.Figure.html",
    "title": "Class Figure | Heroes of the Shrine",
    "keywords": "Class Figure Component that updates a character's sprite according to its GameEntity Inheritance Object BaseComponent EntityBehaviour Figure Inherited Members EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Figure : EntityBehaviour Fields movableEntity Declaration public GameEntity movableEntity Field Value Type Description GameEntity Character's GameEntity Methods Update() Declaration protected override void Update() Overrides BaseComponent.Update()"
  },
  "api/Global.FireEffect.Command.html": {
    "href": "api/Global.FireEffect.Command.html",
    "title": "Class FireEffect.Command | Heroes of the Shrine",
    "keywords": "Class FireEffect.Command Inheritance Object FireEffect.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command Fields duration Declaration public readonly float duration Field Value Type Description Single hitExecutor Declaration public readonly ChainHitExecutor hitExecutor Field Value Type Description ChainHitExecutor hitInterval Declaration public readonly float hitInterval Field Value Type Description Single relatedAttack Declaration public readonly BaseAttack relatedAttack Field Value Type Description BaseAttack"
  },
  "api/Global.FireEffect.html": {
    "href": "api/Global.FireEffect.html",
    "title": "Class FireEffect | Heroes of the Shrine",
    "keywords": "Class FireEffect Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < FireEffect.Command > BaseEffect < FireEffect.Command > FireEffect Implements IEffect IPlayableBehaviour Inherited Members BaseEffect<FireEffect.Command>.Active BaseEffect<FireEffect.Command>.Playing PlayableBehaviour<FireEffect.Command>.PlayEvents PlayableBehaviour<FireEffect.Command>.Blocked PlayableBehaviour<FireEffect.Command>.CanPlay(FireEffect.Command) PlayableBehaviour<FireEffect.Command>.Play(FireEffect.Command) PlayableBehaviour<FireEffect.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Awake() CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class FireEffect : BaseEffect<FireEffect.Command>, IEffect, IPlayableBehaviour Methods DoPlay(FireEffect.Command) Declaration protected override void DoPlay(FireEffect.Command command) Parameters Type Name Description FireEffect.Command command Overrides PlayableBehaviour<FireEffect.Command>.DoPlay(FireEffect.Command) DoStop() Declaration protected override void DoStop() Overrides PlayableBehaviour<FireEffect.Command>.DoStop() GetProgress() Declaration public override float GetProgress() Returns Type Description Single Overrides BaseEffect<FireEffect.Command>.GetProgress() Implements IEffect IPlayableBehaviour"
  },
  "api/Global.FocusBlock.BlockDefinition.html": {
    "href": "api/Global.FocusBlock.BlockDefinition.html",
    "title": "Class FocusBlock.BlockDefinition | Heroes of the Shrine",
    "keywords": "Class FocusBlock.BlockDefinition Inheritance Object FocusBlock.BlockDefinition Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BlockDefinition Fields attackType Declaration public TypeReference attackType Field Value Type Description TypeReference energyReward Declaration public float energyReward Field Value Type Description Single"
  },
  "api/Global.FocusBlock.Command.html": {
    "href": "api/Global.FocusBlock.Command.html",
    "title": "Class FocusBlock.Command | Heroes of the Shrine",
    "keywords": "Class FocusBlock.Command Inheritance Object FocusBlock.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command"
  },
  "api/Global.FocusBlock.html": {
    "href": "api/Global.FocusBlock.html",
    "title": "Class FocusBlock | Heroes of the Shrine",
    "keywords": "Class FocusBlock Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < FocusBlock.Command > PhasedBehaviour < FocusBlock.Command > FocusBlock Implements IBlockBehaviour IControlledBehaviour IPlayableBehaviour Inherited Members PhasedBehaviour<FocusBlock.Command>.phaseEvents PhasedBehaviour<FocusBlock.Command>.Anticipating PhasedBehaviour<FocusBlock.Command>.Active PhasedBehaviour<FocusBlock.Command>.Recovering PlayableBehaviour<FocusBlock.Command>.PlayEvents PlayableBehaviour<FocusBlock.Command>.Blocked PlayableBehaviour<FocusBlock.Command>.Play(FocusBlock.Command) PlayableBehaviour<FocusBlock.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class FocusBlock : PhasedBehaviour<FocusBlock.Command>, IBlockBehaviour, IControlledBehaviour, IPlayableBehaviour Fields activeTime Declaration public float activeTime Field Value Type Description Single anticipateTime Declaration public float anticipateTime Field Value Type Description Single blockableAttacks Declaration public FocusBlock.BlockDefinition[] blockableAttacks Field Value Type Description FocusBlock.BlockDefinition [] invincibleTime Declaration public float invincibleTime Field Value Type Description Single onFinishInvincible Declaration public ExtEvent onFinishInvincible Field Value Type Description ExtEvent onStartInvincible Declaration public ExtEvent onStartInvincible Field Value Type Description ExtEvent recoveryTime Declaration public float recoveryTime Field Value Type Description Single Properties Invincible Declaration public bool Invincible { get; } Property Value Type Description Boolean Invincible to hits. It also sets the animator parameter: FocusBlock-invincible . Playing Declaration public override bool Playing { get; } Property Value Type Description Boolean Overrides PhasedBehaviour<FocusBlock.Command>.Playing Methods ActivePhase() Declaration protected override IEnumerator ActivePhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<FocusBlock.Command>.ActivePhase() AnticipationPhase() Declaration protected override IEnumerator AnticipationPhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<FocusBlock.Command>.AnticipationPhase() Awake() Declaration protected override void Awake() Overrides CharacterBehaviour.Awake() CanPlay(FocusBlock.Command) Declaration public override bool CanPlay(FocusBlock.Command command) Parameters Type Name Description FocusBlock.Command command Returns Type Description Boolean Overrides PlayableBehaviour<FocusBlock.Command>.CanPlay(FocusBlock.Command) DoPlay(FocusBlock.Command) Declaration protected override void DoPlay(FocusBlock.Command command) Parameters Type Name Description FocusBlock.Command command Overrides PhasedBehaviour<FocusBlock.Command>.DoPlay(FocusBlock.Command) DoStop() Declaration protected override void DoStop() Overrides PhasedBehaviour<FocusBlock.Command>.DoStop() RecoveryPhase() Declaration protected override IEnumerator RecoveryPhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<FocusBlock.Command>.RecoveryPhase() TryBlock(Hit) Declaration public bool TryBlock(Hit hit) Parameters Type Name Description Hit hit Returns Type Description Boolean Implements IBlockBehaviour IControlledBehaviour IPlayableBehaviour"
  },
  "api/Global.FollowBehaviour.Command.html": {
    "href": "api/Global.FollowBehaviour.Command.html",
    "title": "Class FollowBehaviour.Command | Heroes of the Shrine",
    "keywords": "Class FollowBehaviour.Command Inheritance Object FollowBehaviour.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command Fields getExcluded Declaration public Func<Node[]> getExcluded Field Value Type Description Func < Node []> getOverrideDirection Declaration public GetOverrideDirection getOverrideDirection Field Value Type Description GetOverrideDirection target Declaration public GameEntity target Field Value Type Description GameEntity"
  },
  "api/Global.FollowBehaviour.html": {
    "href": "api/Global.FollowBehaviour.html",
    "title": "Class FollowBehaviour | Heroes of the Shrine",
    "keywords": "Class FollowBehaviour Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < FollowBehaviour.Command > FollowBehaviour Implements IMovementBehaviour IControlledBehaviour IPlayableBehaviour Inherited Members PlayableBehaviour<FollowBehaviour.Command>.PlayEvents PlayableBehaviour<FollowBehaviour.Command>.Blocked PlayableBehaviour<FollowBehaviour.Command>.CanPlay(FollowBehaviour.Command) PlayableBehaviour<FollowBehaviour.Command>.Play(FollowBehaviour.Command) PlayableBehaviour<FollowBehaviour.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class FollowBehaviour : PlayableBehaviour<FollowBehaviour.Command>, IMovementBehaviour, IControlledBehaviour, IPlayableBehaviour Properties Playing Declaration public override bool Playing { get; } Property Value Type Description Boolean Overrides PlayableBehaviour<FollowBehaviour.Command>.Playing Methods Awake() Declaration protected override void Awake() Overrides CharacterBehaviour.Awake() DoPlay(FollowBehaviour.Command) Declaration protected override void DoPlay(FollowBehaviour.Command command) Parameters Type Name Description FollowBehaviour.Command command Overrides PlayableBehaviour<FollowBehaviour.Command>.DoPlay(FollowBehaviour.Command) DoStop() Declaration protected override void DoStop() Overrides PlayableBehaviour<FollowBehaviour.Command>.DoStop() Implements IMovementBehaviour IControlledBehaviour IPlayableBehaviour"
  },
  "api/Global.FollowPattern.html": {
    "href": "api/Global.FollowPattern.html",
    "title": "Class FollowPattern | Heroes of the Shrine",
    "keywords": "Class FollowPattern Inheritance Object BasePattern FollowPattern Inherited Members BasePattern.hasRandomExitTime BasePattern.minTime BasePattern.maxTime BasePattern.OnEnter BasePattern.OnExit BasePattern.OnStateUpdate(Animator, AnimatorStateInfo, Int32) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class FollowPattern : BasePattern Fields speedMultiplier Declaration public float speedMultiplier Field Value Type Description Single targetTag Declaration public Tag targetTag Field Value Type Description Tag Methods OnStateEnter(Animator, AnimatorStateInfo, Int32) Declaration public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description Animator animator AnimatorStateInfo stateInfo Int32 layerIndex Overrides BasePattern.OnStateEnter(Animator, AnimatorStateInfo, Int32) OnStateExit(Animator, AnimatorStateInfo, Int32) Declaration public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description Animator animator AnimatorStateInfo stateInfo Int32 layerIndex Overrides BasePattern.OnStateExit(Animator, AnimatorStateInfo, Int32)"
  },
  "api/Global.ForcedWalkBehaviour.Command.html": {
    "href": "api/Global.ForcedWalkBehaviour.Command.html",
    "title": "Class ForcedWalkBehaviour.Command | Heroes of the Shrine",
    "keywords": "Class ForcedWalkBehaviour.Command Inheritance Object ForcedWalkBehaviour.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command Fields point Declaration public Vector3 point Field Value Type Description Vector3 wantedDistance Declaration public float wantedDistance Field Value Type Description Single"
  },
  "api/Global.ForcedWalkBehaviour.html": {
    "href": "api/Global.ForcedWalkBehaviour.html",
    "title": "Class ForcedWalkBehaviour | Heroes of the Shrine",
    "keywords": "Class ForcedWalkBehaviour Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < ForcedWalkBehaviour.Command > ForcedWalkBehaviour Implements IPlayableBehaviour Inherited Members PlayableBehaviour<ForcedWalkBehaviour.Command>.PlayEvents PlayableBehaviour<ForcedWalkBehaviour.Command>.Blocked PlayableBehaviour<ForcedWalkBehaviour.Command>.CanPlay(ForcedWalkBehaviour.Command) PlayableBehaviour<ForcedWalkBehaviour.Command>.Play(ForcedWalkBehaviour.Command) PlayableBehaviour<ForcedWalkBehaviour.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Awake() CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ForcedWalkBehaviour : PlayableBehaviour<ForcedWalkBehaviour.Command>, IPlayableBehaviour Properties Playing Declaration public override bool Playing { get; } Property Value Type Description Boolean Overrides PlayableBehaviour<ForcedWalkBehaviour.Command>.Playing Methods DoPlay(ForcedWalkBehaviour.Command) Declaration protected override void DoPlay(ForcedWalkBehaviour.Command command) Parameters Type Name Description ForcedWalkBehaviour.Command command Overrides PlayableBehaviour<ForcedWalkBehaviour.Command>.DoPlay(ForcedWalkBehaviour.Command) DoStop() Declaration protected override void DoStop() Overrides PlayableBehaviour<ForcedWalkBehaviour.Command>.DoStop() Implements IPlayableBehaviour"
  },
  "api/Global.ForwardPushAttack.AttackFlow.html": {
    "href": "api/Global.ForwardPushAttack.AttackFlow.html",
    "title": "Class ForwardPushAttack.AttackFlow | Heroes of the Shrine",
    "keywords": "Class ForwardPushAttack.AttackFlow Inheritance Object ForwardPushAttack.AttackFlow Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AttackFlow Fields activeDuration Declaration public float activeDuration Field Value Type Description Single anticipationDuration Declaration public float anticipationDuration Field Value Type Description Single detector1Duration Declaration public float detector1Duration Field Value Type Description Single detector1StartTime Declaration public float detector1StartTime Field Value Type Description Single detector2Duration Declaration public float detector2Duration Field Value Type Description Single detector2StartTime Declaration public float detector2StartTime Field Value Type Description Single recoveryDuration Declaration public float recoveryDuration Field Value Type Description Single"
  },
  "api/Global.ForwardPushAttack.html": {
    "href": "api/Global.ForwardPushAttack.html",
    "title": "Class ForwardPushAttack | Heroes of the Shrine",
    "keywords": "Class ForwardPushAttack Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < BaseAttack.Command > PhasedBehaviour < BaseAttack.Command > BaseAttack ForwardPushAttack Implements IControlledBehaviour IPlayableBehaviour Inherited Members BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.Motion BaseAttack.IsMidair BaseAttack.Awake() BaseAttack.CanPlay(BaseAttack.Command) BaseAttack.DoPlay(BaseAttack.Command) BaseAttack.DoStop() BaseAttack.StartHitDetector(BaseHitDetector, ChainHitExecutor) PhasedBehaviour<BaseAttack.Command>.phaseEvents PhasedBehaviour<BaseAttack.Command>.Anticipating PhasedBehaviour<BaseAttack.Command>.Active PhasedBehaviour<BaseAttack.Command>.Recovering PhasedBehaviour<BaseAttack.Command>.Playing PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Blocked PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ForwardPushAttack : BaseAttack, IControlledBehaviour, IPlayableBehaviour Fields attackFlow Declaration public ForwardPushAttack.AttackFlow attackFlow Field Value Type Description ForwardPushAttack.AttackFlow hitDetector1 Declaration public BaseHitDetector hitDetector1 Field Value Type Description BaseHitDetector hitDetector2 Declaration public BaseHitDetector hitDetector2 Field Value Type Description BaseHitDetector hitExecutor1 Declaration public ChainHitExecutor hitExecutor1 Field Value Type Description ChainHitExecutor hitExecutor2 Declaration public ChainHitExecutor hitExecutor2 Field Value Type Description ChainHitExecutor speed Declaration public float speed Field Value Type Description Single Methods ActivePhase() Declaration protected override IEnumerator ActivePhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<BaseAttack.Command>.ActivePhase() AnticipationPhase() Declaration protected override IEnumerator AnticipationPhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<BaseAttack.Command>.AnticipationPhase() RecoveryPhase() Declaration protected override IEnumerator RecoveryPhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<BaseAttack.Command>.RecoveryPhase() Implements IControlledBehaviour IPlayableBehaviour"
  },
  "api/Global.FullScreenToggle.html": {
    "href": "api/Global.FullScreenToggle.html",
    "title": "Class FullScreenToggle | Heroes of the Shrine",
    "keywords": "Class FullScreenToggle Toggles full screen for game window. This class syncs between the state and the \"full screen state\". Inheritance Object BaseComponent FullScreenToggle Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class FullScreenToggle : BaseComponent Fields button Declaration public Toggle button Field Value Type Description Toggle Related checkbox"
  },
  "api/Global.GameEntity.html": {
    "href": "api/Global.GameEntity.html",
    "title": "Class GameEntity | Heroes of the Shrine",
    "keywords": "Class GameEntity The well known and loved GameEntity is a bridge between Heroes of the Shrine's coordinates system, that has 3 (!) axes, to Unity's that has only 2 Inheritance Object BaseComponent GameEntity MovableEntity Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class GameEntity : BaseComponent Fields parent Declaration public GameEntity parent Field Value Type Description GameEntity Parent GameEntity . Leave null if the object has no parents that are GameEntity . position Declaration public Vector3 position Field Value Type Description Vector3 Local position of the entity, relative to GameEntity.parent rotation Declaration public Rotation rotation Field Value Type Description Rotation Local rotation of the entity, relative to GameEntity.parent scale Declaration public Vector3 scale Field Value Type Description Vector3 Local scale of the entity, relative to GameEntity.parent tags Declaration public Tags tags Field Value Type Description Tags Tags of the entity, multiple tags are allowed Properties GroundWorldPosition Absolute position in world coordinates, with y=0 Declaration public Vector3 GroundWorldPosition { get; } Property Value Type Description Vector3 SortingOrder Declaration public int SortingOrder { get; } Property Value Type Description Int32 Sorting order that related objects should have. Based on the Z position. WorldPosition Absolute position in world coordinates Declaration public Vector3 WorldPosition { get; } Property Value Type Description Vector3 WorldRotation Absolute rotation Declaration public Rotation WorldRotation { get; set; } Property Value Type Description Rotation WorldScale Absolute scale Declaration public Vector3 WorldScale { get; } Property Value Type Description Vector3 Methods Awake() Declaration protected virtual void Awake() GetBehaviour(Type, Boolean) Declaration public EntityBehaviour GetBehaviour(Type type, bool exactType = false) Parameters Type Name Description Type type Boolean exactType Returns Type Description EntityBehaviour GetBehaviour<T>(Boolean) Declaration public T GetBehaviour<T>(bool exactType = false) Parameters Type Name Description Boolean exactType Returns Type Description T Type Parameters Name Description T GetBehaviours(Type, Boolean) Declaration public IEnumerable<EntityBehaviour> GetBehaviours(Type type, bool exactType = false) Parameters Type Name Description Type type Boolean exactType Returns Type Description IEnumerable < EntityBehaviour > GetBehaviours<T>(Boolean) Declaration public IEnumerable<T> GetBehaviours<T>(bool exactType = false) Parameters Type Name Description Boolean exactType Returns Type Description IEnumerable <T> Type Parameters Name Description T GroundDistance(Vector3) Distance a point, excluding the Y distance Declaration public float GroundDistance(Vector3 point) Parameters Type Name Description Vector3 point World point to measure distance from Returns Type Description Single GroundScreenCoordinates(Vector3) Converts a game point to the point where is rendered on the screen, without entity elevation (game's Y position) Declaration public static Vector3 GroundScreenCoordinates(Vector3 v) Parameters Type Name Description Vector3 v World position of the point, in game coordinates Returns Type Description Vector3 Instantiate(GameObject, GameEntity, Vector3, Rotation) Declaration public static GameEntity Instantiate(GameObject prefab, GameEntity parent, Vector3 position, Rotation rotation = null) Parameters Type Name Description GameObject prefab GameEntity parent Vector3 position Rotation rotation Returns Type Description GameEntity Instantiate(GameObject, Vector3, Rotation) Declaration public static GameEntity Instantiate(GameObject prefab, Vector3 position, Rotation rotation = null) Parameters Type Name Description GameObject prefab Vector3 position Rotation rotation Returns Type Description GameEntity ScreenCoordinates(Vector3) Converts a game point to the point where is rendered on the screen, including elevation Declaration public static Vector3 ScreenCoordinates(Vector3 v) Parameters Type Name Description Vector3 v World position of the point, in game coordinates Returns Type Description Vector3 TransformToRelative(Vector3) Transforms an absolute coordinate to a relative one Declaration public Vector3 TransformToRelative(Vector3 worldPoint) Parameters Type Name Description Vector3 worldPoint Absolute point Returns Type Description Vector3 TransformToWorld(Vector3) Transforms a relative coordinate to an absolute one Declaration public Vector3 TransformToWorld(Vector3 relativePoint) Parameters Type Name Description Vector3 relativePoint Point relative to this entity Returns Type Description Vector3 Update() Declaration protected override void Update() Overrides BaseComponent.Update() UpdateTransform() Declaration protected void UpdateTransform()"
  },
  "api/Global.GameManager.html": {
    "href": "api/Global.GameManager.html",
    "title": "Class GameManager | Heroes of the Shrine",
    "keywords": "Class GameManager Class including general level operations Inheritance Object BaseComponent GameManager Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class GameManager : BaseComponent Fields firstSceneName Declaration public string firstSceneName Field Value Type Description String Name of the first scene in the level, taken from the scene file name Methods PlayAgain() Moves to the first scene in the level Declaration public void PlayAgain() Quit() Quits the game entirely Declaration public void Quit() Restart() Restarts current scene Declaration public void Restart()"
  },
  "api/Global.GetOverrideDirection.html": {
    "href": "api/Global.GetOverrideDirection.html",
    "title": "Delegate GetOverrideDirection | Heroes of the Shrine",
    "keywords": "Delegate GetOverrideDirection Namespace : Global Assembly : cs.temp.dll.dll Syntax public delegate bool GetOverrideDirection(out Vector3 direction); Parameters Type Name Description Vector3 direction Returns Type Description Boolean"
  },
  "api/Global.HealBehaviour.Command.html": {
    "href": "api/Global.HealBehaviour.Command.html",
    "title": "Class HealBehaviour.Command | Heroes of the Shrine",
    "keywords": "Class HealBehaviour.Command Inheritance Object HealBehaviour.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command"
  },
  "api/Global.HealBehaviour.html": {
    "href": "api/Global.HealBehaviour.html",
    "title": "Class HealBehaviour | Heroes of the Shrine",
    "keywords": "Class HealBehaviour Behaviour that heals the character Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < HealBehaviour.Command > HealBehaviour Implements IPlayableBehaviour Inherited Members PlayableBehaviour<HealBehaviour.Command>.PlayEvents PlayableBehaviour<HealBehaviour.Command>.Blocked PlayableBehaviour<HealBehaviour.Command>.Play(HealBehaviour.Command) PlayableBehaviour<HealBehaviour.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class HealBehaviour : PlayableBehaviour<HealBehaviour.Command>, IPlayableBehaviour Fields activeDuration Declaration public float activeDuration Field Value Type Description Single cooldown Declaration public Cooldown cooldown Field Value Type Description Cooldown energyToHealthRatio Declaration public float energyToHealthRatio Field Value Type Description Single fullEnergyHealthReward Declaration public float fullEnergyHealthReward Field Value Type Description Single Properties Playing Declaration public override bool Playing { get; } Property Value Type Description Boolean Overrides PlayableBehaviour<HealBehaviour.Command>.Playing Methods Awake() Declaration protected override void Awake() Overrides CharacterBehaviour.Awake() CanPlay(HealBehaviour.Command) Declaration public override bool CanPlay(HealBehaviour.Command command) Parameters Type Name Description HealBehaviour.Command command Returns Type Description Boolean Overrides PlayableBehaviour<HealBehaviour.Command>.CanPlay(HealBehaviour.Command) DoPlay(HealBehaviour.Command) Declaration protected override void DoPlay(HealBehaviour.Command command) Parameters Type Name Description HealBehaviour.Command command Overrides PlayableBehaviour<HealBehaviour.Command>.DoPlay(HealBehaviour.Command) DoStop() Declaration protected override void DoStop() Overrides PlayableBehaviour<HealBehaviour.Command>.DoStop() Implements IPlayableBehaviour"
  },
  "api/Global.HealthBar.html": {
    "href": "api/Global.HealthBar.html",
    "title": "Class HealthBar | Heroes of the Shrine",
    "keywords": "Class HealthBar Bar that displays the part of health left in HealthBar.healthSystem Inheritance Object BaseComponent HealthBar Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class HealthBar : BaseComponent Fields healthSystem Declaration public HealthSystem healthSystem Field Value Type Description HealthSystem Related HealthBar.healthSystem Methods Update() Declaration protected override void Update() Overrides BaseComponent.Update()"
  },
  "api/Global.HealthBrainModule.html": {
    "href": "api/Global.HealthBrainModule.html",
    "title": "Class HealthBrainModule | Heroes of the Shrine",
    "keywords": "Class HealthBrainModule State machine parameters related to HealthBrainModule.healthSystem Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour BrainModule HealthBrainModule Inherited Members BrainModule.StateMachine CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class HealthBrainModule : BrainModule Methods Awake() Declaration protected override void Awake() Overrides BrainModule.Awake() GetParameters() Declaration public override string[] GetParameters() Returns Type Description String [] Overrides BrainModule.GetParameters() Update() Declaration protected override void Update() Overrides BaseComponent.Update()"
  },
  "api/Global.HealthSystem.html": {
    "href": "api/Global.HealthSystem.html",
    "title": "Class HealthSystem | Heroes of the Shrine",
    "keywords": "Class HealthSystem Character health system Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour HealthSystem Inherited Members CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class HealthSystem : CharacterBehaviour Fields damageMultiplier Declaration public float damageMultiplier Field Value Type Description Single Multiplier for any damage that character is getting onHit Declaration public ExtEvent onHit Field Value Type Description ExtEvent Invoked when HealthSystem.Hit(System.Single) is called startHealth Declaration public float startHealth Field Value Type Description Single Character's full health value Properties Alive Declaration public bool Alive { get; } Property Value Type Description Boolean Is character alive Fraction Declaration public float Fraction { get; } Property Value Type Description Single Ratio between current health to full health Health Declaration public float Health { get; } Property Value Type Description Single Current health value Methods Awake() Declaration protected override void Awake() Overrides CharacterBehaviour.Awake() Heal(Single) Declaration public void Heal(float amount) Parameters Type Name Description Single amount Hit(Single) Declaration public void Hit(float damage) Parameters Type Name Description Single damage Kill() Kill character by setting health to 0 Declaration public void Kill()"
  },
  "api/Global.Hit.html": {
    "href": "api/Global.Hit.html",
    "title": "Class Hit | Heroes of the Shrine",
    "keywords": "Class Hit Inheritance Object Hit Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Hit Fields direction Declaration public int direction Field Value Type Description Int32 Direction the hit is pointed towards source Declaration public BaseAttack source Field Value Type Description BaseAttack Related attack that made hit victim Declaration public IHittable victim Field Value Type Description IHittable Hittable that got hit"
  },
  "api/Global.Hitbox.html": {
    "href": "api/Global.Hitbox.html",
    "title": "Class Hitbox | Heroes of the Shrine",
    "keywords": "Class Hitbox Hitbox for an attack, particle, or an object that can get hit Inheritance Object BaseComponent EntityBehaviour Hitbox Inherited Members EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Hitbox : EntityBehaviour Fields size Declaration public Vector3 size Field Value Type Description Vector3 Hitbox size Properties WorldPosition Declaration public Vector3 WorldPosition { get; } Property Value Type Description Vector3 Hitbox center point in world coordinates Methods GetIntersectionCenter(Hitbox) Finds the middle point in the intersection volume between two hitboxes Declaration public Vector3 GetIntersectionCenter(Hitbox other) Parameters Type Name Description Hitbox other Returns Type Description Vector3 IsInside(Vector3) Checks if a point is inside the hitbox Declaration public bool IsInside(Vector3 point) Parameters Type Name Description Vector3 point Returns Type Description Boolean OverlapHitbox(Hitbox) Checks if this hitbox intersects another hitbox Declaration public bool OverlapHitbox(Hitbox other) Parameters Type Name Description Hitbox other Returns Type Description Boolean"
  },
  "api/Global.HitParticles.html": {
    "href": "api/Global.HitParticles.html",
    "title": "Class HitParticles | Heroes of the Shrine",
    "keywords": "Class HitParticles Class for spawning particles when a IHittable is hit Inheritance Object BaseComponent EntityBehaviour HitParticles Inherited Members EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class HitParticles : EntityBehaviour Fields prefab Declaration public GameObject prefab Field Value Type Description GameObject Prefab of the particles Methods Play(Vector3, IHittable) Spawns the particles in the given position, and sets its sorting layer to be higher than both the hitting and the hit object Declaration public void Play(Vector3 hitPoint, IHittable hittable) Parameters Type Name Description Vector3 hitPoint Source point of the particle IHittable hittable The object hit by the attack"
  },
  "api/Global.HittableBehaviour.html": {
    "href": "api/Global.HittableBehaviour.html",
    "title": "Class HittableBehaviour | Heroes of the Shrine",
    "keywords": "Class HittableBehaviour Behaviours responsible for processing hits from attacks Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour HittableBehaviour Implements IHittable Inherited Members CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class HittableBehaviour : CharacterBehaviour, IHittable Fields onHit Declaration public ExtEvent onHit Field Value Type Description ExtEvent Invoked when HittableBehaviour.ProcessHit(IHitExecutor,Hit) is called Properties HitEvent Declaration public ExtEvent HitEvent { get; } Property Value Type Description ExtEvent Methods Awake() Declaration protected override void Awake() Overrides CharacterBehaviour.Awake() CanGetHit() Declaration public bool CanGetHit() Returns Type Description Boolean Hit(ChainHitExecutor, Hit) Declaration public void Hit(ChainHitExecutor executor, Hit hit) Parameters Type Name Description ChainHitExecutor executor Hit hit ProcessHit(IHitExecutor, Hit) Declaration public void ProcessHit(IHitExecutor executor, Hit hit) Parameters Type Name Description IHitExecutor executor Hit hit Implements IHittable"
  },
  "api/Global.HittableHitbox.html": {
    "href": "api/Global.HittableHitbox.html",
    "title": "Class HittableHitbox | Heroes of the Shrine",
    "keywords": "Class HittableHitbox Hittable attached to a hitbox, related to a HittableHitbox.hittableBehaviour of a character Inheritance Object BaseComponent EntityBehaviour HittableHitbox BossHittableHitbox SuperArmorHittableHitbox Implements IHittable Inherited Members EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class HittableHitbox : EntityBehaviour, IHittable Fields blinkMaterial Declaration public Material blinkMaterial Field Value Type Description Material Material that HittableHitbox.figure changes to during blink effect blinkTime Declaration public float blinkTime Field Value Type Description Single Duration of blink effect figure Declaration public SpriteRenderer figure Field Value Type Description SpriteRenderer on which blink effect is played hittableBehaviour Declaration public HittableBehaviour hittableBehaviour Field Value Type Description HittableBehaviour HittableHitbox.hittableBehaviour of the related character onHit Declaration public ExtEvent onHit Field Value Type Description ExtEvent Invoked when HittableHitbox.ProcessHit(IHitExecutor,Hit) is called Properties Character Declaration public Character Character { get; } Property Value Type Description Character Hitbox Declaration public Hitbox Hitbox { get; } Property Value Type Description Hitbox Related hitbox HitEvent Declaration public ExtEvent HitEvent { get; } Property Value Type Description ExtEvent Methods Awake() Declaration protected virtual void Awake() CanGetHit() Declaration public bool CanGetHit() Returns Type Description Boolean Hit(ChainHitExecutor, Hit) Declaration public virtual void Hit(ChainHitExecutor executor, Hit hit) Parameters Type Name Description ChainHitExecutor executor Hit hit ProcessHit(IHitExecutor, Hit) Declaration public virtual void ProcessHit(IHitExecutor executor, Hit hit) Parameters Type Name Description IHitExecutor executor Hit hit Implements IHittable"
  },
  "api/Global.HitValueTranspiler-1.html": {
    "href": "api/Global.HitValueTranspiler-1.html",
    "title": "Class HitValueTranspiler<T> | Heroes of the Shrine",
    "keywords": "Class HitValueTranspiler<T> Inheritance Object HitValueTranspiler<T> DamageTranspiler KnockbackPowerTranspiler Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class HitValueTranspiler<T> Type Parameters Name Description T Constructors HitValueTranspiler() Declaration public HitValueTranspiler() Methods Add(HitValueTranspiler<T>.TranspileCallable) Declaration public void Add(HitValueTranspiler<T>.TranspileCallable callable) Parameters Type Name Description HitValueTranspiler.TranspileCallable <> callable Remove(HitValueTranspiler<T>.TranspileCallable) Declaration public void Remove(HitValueTranspiler<T>.TranspileCallable callable) Parameters Type Name Description HitValueTranspiler.TranspileCallable <> callable Transpile(BaseAttack, IHittable, T) Declaration public T Transpile(BaseAttack attack, IHittable hittable, T value) Parameters Type Name Description BaseAttack attack IHittable hittable T value Returns Type Description T"
  },
  "api/Global.HitValueTranspiler-1.TranspileCallable.html": {
    "href": "api/Global.HitValueTranspiler-1.TranspileCallable.html",
    "title": "Delegate HitValueTranspiler<T>.TranspileCallable | Heroes of the Shrine",
    "keywords": "Delegate HitValueTranspiler<T>.TranspileCallable Namespace : Global Assembly : cs.temp.dll.dll Syntax public delegate T TranspileCallable(BaseAttack attack, IHittable hittable, T value); Parameters Type Name Description BaseAttack attack IHittable hittable T value Returns Type Description T"
  },
  "api/Global.html": {
    "href": "api/Global.html",
    "title": "Namespace Global | Heroes of the Shrine",
    "keywords": "Namespace Global Classes AbsoluteHitDetector An hit detector that detects hits only in the frame it is started AddIconToHierarchy AggressionBrainModule State machine aggression parameter, assigned with a random value (0-1) before each state transition. Can be used for randomizing transitions. AirAttack Attack that can be only be played when jumping, and does not prevent walking AirSpinAttack AlarmBrainModule State machine trigger parameter that can be used for transition between non-aggressive state to aggressive state. Must be called manually. AltAirAttack AltCounterAttack AltNormalAttack ArcBehaviour ArcBehaviour.Command ArcPattern AttackManager Behaviour that runs operation on all attacks AttackNode AttackPattern AudioManager Singleton responsible for playing background music and SFX AutoWalkBehaviour AutoWalkBehaviour.Command BackwardLaunchAttack BackwardLaunchAttack.AttackFlow BaseAttack Base class for all attacks. Most attacks should derive from SimpleAttack , which has more members and helper methods. BaseAttack.Command BaseComponent Base class for every component, extending with more features BaseEffect<T> Base class for effects that character can receive by getting hit BaseHitDetector Abstract base class for hit detectors, responsible for detecting hits and calling a given function for every hit object BasePattern BasePatternEditor BossHittableHitbox HittableHitbox that converts knockback to stun BrainCore Enemies brain is designed with modular pieces called brain modules. BrainCore class managing state machine and all brain modules. Attach only the required brain modules for your state machine logic. BrainModule Modular piece of enemy brain. This is a base abstract class for any brain module BrainModuleEditor CameraFocus Zooms the camera smoothly CameraFollow Make camera follow an entity CameraMovement Moves the camera smoothly inside a rectangle border ChainHitExecutor Composite hit executor that executes all executors one by one Character Shared methods and common components references for characters CharacterBehaviour Base class for all character behaviours. Contains useful methods and references to other components. CharacterController Base class for any character controller CharacterStats Stats of a character ClosestEnemyBrainModule State machine parameter telling the distance from the closest enemy ClosestToPlayerBrainModule State machine parameter telling if this is the closest enemy to the player Cooldown CounterAttack CutsceneAction Moves entities to predefined points and then plays a cutscene timeline CutsceneAction.MoveDefinition Defines how character should move before the cutscene timeline starts DamageHitExecutor Hit executor that deals damage to an hittable DamageTranspiler DeathPanel Plays transitions on a panel when it is activated DeathPanel.Transition DelayedEvent Invokes an event after waiting a given delay DestroyAction Destroys multiple DieBehaviour Behaviours that handles death of character DieBrainModule State machine parameters related to DieBehaviour DistancesBrainModule State machine parameters based on distances between the enemy, to any defined point in the scene DistancesBrainModule.DistanceParameterEntry Point to measure distance from and update related parameters DodgeBehaviour DodgeBehaviour.Command EffectBar Single BaseEffect`1 bar EffectsBar Spawns EffectBar objects when player receives effects EffectsBar.EffectDefinition Definition for effect and its display properties ElectrifiedEffect ElectrifiedEffect.Command ElectrifyAttack Active phase has two parts - periodic and explosion. After the periodic part is checking for hits a certain number of times, the explosion part starts. ElectrifyHitExecutor Hit executor that applies electrify effect to an hittable EncounterAction Class that manages a single encounter in the scene. An encounter can have multiple waves. EncounterAction.EnemySpawnDefinition Definition of a single enemy spawning in a wave EncounterAction.WaveDefinition Definition of a single wave in the encounter EnemiesAttackingBrainModule State machine parameter telling if any enemy is attacking, including itself EnemyCountBrainModule State machine parameter telling the number of enemies in the scene, including itself EnergyBar EnergyBurstAttack EnergyRewardHitExecutor EnergySystem Character energy system EnragedBrainModule State machine parameter that is set when health is below a certain value EntityBehaviour EntityManager Global store of entities, indexed with tags. Use this instead of expensive methods such as . EscapeBehaviour EscapeBehaviour.Command EscapePattern EventManager Global component that registers events, with a similar API to BaseComponent . Should be used only in classes that don't inherit from BaseComponent . EventWrapper Invoke an , which has more events than the normal Figure Component that updates a character's sprite according to its GameEntity FireEffect FireEffect.Command FocusBlock FocusBlock.BlockDefinition FocusBlock.Command FollowBehaviour FollowBehaviour.Command FollowPattern ForcedWalkBehaviour ForcedWalkBehaviour.Command ForwardPushAttack ForwardPushAttack.AttackFlow FullScreenToggle Toggles full screen for game window. This class syncs between the state and the \"full screen state\". GameEntity The well known and loved GameEntity is a bridge between Heroes of the Shrine's coordinates system, that has 3 (!) axes, to Unity's that has only 2 GameManager Class including general level operations HealBehaviour Behaviour that heals the character HealBehaviour.Command HealthBar Bar that displays the part of health left in HealthBar.healthSystem HealthBrainModule State machine parameters related to HealthBrainModule.healthSystem HealthSystem Character health system Hit Hitbox Hitbox for an attack, particle, or an object that can get hit HitParticles Class for spawning particles when a IHittable is hit HittableBehaviour Behaviours responsible for processing hits from attacks HittableHitbox Hittable attached to a hitbox, related to a HittableHitbox.hittableBehaviour of a character HitValueTranspiler<T> IdlePattern InitEvent InterfaceWithSerializableContentDrawer Use [SerializeReference,SerializeInterface] on field definition to use the drawer, like this: [SerializeReference,SerializeInterface] private ICommand command; property drawer will automatically find all types that implement your interface and will provide UI dropdown, where you can select concrete type that you want to use. JumpBehaviour JumpBehaviour.Command KillEntitiesAction Kills all entities that match specified tags, using their DieBehaviour KnockbackBehaviour KnockbackBehaviour.Command KnockbackBrainModule State machine parameters related to KnockbackBehaviour KnockbackHitExecutor Hit executor that applies knockback on an hittable KnockbackPowerTranspiler LineTrigger MathUtils MenuManager Class responsible of toggling menus on/off, from pressing ESCAPE and from button clicks MotionAttack An attack that has a single hit detector, hit executor, and has an anticipation and recovery phases with fixed duration. During the active phase, the character moves in the direction it looked at with a reducing speed, until it reaches zero. MotionAttack.AttackFlow MovableEntity GameEntity with moving capabilities MoveCamera Changes camera's target position MusicVolumeSlider Class that syncs between the music volume and a slider Node NormalAttack Particles Spawns particles ParticlesEditor Pathfind Pathfinding on a WalkableGrid using Theta Star algorithm PauseManager Singleton used to pause the game PeriodicAbsoluteHitDetector An hit detector that detects hits periodically, with a given interval PeriodicRelativeHitDetector An hit detector that detects hits periodically, with a given interval, relative to the hit object PhasedBehaviour<T> PhaseEvents Contains start and finish events for all phases PlayableBehaviour<T> Abstract variant of CharacterBehaviour for behaviours than can be played and stopped PlayerAttackBrainModule State machine parameters related to player's AttackManager PlayerAttackExecutor PlayerAttackExecutor.AttackProperty Pairing between attack and required button PlayerController Character controller designed for a human player, that plays behaviours based on user input (keyboard, mouse, controller) PlayerDistanceBrainModule State machine parameters related to distance from the player PlayerKnockbackBrainModule State machine parameters related to player's KnockbackBehaviour PlayerStunBrainModule State machine parameters related to player's StunBehaviour PlayEvents Contains behaviour's play and stop events PlayOnce Splits calls to two events - one for first-time calls and the other for the rest PossessAttack PossessAttack.AttackFlow PossessedEffect PossessedEffect.Command PossessedHumanBrain Updates BossPossessActive according to the boss doing PossessAttack PossessHitExecutor Hit executor that applies possesses effect to an hittable PossessSource Object has two phases: warning and active. If a IHittable touches it during the active phase, it will receive the possessed effect PossessSourcesDestroyAction Destroys all possess sources on the scene PriorityQueue<T> Generic priority queue ProbabilisticElectrifyHitExecutor Hit executor that randomly applies electrify effect on hittables RandomRayPattern ReadonlyAttribute RectTrigger RepositionPattern Rotation Rotation that has two options - normal or flipped RotationDrawer RunBehaviour RunBehaviour.Command RunKick RunSwipe SerializeInterface Attribute for serialized interface fields. It displays a dropdown for selecting an implementation, and then displays the selected implementation fields ShadowObject ShadowObject.AnimationDefinition Mapping between an animator state name to the right shadow scale ShowDebugAttribute SimpleAttack Simple implementation of BaseAttack , which has a single hit detector, hit executor, and all attack phases have a fixed duration SimpleAttack.AttackFlow SingleHitDetector An hit detector for which each object can be detected only once SlashAttack SlideBehaviour SlideBehaviour.Command SoundEffect Helper component that calls AudioManager.Play(AudioClip) . Use it only when you cannot access the global directly. SoundEffectsVolumeSlider Class that syncs between the SFX volume and a slider SpawnAttack SpawnAttack.AttackFlow SpikeBall SpikeBallAttack SpikeBallAttack.AttackFlow SpinningSwordsAttack Attack that has two hitboxes, each one has different timing inside the active phase SpinningSwordsAttack.AttackFlow StabAttack StaggerBehaviour StaggerBehaviour.Command StopEncountersAction Stops all encounters in the scene StunBehaviour StunBehaviour.Command StunBrainModule State machine parameters related to StunBehaviour StunHitExecutor Hit executor that stuns an hittable SuperArmor SuperArmor.Command SuperArmorBar Bar that displays the health left in a super armor when it's active, and the \"refill\" progress when it's broken SuperArmorBrainModule State machine parameters related to SuperArmorBrainModule.superArmor SuperArmorHittableHitbox HittableHitbox that cannot receive knockback or stun, and proxies hits to SuperArmorHittableHitbox.superArmor Tags Tags property that is displayed as list in the inspector TagsDrawer TextLink Opens a give URL on a web browser TransitionAction Loads a scene UnityEntityExtensions Uppercut WalkableGrid Walkable area for player and enemies, used for pathfinding WalkBehaviour WalkBehaviour.Command WalkParticles WalkSoundEffect Plays a sound effect when character is walking WideBlock WideBlock.BlockDefinition WideBlock.Command Interfaces IBlockBehaviour IControlledBehaviour IEffect Base non-generic interface for an effect IForcedBehaviour IHitExecutor Interface for hit executors IHittable interface for objects that can get hit IMovementBehaviour IPlayableBehaviour Enums Button Button options MotionSettings Motion settings when playing attacks Tag Possible tags options Delegates GetOverrideDirection HitValueTranspiler<T>.TranspileCallable"
  },
  "api/Global.IBlockBehaviour.html": {
    "href": "api/Global.IBlockBehaviour.html",
    "title": "Interface IBlockBehaviour | Heroes of the Shrine",
    "keywords": "Interface IBlockBehaviour Inherited Members IPlayableBehaviour.PlayEvents IPlayableBehaviour.Playing IPlayableBehaviour.Blocked IPlayableBehaviour.Stop() Namespace : Global Assembly : cs.temp.dll.dll Syntax public interface IBlockBehaviour : IControlledBehaviour, IPlayableBehaviour Methods TryBlock(Hit) Declaration bool TryBlock(Hit hit) Parameters Type Name Description Hit hit Returns Type Description Boolean"
  },
  "api/Global.IControlledBehaviour.html": {
    "href": "api/Global.IControlledBehaviour.html",
    "title": "Interface IControlledBehaviour | Heroes of the Shrine",
    "keywords": "Interface IControlledBehaviour Inherited Members IPlayableBehaviour.PlayEvents IPlayableBehaviour.Playing IPlayableBehaviour.Blocked IPlayableBehaviour.Stop() Namespace : Global Assembly : cs.temp.dll.dll Syntax public interface IControlledBehaviour : IPlayableBehaviour"
  },
  "api/Global.IdlePattern.html": {
    "href": "api/Global.IdlePattern.html",
    "title": "Class IdlePattern | Heroes of the Shrine",
    "keywords": "Class IdlePattern Inheritance Object BasePattern IdlePattern Inherited Members BasePattern.hasRandomExitTime BasePattern.minTime BasePattern.maxTime BasePattern.OnEnter BasePattern.OnExit BasePattern.OnStateEnter(Animator, AnimatorStateInfo, Int32) BasePattern.OnStateUpdate(Animator, AnimatorStateInfo, Int32) BasePattern.OnStateExit(Animator, AnimatorStateInfo, Int32) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class IdlePattern : BasePattern"
  },
  "api/Global.IEffect.html": {
    "href": "api/Global.IEffect.html",
    "title": "Interface IEffect | Heroes of the Shrine",
    "keywords": "Interface IEffect Base non-generic interface for an effect Inherited Members IPlayableBehaviour.PlayEvents IPlayableBehaviour.Playing IPlayableBehaviour.Blocked IPlayableBehaviour.Stop() Namespace : Global Assembly : cs.temp.dll.dll Syntax public interface IEffect : IPlayableBehaviour Methods GetProgress() Declaration float GetProgress() Returns Type Description Single Progress of the effect from 0 to 1. Can be used by UI elements to display the progress"
  },
  "api/Global.IForcedBehaviour.html": {
    "href": "api/Global.IForcedBehaviour.html",
    "title": "Interface IForcedBehaviour | Heroes of the Shrine",
    "keywords": "Interface IForcedBehaviour Inherited Members IPlayableBehaviour.PlayEvents IPlayableBehaviour.Playing IPlayableBehaviour.Blocked IPlayableBehaviour.Stop() Namespace : Global Assembly : cs.temp.dll.dll Syntax public interface IForcedBehaviour : IPlayableBehaviour"
  },
  "api/Global.IHitExecutor.html": {
    "href": "api/Global.IHitExecutor.html",
    "title": "Interface IHitExecutor | Heroes of the Shrine",
    "keywords": "Interface IHitExecutor Interface for hit executors Namespace : Global Assembly : cs.temp.dll.dll Syntax public interface IHitExecutor Methods Execute(Hit) Performs hit logic on an object Declaration void Execute(Hit hit) Parameters Type Name Description Hit hit Hit context"
  },
  "api/Global.IHittable.html": {
    "href": "api/Global.IHittable.html",
    "title": "Interface IHittable | Heroes of the Shrine",
    "keywords": "Interface IHittable interface for objects that can get hit Namespace : Global Assembly : cs.temp.dll.dll Syntax public interface IHittable Properties Character Declaration Character Character { get; } Property Value Type Description Character Related character HitEvent Declaration ExtEvent HitEvent { get; } Property Value Type Description ExtEvent Invoked when IHittable.ProcessHit(IHitExecutor,Hit) is called Methods CanGetHit() Checks if the hittable can take hits at the moment Declaration bool CanGetHit() Returns Type Description Boolean true if it can take hits Hit(ChainHitExecutor, Hit) Declaration void Hit(ChainHitExecutor executor, Hit hit) Parameters Type Name Description ChainHitExecutor executor Hit hit ProcessHit(IHitExecutor, Hit) Declaration void ProcessHit(IHitExecutor executor, Hit hit) Parameters Type Name Description IHitExecutor executor Hit hit"
  },
  "api/Global.IMovementBehaviour.html": {
    "href": "api/Global.IMovementBehaviour.html",
    "title": "Interface IMovementBehaviour | Heroes of the Shrine",
    "keywords": "Interface IMovementBehaviour Inherited Members IPlayableBehaviour.PlayEvents IPlayableBehaviour.Playing IPlayableBehaviour.Blocked IPlayableBehaviour.Stop() Namespace : Global Assembly : cs.temp.dll.dll Syntax public interface IMovementBehaviour : IControlledBehaviour, IPlayableBehaviour"
  },
  "api/Global.InitEvent.html": {
    "href": "api/Global.InitEvent.html",
    "title": "Class InitEvent | Heroes of the Shrine",
    "keywords": "Class InitEvent Inheritance Object BaseComponent InitEvent Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class InitEvent : BaseComponent Fields event Declaration public ExtEvent event Field Value Type Description ExtEvent Event to be invoked on init"
  },
  "api/Global.InterfaceWithSerializableContentDrawer.html": {
    "href": "api/Global.InterfaceWithSerializableContentDrawer.html",
    "title": "Class InterfaceWithSerializableContentDrawer | Heroes of the Shrine",
    "keywords": "Class InterfaceWithSerializableContentDrawer Use [SerializeReference,SerializeInterface] on field definition to use the drawer, like this: [SerializeReference,SerializeInterface] private ICommand command; property drawer will automatically find all types that implement your interface and will provide UI dropdown, where you can select concrete type that you want to use. Inheritance Object InterfaceWithSerializableContentDrawer Namespace : Global Assembly : cs.temp.dll.dll Syntax public class InterfaceWithSerializableContentDrawer : PropertyDrawer Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Global.IPlayableBehaviour.html": {
    "href": "api/Global.IPlayableBehaviour.html",
    "title": "Interface IPlayableBehaviour | Heroes of the Shrine",
    "keywords": "Interface IPlayableBehaviour Namespace : Global Assembly : cs.temp.dll.dll Syntax public interface IPlayableBehaviour Properties Blocked Declaration bool Blocked { get; set; } Property Value Type Description Boolean If true , the behaviour cannot be played. PlayEvents Declaration PlayEvents PlayEvents { get; } Property Value Type Description PlayEvents Behaviour's play and stop events Playing Declaration bool Playing { get; } Property Value Type Description Boolean true if behaviour is currently playing Methods Stop() Stops the behaviour. Calling it when behaviour is not playing will not do anything. Declaration void Stop()"
  },
  "api/Global.JumpBehaviour.Command.html": {
    "href": "api/Global.JumpBehaviour.Command.html",
    "title": "Class JumpBehaviour.Command | Heroes of the Shrine",
    "keywords": "Class JumpBehaviour.Command Inheritance Object JumpBehaviour.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command"
  },
  "api/Global.JumpBehaviour.html": {
    "href": "api/Global.JumpBehaviour.html",
    "title": "Class JumpBehaviour | Heroes of the Shrine",
    "keywords": "Class JumpBehaviour Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < JumpBehaviour.Command > PhasedBehaviour < JumpBehaviour.Command > JumpBehaviour Implements IMovementBehaviour IControlledBehaviour IPlayableBehaviour Inherited Members PhasedBehaviour<JumpBehaviour.Command>.phaseEvents PhasedBehaviour<JumpBehaviour.Command>.Anticipating PhasedBehaviour<JumpBehaviour.Command>.Active PhasedBehaviour<JumpBehaviour.Command>.Recovering PhasedBehaviour<JumpBehaviour.Command>.Playing PlayableBehaviour<JumpBehaviour.Command>.PlayEvents PlayableBehaviour<JumpBehaviour.Command>.Blocked PlayableBehaviour<JumpBehaviour.Command>.Play(JumpBehaviour.Command) PlayableBehaviour<JumpBehaviour.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Awake() CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class JumpBehaviour : PhasedBehaviour<JumpBehaviour.Command>, IMovementBehaviour, IControlledBehaviour, IPlayableBehaviour Fields anticipateTime Declaration public float anticipateTime Field Value Type Description Single climbAcceleration Declaration public float climbAcceleration Field Value Type Description Single peakAcceleration Declaration public float peakAcceleration Field Value Type Description Single peakDuration Declaration public float peakDuration Field Value Type Description Single recoverTime Declaration public float recoverTime Field Value Type Description Single speed Declaration public float speed Field Value Type Description Single Methods ActivePhase() Declaration protected override IEnumerator ActivePhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<JumpBehaviour.Command>.ActivePhase() AnticipationPhase() Declaration protected override IEnumerator AnticipationPhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<JumpBehaviour.Command>.AnticipationPhase() CanPlay(JumpBehaviour.Command) Declaration public override bool CanPlay(JumpBehaviour.Command command) Parameters Type Name Description JumpBehaviour.Command command Returns Type Description Boolean Overrides PlayableBehaviour<JumpBehaviour.Command>.CanPlay(JumpBehaviour.Command) DoPlay(JumpBehaviour.Command) Declaration protected override void DoPlay(JumpBehaviour.Command command) Parameters Type Name Description JumpBehaviour.Command command Overrides PhasedBehaviour<JumpBehaviour.Command>.DoPlay(JumpBehaviour.Command) DoStop() Declaration protected override void DoStop() Overrides PhasedBehaviour<JumpBehaviour.Command>.DoStop() Freeze() Declaration public void Freeze() RecoveryPhase() Declaration protected override IEnumerator RecoveryPhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<JumpBehaviour.Command>.RecoveryPhase() Unfreeze() Declaration public void Unfreeze() Implements IMovementBehaviour IControlledBehaviour IPlayableBehaviour"
  },
  "api/Global.KillEntitiesAction.html": {
    "href": "api/Global.KillEntitiesAction.html",
    "title": "Class KillEntitiesAction | Heroes of the Shrine",
    "keywords": "Class KillEntitiesAction Kills all entities that match specified tags, using their DieBehaviour Inheritance Object BaseComponent KillEntitiesAction Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class KillEntitiesAction : BaseComponent Fields destroyImmediately Declaration public bool destroyImmediately Field Value Type Description Boolean If true , entities will destroy immediately, without calling DieBehaviour excludedTags Declaration public Tags excludedTags Field Value Type Description Tags Tags of excluded entities that are not destroyed - even if the entity matches KillEntitiesAction.tags tags Declaration public Tags tags Field Value Type Description Tags Tags of the entities to destroy Methods Invoke() Kills the matching entities Declaration public void Invoke()"
  },
  "api/Global.KnockbackBehaviour.Command.html": {
    "href": "api/Global.KnockbackBehaviour.Command.html",
    "title": "Class KnockbackBehaviour.Command | Heroes of the Shrine",
    "keywords": "Class KnockbackBehaviour.Command Inheritance Object KnockbackBehaviour.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command Fields angleDegrees Declaration public float angleDegrees Field Value Type Description Single power Declaration public float power Field Value Type Description Single"
  },
  "api/Global.KnockbackBehaviour.html": {
    "href": "api/Global.KnockbackBehaviour.html",
    "title": "Class KnockbackBehaviour | Heroes of the Shrine",
    "keywords": "Class KnockbackBehaviour Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < KnockbackBehaviour.Command > KnockbackBehaviour Implements IForcedBehaviour IPlayableBehaviour Inherited Members PlayableBehaviour<KnockbackBehaviour.Command>.PlayEvents PlayableBehaviour<KnockbackBehaviour.Command>.Blocked PlayableBehaviour<KnockbackBehaviour.Command>.CanPlay(KnockbackBehaviour.Command) PlayableBehaviour<KnockbackBehaviour.Command>.Play(KnockbackBehaviour.Command) PlayableBehaviour<KnockbackBehaviour.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Awake() CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class KnockbackBehaviour : PlayableBehaviour<KnockbackBehaviour.Command>, IForcedBehaviour, IPlayableBehaviour Fields knockbackRecoverTime Declaration public float knockbackRecoverTime Field Value Type Description Single Properties Active Declaration public bool Active { get; } Property Value Type Description Boolean Bounce Declaration public int Bounce { get; } Property Value Type Description Int32 Playing Declaration public override bool Playing { get; } Property Value Type Description Boolean Overrides PlayableBehaviour<KnockbackBehaviour.Command>.Playing Recovering Declaration public bool Recovering { get; } Property Value Type Description Boolean Methods DoPlay(KnockbackBehaviour.Command) Declaration protected override void DoPlay(KnockbackBehaviour.Command command) Parameters Type Name Description KnockbackBehaviour.Command command Overrides PlayableBehaviour<KnockbackBehaviour.Command>.DoPlay(KnockbackBehaviour.Command) DoStop() Declaration protected override void DoStop() Overrides PlayableBehaviour<KnockbackBehaviour.Command>.DoStop() GetRelativeDirection(Single, Rotation) Declaration public static float GetRelativeDirection(float knockbackAngle, Rotation hitDirection) Parameters Type Name Description Single knockbackAngle Rotation hitDirection Returns Type Description Single Events OnFinish Declaration public event Action OnFinish Event Type Type Description Action OnRecover Declaration public event Action OnRecover Event Type Type Description Action Implements IForcedBehaviour IPlayableBehaviour"
  },
  "api/Global.KnockbackBrainModule.html": {
    "href": "api/Global.KnockbackBrainModule.html",
    "title": "Class KnockbackBrainModule | Heroes of the Shrine",
    "keywords": "Class KnockbackBrainModule State machine parameters related to KnockbackBehaviour Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour BrainModule KnockbackBrainModule Inherited Members BrainModule.StateMachine BrainModule.Awake() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class KnockbackBrainModule : BrainModule Methods GetParameters() Declaration public override string[] GetParameters() Returns Type Description String [] Overrides BrainModule.GetParameters()"
  },
  "api/Global.KnockbackHitExecutor.html": {
    "href": "api/Global.KnockbackHitExecutor.html",
    "title": "Class KnockbackHitExecutor | Heroes of the Shrine",
    "keywords": "Class KnockbackHitExecutor Hit executor that applies knockback on an hittable Inheritance Object KnockbackHitExecutor Implements IHitExecutor Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class KnockbackHitExecutor : IHitExecutor Fields knockbackDirection Declaration public float knockbackDirection Field Value Type Description Single Direction of the knockback in degrees, relative to X axis, in the direction of the hit knockbackPower Declaration public float knockbackPower Field Value Type Description Single Power of the knockback, affects its initial speed stunTime Declaration public float stunTime Field Value Type Description Single If enemy is resistant to knockback, this value will be used. Methods Execute(Hit) Declaration public void Execute(Hit hit) Parameters Type Name Description Hit hit Implements IHitExecutor"
  },
  "api/Global.KnockbackPowerTranspiler.html": {
    "href": "api/Global.KnockbackPowerTranspiler.html",
    "title": "Class KnockbackPowerTranspiler | Heroes of the Shrine",
    "keywords": "Class KnockbackPowerTranspiler Inheritance Object HitValueTranspiler < Single > KnockbackPowerTranspiler Inherited Members HitValueTranspiler<Single>.Transpile(BaseAttack, IHittable, Single) HitValueTranspiler<Single>.Add(HitValueTranspiler.TranspileCallable<>) HitValueTranspiler<Single>.Remove(HitValueTranspiler.TranspileCallable<>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class KnockbackPowerTranspiler : HitValueTranspiler<float>"
  },
  "api/Global.LineTrigger.html": {
    "href": "api/Global.LineTrigger.html",
    "title": "Class LineTrigger | Heroes of the Shrine",
    "keywords": "Class LineTrigger Inheritance Object BaseComponent LineTrigger Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class LineTrigger : BaseComponent Fields action Declaration public ExtEvent action Field Value Type Description ExtEvent Target event minimumX Declaration public float minimumX Field Value Type Description Single X value that player has to cross Methods Update() Declaration protected override void Update() Overrides BaseComponent.Update()"
  },
  "api/Global.MathUtils.html": {
    "href": "api/Global.MathUtils.html",
    "title": "Class MathUtils | Heroes of the Shrine",
    "keywords": "Class MathUtils Inheritance Object MathUtils Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public static class MathUtils Methods LineRectangleIntersections(Vector2, Vector2, Vector2, Vector2) Declaration public static IEnumerable<Vector2> LineRectangleIntersections(Vector2 start, Vector2 end, Vector2 rectanglePosition, Vector2 rectangleSize) Parameters Type Name Description Vector2 start Vector2 end Vector2 rectanglePosition Vector2 rectangleSize Returns Type Description IEnumerable < Vector2 > ToPlane(Vector3) Declaration public static Vector2 ToPlane(Vector3 point) Parameters Type Name Description Vector3 point Returns Type Description Vector2 ToSpace(Vector2, Single) Declaration public static Vector3 ToSpace(Vector2 point, float y = 0F) Parameters Type Name Description Vector2 point Single y Returns Type Description Vector3"
  },
  "api/Global.MenuManager.html": {
    "href": "api/Global.MenuManager.html",
    "title": "Class MenuManager | Heroes of the Shrine",
    "keywords": "Class MenuManager Class responsible of toggling menus on/off, from pressing ESCAPE and from button clicks Inheritance Object BaseComponent MenuManager Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class MenuManager : BaseComponent Fields optionsPanel Declaration public GameObject optionsPanel Field Value Type Description GameObject pausePanel Declaration public GameObject pausePanel Field Value Type Description GameObject Methods ToggleOptionsPanel(Boolean) Declaration public void ToggleOptionsPanel(bool active) Parameters Type Name Description Boolean active TogglePausePanel(Boolean) Declaration public void TogglePausePanel(bool active) Parameters Type Name Description Boolean active Update() Declaration protected override void Update() Overrides BaseComponent.Update()"
  },
  "api/Global.MotionAttack.AttackFlow.html": {
    "href": "api/Global.MotionAttack.AttackFlow.html",
    "title": "Class MotionAttack.AttackFlow | Heroes of the Shrine",
    "keywords": "Class MotionAttack.AttackFlow Inheritance Object MotionAttack.AttackFlow Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AttackFlow Fields acceleration Declaration public float acceleration Field Value Type Description Single anticipationDuration Declaration public float anticipationDuration Field Value Type Description Single recoveryDuration Declaration public float recoveryDuration Field Value Type Description Single velocity Declaration public float velocity Field Value Type Description Single"
  },
  "api/Global.MotionAttack.html": {
    "href": "api/Global.MotionAttack.html",
    "title": "Class MotionAttack | Heroes of the Shrine",
    "keywords": "Class MotionAttack An attack that has a single hit detector, hit executor, and has an anticipation and recovery phases with fixed duration. During the active phase, the character moves in the direction it looked at with a reducing speed, until it reaches zero. Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < BaseAttack.Command > PhasedBehaviour < BaseAttack.Command > BaseAttack MotionAttack CounterAttack EnergyBurstAttack RunKick SlashAttack Implements IControlledBehaviour IPlayableBehaviour Inherited Members BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.IsMidair BaseAttack.Awake() BaseAttack.CanPlay(BaseAttack.Command) BaseAttack.DoPlay(BaseAttack.Command) BaseAttack.DoStop() BaseAttack.StartHitDetector(BaseHitDetector, ChainHitExecutor) PhasedBehaviour<BaseAttack.Command>.phaseEvents PhasedBehaviour<BaseAttack.Command>.Anticipating PhasedBehaviour<BaseAttack.Command>.Active PhasedBehaviour<BaseAttack.Command>.Recovering PhasedBehaviour<BaseAttack.Command>.Playing PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Blocked PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class MotionAttack : BaseAttack, IControlledBehaviour, IPlayableBehaviour Fields attackFlow Declaration public MotionAttack.AttackFlow attackFlow Field Value Type Description MotionAttack.AttackFlow hitDetector Declaration public BaseHitDetector hitDetector Field Value Type Description BaseHitDetector hitExecutor Declaration public ChainHitExecutor hitExecutor Field Value Type Description ChainHitExecutor Properties Motion Declaration protected override MotionSettings Motion { get; } Property Value Type Description MotionSettings Overrides BaseAttack.Motion Methods ActivePhase() Declaration protected override IEnumerator ActivePhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<BaseAttack.Command>.ActivePhase() AnticipationPhase() Declaration protected override IEnumerator AnticipationPhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<BaseAttack.Command>.AnticipationPhase() RecoveryPhase() Declaration protected override IEnumerator RecoveryPhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<BaseAttack.Command>.RecoveryPhase() Implements IControlledBehaviour IPlayableBehaviour"
  },
  "api/Global.MotionSettings.html": {
    "href": "api/Global.MotionSettings.html",
    "title": "Enum MotionSettings | Heroes of the Shrine",
    "keywords": "Enum MotionSettings Motion settings when playing attacks Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum MotionSettings Fields Name Description Static WalkingDisabled WalkingEnabled"
  },
  "api/Global.MovableEntity.html": {
    "href": "api/Global.MovableEntity.html",
    "title": "Class MovableEntity | Heroes of the Shrine",
    "keywords": "Class MovableEntity GameEntity with moving capabilities Inheritance Object BaseComponent GameEntity MovableEntity Inherited Members GameEntity.parent GameEntity.tags GameEntity.position GameEntity.rotation GameEntity.scale GameEntity.WorldPosition GameEntity.WorldRotation GameEntity.WorldScale GameEntity.GroundWorldPosition GameEntity.GetBehaviours(Type, Boolean) GameEntity.GetBehaviour(Type, Boolean) GameEntity.GetBehaviours<T>(Boolean) GameEntity.GetBehaviour<T>(Boolean) GameEntity.UpdateTransform() GameEntity.TransformToWorld(Vector3) GameEntity.TransformToRelative(Vector3) GameEntity.SortingOrder GameEntity.GroundDistance(Vector3) GameEntity.GroundScreenCoordinates(Vector3) GameEntity.ScreenCoordinates(Vector3) GameEntity.Instantiate(GameObject, Vector3, Rotation) GameEntity.Instantiate(GameObject, GameEntity, Vector3, Rotation) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class MovableEntity : GameEntity Fields acceleration Declaration public Vector3 acceleration Field Value Type Description Vector3 Acceleration in relative coordinates velocity Declaration public Vector3 velocity Field Value Type Description Vector3 Velocity in relative coordinates Methods Awake() Declaration protected override void Awake() Overrides GameEntity.Awake() Update() Declaration protected override void Update() Overrides GameEntity.Update() UpdatePosition(Vector3) Move the entity to a new position. If there's a barrier in the way, the entity will stop before hitting hit Declaration public void UpdatePosition(Vector3 newPosition) Parameters Type Name Description Vector3 newPosition Target position in relative coordinates UpdateWorldPosition(Vector3) Declaration public void UpdateWorldPosition(Vector3 newPosition) Parameters Type Name Description Vector3 newPosition Events OnLand Declaration public event Action OnLand Event Type Type Description Action Invoked when entity landed on the ground (y=0) OnStuck Declaration public event Action OnStuck Event Type Type Description Action Invoked when entity tried to move into a barrier"
  },
  "api/Global.MoveCamera.html": {
    "href": "api/Global.MoveCamera.html",
    "title": "Class MoveCamera | Heroes of the Shrine",
    "keywords": "Class MoveCamera Changes camera's target position Inheritance Object BaseComponent MoveCamera Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class MoveCamera : BaseComponent Fields cameraMovement Declaration public CameraMovement cameraMovement Field Value Type Description CameraMovement target Declaration public Vector3 target Field Value Type Description Vector3 Methods Invoke() Declaration public void Invoke()"
  },
  "api/Global.MusicVolumeSlider.html": {
    "href": "api/Global.MusicVolumeSlider.html",
    "title": "Class MusicVolumeSlider | Heroes of the Shrine",
    "keywords": "Class MusicVolumeSlider Class that syncs between the music volume and a slider Inheritance Object BaseComponent MusicVolumeSlider Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class MusicVolumeSlider : BaseComponent Fields slider Declaration public Slider slider Field Value Type Description Slider Related slider"
  },
  "api/Global.Node.html": {
    "href": "api/Global.Node.html",
    "title": "Class Node | Heroes of the Shrine",
    "keywords": "Class Node Inheritance Object Node Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Node Constructors Node(Int32, Int32, Boolean, Vector3) Declaration public Node(int x, int y, bool walkable, Vector3 position) Parameters Type Name Description Int32 x Int32 y Boolean walkable Vector3 position Fields position Declaration public Vector3 position Field Value Type Description Vector3 walkable Declaration public bool walkable Field Value Type Description Boolean x Declaration public readonly int x Field Value Type Description Int32 y Declaration public readonly int y Field Value Type Description Int32"
  },
  "api/Global.NormalAttack.html": {
    "href": "api/Global.NormalAttack.html",
    "title": "Class NormalAttack | Heroes of the Shrine",
    "keywords": "Class NormalAttack Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < BaseAttack.Command > PhasedBehaviour < BaseAttack.Command > BaseAttack SimpleAttack NormalAttack AltCounterAttack AltNormalAttack StabAttack Uppercut Implements IControlledBehaviour IPlayableBehaviour Inherited Members SimpleAttack.attackFlow SimpleAttack.hitDetector SimpleAttack.hitExecutor SimpleAttack.AnticipationPhase() SimpleAttack.ActivePhase() SimpleAttack.RecoveryPhase() BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.Motion BaseAttack.IsMidair BaseAttack.Awake() BaseAttack.CanPlay(BaseAttack.Command) BaseAttack.DoPlay(BaseAttack.Command) BaseAttack.DoStop() BaseAttack.StartHitDetector(BaseHitDetector, ChainHitExecutor) PhasedBehaviour<BaseAttack.Command>.phaseEvents PhasedBehaviour<BaseAttack.Command>.Anticipating PhasedBehaviour<BaseAttack.Command>.Active PhasedBehaviour<BaseAttack.Command>.Recovering PhasedBehaviour<BaseAttack.Command>.Playing PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Blocked PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class NormalAttack : SimpleAttack, IControlledBehaviour, IPlayableBehaviour Implements IControlledBehaviour IPlayableBehaviour"
  },
  "api/Global.Particles.html": {
    "href": "api/Global.Particles.html",
    "title": "Class Particles | Heroes of the Shrine",
    "keywords": "Class Particles Spawns particles Inheritance Object BaseComponent EntityBehaviour Particles Inherited Members EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Particles : EntityBehaviour Fields attachToCharacter Declaration public bool attachToCharacter Field Value Type Description Boolean If true , particles move along with the character after they are spawned particlePosition Declaration public Vector3 particlePosition Field Value Type Description Vector3 Point where particle is spawned, relative to the GameEntity prefab Declaration public GameObject prefab Field Value Type Description GameObject Prefab of the particles Properties Playing Declaration public bool Playing { get; } Property Value Type Description Boolean Methods Play() Spawns the particles Declaration public void Play() Stop() Declaration public void Stop()"
  },
  "api/Global.ParticlesEditor.html": {
    "href": "api/Global.ParticlesEditor.html",
    "title": "Class ParticlesEditor | Heroes of the Shrine",
    "keywords": "Class ParticlesEditor Inheritance Object ParticlesEditor Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ParticlesEditor : Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Global.Pathfind.html": {
    "href": "api/Global.Pathfind.html",
    "title": "Class Pathfind | Heroes of the Shrine",
    "keywords": "Class Pathfind Pathfinding on a WalkableGrid using Theta Star algorithm Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour Pathfind Inherited Members CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Awake() CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Pathfind : CharacterBehaviour Methods Direction(Vector3, Vector3, Node[]) Declaration public Vector3 Direction(Vector3 start, Vector3 end, Node[] excluded = null) Parameters Type Name Description Vector3 start Vector3 end Node [] excluded Returns Type Description Vector3"
  },
  "api/Global.PauseManager.html": {
    "href": "api/Global.PauseManager.html",
    "title": "Class PauseManager | Heroes of the Shrine",
    "keywords": "Class PauseManager Singleton used to pause the game Inheritance Object BaseComponent PauseManager Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PauseManager : BaseComponent Properties Instance Declaration public static PauseManager Instance { get; } Property Value Type Description PauseManager Singleton instance Paused Declaration public bool Paused { get; set; } Property Value Type Description Boolean True if game is paused. Setting the property stops Unity's , and pauses audio."
  },
  "api/Global.PeriodicAbsoluteHitDetector.html": {
    "href": "api/Global.PeriodicAbsoluteHitDetector.html",
    "title": "Class PeriodicAbsoluteHitDetector | Heroes of the Shrine",
    "keywords": "Class PeriodicAbsoluteHitDetector An hit detector that detects hits periodically, with a given interval Inheritance Object BaseHitDetector PeriodicAbsoluteHitDetector Inherited Members BaseHitDetector.hitbox BaseHitDetector.hitParticles BaseHitDetector.includedHittableTags BaseHitDetector.excludedHittableTags BaseHitDetector.onHit BaseHitDetector.StartDetector(Action<HittableHitbox>, Tags) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PeriodicAbsoluteHitDetector : BaseHitDetector Fields interval Declaration public float interval Field Value Type Description Single Interval between detections, in seconds startImmediately Declaration public bool startImmediately Field Value Type Description Boolean If true, a detection occurs immediately when BaseHitDetector.StartDetector(Action{HittableHitbox},Tags) is called. Otherwise, the first detection occurs after a PeriodicAbsoluteHitDetector.interval . Methods DoStartDetector(Action<HittableHitbox>) Declaration protected override void DoStartDetector(Action<HittableHitbox> hitCallable) Parameters Type Name Description Action < HittableHitbox > hitCallable Overrides BaseHitDetector.DoStartDetector(Action<HittableHitbox>) StopDetector() Declaration public override void StopDetector() Overrides BaseHitDetector.StopDetector() Events OnDetect Declaration public event Action OnDetect Event Type Type Description Action Invoked when detection occurs"
  },
  "api/Global.PeriodicRelativeHitDetector.html": {
    "href": "api/Global.PeriodicRelativeHitDetector.html",
    "title": "Class PeriodicRelativeHitDetector | Heroes of the Shrine",
    "keywords": "Class PeriodicRelativeHitDetector An hit detector that detects hits periodically, with a given interval, relative to the hit object Inheritance Object BaseHitDetector PeriodicRelativeHitDetector Inherited Members BaseHitDetector.hitbox BaseHitDetector.hitParticles BaseHitDetector.includedHittableTags BaseHitDetector.excludedHittableTags BaseHitDetector.onHit BaseHitDetector.StartDetector(Action<HittableHitbox>, Tags) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PeriodicRelativeHitDetector : BaseHitDetector Fields interval Declaration public float interval Field Value Type Description Single Interval between consecutive hits of a single hittable, in seconds Methods DoStartDetector(Action<HittableHitbox>) Declaration protected override void DoStartDetector(Action<HittableHitbox> hitCallable) Parameters Type Name Description Action < HittableHitbox > hitCallable Overrides BaseHitDetector.DoStartDetector(Action<HittableHitbox>) StopDetector() Declaration public override void StopDetector() Overrides BaseHitDetector.StopDetector()"
  },
  "api/Global.PhasedBehaviour-1.html": {
    "href": "api/Global.PhasedBehaviour-1.html",
    "title": "Class PhasedBehaviour<T> | Heroes of the Shrine",
    "keywords": "Class PhasedBehaviour<T> Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour <T> PhasedBehaviour<T> BaseAttack DodgeBehaviour FocusBlock JumpBehaviour WideBlock Implements IControlledBehaviour IPlayableBehaviour Inherited Members PlayableBehaviour<T>.PlayEvents PlayableBehaviour<T>.Blocked PlayableBehaviour<T>.CanPlay(T) PlayableBehaviour<T>.Play(T) PlayableBehaviour<T>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Awake() CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public abstract class PhasedBehaviour<T> : PlayableBehaviour<T>, IControlledBehaviour, IPlayableBehaviour Type Parameters Name Description T Fields phaseEvents Declaration public PhaseEvents phaseEvents Field Value Type Description PhaseEvents General phase events Properties Active Declaration public bool Active { get; } Property Value Type Description Boolean Behaviour is active. It also sets the animator parameter: {MyPhasedBehaviour}-active . Anticipating Declaration public bool Anticipating { get; } Property Value Type Description Boolean Behaviour is anticipating. It also sets the animator parameter: {MyPhasedBehaviour}-anticipating . Playing Declaration public override bool Playing { get; } Property Value Type Description Boolean Overrides PlayableBehaviour<T>.Playing Recovering Declaration public bool Recovering { get; } Property Value Type Description Boolean Behaviour is recovering. It also sets the animator parameter: {MyPhasedBehaviour}-recovering . Methods ActivePhase() Active phase coroutine Declaration protected abstract IEnumerator ActivePhase() Returns Type Description System.Collections.Generic.IEnumerator AnticipationPhase() Anticipation phase coroutine Declaration protected abstract IEnumerator AnticipationPhase() Returns Type Description System.Collections.Generic.IEnumerator DoPlay(T) Play the phases Declaration protected override void DoPlay(T command) Parameters Type Name Description T command Overrides PlayableBehaviour<T>.DoPlay(T) DoStop() Stops the behaviour immediately in any of its phases. Can be safely called even if behaviour is not currently playing, as it will do nothing. Declaration protected override void DoStop() Overrides PlayableBehaviour<T>.DoStop() RecoveryPhase() Recovery phase coroutine Declaration protected abstract IEnumerator RecoveryPhase() Returns Type Description System.Collections.Generic.IEnumerator Implements IControlledBehaviour IPlayableBehaviour"
  },
  "api/Global.PhaseEvents.html": {
    "href": "api/Global.PhaseEvents.html",
    "title": "Class PhaseEvents | Heroes of the Shrine",
    "keywords": "Class PhaseEvents Contains start and finish events for all phases Inheritance Object PhaseEvents Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PhaseEvents Fields onFinishActive Declaration public ExtEvent onFinishActive Field Value Type Description ExtEvent Active phase has finished, also fires if behaviour was stopped while in active phase onFinishAnticipating Declaration public ExtEvent onFinishAnticipating Field Value Type Description ExtEvent Anticipation has finished, also fires if behaviour was stopped while in anticipation onFinishRecovery Declaration public ExtEvent onFinishRecovery Field Value Type Description ExtEvent Recovery has finished, also fires if behaviour was stopped while in recovery onStartActive Declaration public ExtEvent onStartActive Field Value Type Description ExtEvent Active phase has started onStartAnticipating Declaration public ExtEvent onStartAnticipating Field Value Type Description ExtEvent Anticipation has started onStartRecovery Declaration public ExtEvent onStartRecovery Field Value Type Description ExtEvent Recovery has started"
  },
  "api/Global.PlayableBehaviour-1.html": {
    "href": "api/Global.PlayableBehaviour-1.html",
    "title": "Class PlayableBehaviour<T> | Heroes of the Shrine",
    "keywords": "Class PlayableBehaviour<T> Abstract variant of CharacterBehaviour for behaviours than can be played and stopped Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour<T> ArcBehaviour AutoWalkBehaviour BaseEffect<T> EscapeBehaviour FollowBehaviour ForcedWalkBehaviour HealBehaviour KnockbackBehaviour PhasedBehaviour<T> RunBehaviour SlideBehaviour StaggerBehaviour StunBehaviour SuperArmor WalkBehaviour Implements IPlayableBehaviour Inherited Members CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Awake() CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public abstract class PlayableBehaviour<T> : CharacterBehaviour, IPlayableBehaviour Type Parameters Name Description T Command type that PlayableBehaviour`1.Play(`0) method accepts Properties Blocked If true , the behaviour cannot be played. Can be set to true multiple times, as it will change back to false only if it was set to false the same number of times. Should not affect an action that has already started. Declaration public bool Blocked { get; set; } Property Value Type Description Boolean PlayEvents Declaration public PlayEvents PlayEvents { get; } Property Value Type Description PlayEvents Behaviour's play and stop events Playing Declaration public abstract bool Playing { get; } Property Value Type Description Boolean true if behaviour is currently playing Methods CanPlay(T) Declaration public virtual bool CanPlay(T command) Parameters Type Name Description T command Returns Type Description Boolean True if behaviour can be played. Override to add more conditions DoPlay(T) Executed when behaviour is played Declaration protected abstract void DoPlay(T command) Parameters Type Name Description T command Arguments of the behaviour, same as those passed to PlayableBehaviour`1.Play(`0) DoStop() Executed when behaviour is stopped Declaration protected abstract void DoStop() Play(T) Plays the behaviour. To customize the functionality, implement PlayableBehaviour`1.DoPlay(`0) Declaration public void Play(T command) Parameters Type Name Description T command Arguments of the behaviour Stop() Stops the behaviour. Can be used safely also when PlayableBehaviour`1.Playing is false , as it will do nothing. Declaration public void Stop() Implements IPlayableBehaviour"
  },
  "api/Global.PlayerAttackBrainModule.html": {
    "href": "api/Global.PlayerAttackBrainModule.html",
    "title": "Class PlayerAttackBrainModule | Heroes of the Shrine",
    "keywords": "Class PlayerAttackBrainModule State machine parameters related to player's AttackManager Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour BrainModule PlayerAttackBrainModule Inherited Members BrainModule.StateMachine CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PlayerAttackBrainModule : BrainModule Methods Awake() Declaration protected override void Awake() Overrides BrainModule.Awake() GetParameters() Declaration public override string[] GetParameters() Returns Type Description String [] Overrides BrainModule.GetParameters()"
  },
  "api/Global.PlayerAttackExecutor.AttackProperty.html": {
    "href": "api/Global.PlayerAttackExecutor.AttackProperty.html",
    "title": "Class PlayerAttackExecutor.AttackProperty | Heroes of the Shrine",
    "keywords": "Class PlayerAttackExecutor.AttackProperty Pairing between attack and required button Inheritance Object PlayerAttackExecutor.AttackProperty Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AttackProperty Fields attack Declaration public BaseAttack attack Field Value Type Description BaseAttack button Declaration public Button button Field Value Type Description Button energyCost Declaration public float energyCost Field Value Type Description Single"
  },
  "api/Global.PlayerAttackExecutor.html": {
    "href": "api/Global.PlayerAttackExecutor.html",
    "title": "Class PlayerAttackExecutor | Heroes of the Shrine",
    "keywords": "Class PlayerAttackExecutor Inheritance Object PlayerAttackExecutor Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PlayerAttackExecutor Fields attacks Declaration public PlayerAttackExecutor.AttackProperty[] attacks Field Value Type Description PlayerAttackExecutor.AttackProperty [] List of attacks that can be played using the controller energySystem Declaration public EnergySystem energySystem Field Value Type Description EnergySystem Methods Play(Button[]) Declaration public bool Play(Button[] downButtons) Parameters Type Name Description Button [] downButtons Returns Type Description Boolean"
  },
  "api/Global.PlayerController.html": {
    "href": "api/Global.PlayerController.html",
    "title": "Class PlayerController | Heroes of the Shrine",
    "keywords": "Class PlayerController Character controller designed for a human player, that plays behaviours based on user input (keyboard, mouse, controller) Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour CharacterController PlayerController Inherited Members CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PlayerController : CharacterController Fields attackExecutor Declaration public PlayerAttackExecutor attackExecutor Field Value Type Description PlayerAttackExecutor attackPriority Declaration public int attackPriority Field Value Type Description Int32 bufferingTime Declaration public float bufferingTime Field Value Type Description Single Window for input buffering, after that time is passed, that input is forgotten dodgePriority Declaration public int dodgePriority Field Value Type Description Int32 jumpPriority Declaration public int jumpPriority Field Value Type Description Int32 possessedEffectDurationReduction Declaration public float possessedEffectDurationReduction Field Value Type Description Single possessedEffectTimeReducing Declaration public List<Button> possessedEffectTimeReducing Field Value Type Description List < Button > slidePriority Declaration public int slidePriority Field Value Type Description Int32 Methods Awake() Declaration protected override void Awake() Overrides CharacterBehaviour.Awake() Update() Declaration protected override void Update() Overrides BaseComponent.Update()"
  },
  "api/Global.PlayerDistanceBrainModule.html": {
    "href": "api/Global.PlayerDistanceBrainModule.html",
    "title": "Class PlayerDistanceBrainModule | Heroes of the Shrine",
    "keywords": "Class PlayerDistanceBrainModule State machine parameters related to distance from the player Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour BrainModule PlayerDistanceBrainModule Inherited Members BrainModule.StateMachine CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PlayerDistanceBrainModule : BrainModule Methods Awake() Declaration protected override void Awake() Overrides BrainModule.Awake() GetParameters() Declaration public override string[] GetParameters() Returns Type Description String [] Overrides BrainModule.GetParameters() Update() Declaration protected override void Update() Overrides BaseComponent.Update()"
  },
  "api/Global.PlayerKnockbackBrainModule.html": {
    "href": "api/Global.PlayerKnockbackBrainModule.html",
    "title": "Class PlayerKnockbackBrainModule | Heroes of the Shrine",
    "keywords": "Class PlayerKnockbackBrainModule State machine parameters related to player's KnockbackBehaviour Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour BrainModule PlayerKnockbackBrainModule Inherited Members BrainModule.StateMachine CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PlayerKnockbackBrainModule : BrainModule Methods Awake() Declaration protected override void Awake() Overrides BrainModule.Awake() GetParameters() Declaration public override string[] GetParameters() Returns Type Description String [] Overrides BrainModule.GetParameters()"
  },
  "api/Global.PlayerStunBrainModule.html": {
    "href": "api/Global.PlayerStunBrainModule.html",
    "title": "Class PlayerStunBrainModule | Heroes of the Shrine",
    "keywords": "Class PlayerStunBrainModule State machine parameters related to player's StunBehaviour Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour BrainModule PlayerStunBrainModule Inherited Members BrainModule.StateMachine CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PlayerStunBrainModule : BrainModule Methods Awake() Declaration protected override void Awake() Overrides BrainModule.Awake() GetParameters() Declaration public override string[] GetParameters() Returns Type Description String [] Overrides BrainModule.GetParameters()"
  },
  "api/Global.PlayEvents.html": {
    "href": "api/Global.PlayEvents.html",
    "title": "Class PlayEvents | Heroes of the Shrine",
    "keywords": "Class PlayEvents Contains behaviour's play and stop events Inheritance Object PlayEvents Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PlayEvents Fields onPlay Declaration public ExtEvent onPlay Field Value Type Description ExtEvent Behaviour was played onStop Declaration public ExtEvent onStop Field Value Type Description ExtEvent Behaviour was stopped"
  },
  "api/Global.PlayOnce.html": {
    "href": "api/Global.PlayOnce.html",
    "title": "Class PlayOnce | Heroes of the Shrine",
    "keywords": "Class PlayOnce Splits calls to two events - one for first-time calls and the other for the rest Inheritance Object BaseComponent PlayOnce Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PlayOnce : BaseComponent Fields firstEvent Declaration public ExtEvent firstEvent Field Value Type Description ExtEvent Invoked when PlayOnce.Play is called for the first time in the game playOnAwake Declaration public bool playOnAwake Field Value Type Description Boolean If true, PlayOnce.Play is called when scene is loaded restEvent Declaration public ExtEvent restEvent Field Value Type Description ExtEvent Invoked when PlayOnce.Play is called if it is not the first time uniqueId Declaration public string uniqueId Field Value Type Description String Unique ID of the component. Must be unique among all PlayOnce components. Methods Play() Declaration public void Play()"
  },
  "api/Global.PossessAttack.AttackFlow.html": {
    "href": "api/Global.PossessAttack.AttackFlow.html",
    "title": "Class PossessAttack.AttackFlow | Heroes of the Shrine",
    "keywords": "Class PossessAttack.AttackFlow Inheritance Object PossessAttack.AttackFlow Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AttackFlow Fields anticipationDuration Declaration public float anticipationDuration Field Value Type Description Single recoveryDuration Declaration public float recoveryDuration Field Value Type Description Single sourceActiveDuration Declaration public float sourceActiveDuration Field Value Type Description Single warningDuration Declaration public float warningDuration Field Value Type Description Single waveCount Declaration public int waveCount Field Value Type Description Int32"
  },
  "api/Global.PossessAttack.html": {
    "href": "api/Global.PossessAttack.html",
    "title": "Class PossessAttack | Heroes of the Shrine",
    "keywords": "Class PossessAttack Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < BaseAttack.Command > PhasedBehaviour < BaseAttack.Command > BaseAttack PossessAttack Implements IControlledBehaviour IPlayableBehaviour Inherited Members BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.Motion BaseAttack.IsMidair BaseAttack.CanPlay(BaseAttack.Command) BaseAttack.DoPlay(BaseAttack.Command) BaseAttack.DoStop() BaseAttack.StartHitDetector(BaseHitDetector, ChainHitExecutor) PhasedBehaviour<BaseAttack.Command>.phaseEvents PhasedBehaviour<BaseAttack.Command>.Anticipating PhasedBehaviour<BaseAttack.Command>.Active PhasedBehaviour<BaseAttack.Command>.Recovering PhasedBehaviour<BaseAttack.Command>.Playing PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Blocked PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PossessAttack : BaseAttack, IControlledBehaviour, IPlayableBehaviour Fields attackFlow Declaration public PossessAttack.AttackFlow attackFlow Field Value Type Description PossessAttack.AttackFlow hitExecutor Declaration public ChainHitExecutor hitExecutor Field Value Type Description ChainHitExecutor minSourcesDistance Declaration public float minSourcesDistance Field Value Type Description Single possessSource Declaration public GameObject possessSource Field Value Type Description GameObject sourcesCount Declaration public int sourcesCount Field Value Type Description Int32 spawnRadius Declaration public float spawnRadius Field Value Type Description Single Methods ActivePhase() Declaration protected override IEnumerator ActivePhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<BaseAttack.Command>.ActivePhase() AnticipationPhase() Declaration protected override IEnumerator AnticipationPhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<BaseAttack.Command>.AnticipationPhase() Awake() Declaration protected override void Awake() Overrides BaseAttack.Awake() RecoveryPhase() Declaration protected override IEnumerator RecoveryPhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<BaseAttack.Command>.RecoveryPhase() Implements IControlledBehaviour IPlayableBehaviour"
  },
  "api/Global.PossessedEffect.Command.html": {
    "href": "api/Global.PossessedEffect.Command.html",
    "title": "Class PossessedEffect.Command | Heroes of the Shrine",
    "keywords": "Class PossessedEffect.Command Inheritance Object PossessedEffect.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command Fields maxDuration Declaration public float maxDuration Field Value Type Description Single"
  },
  "api/Global.PossessedEffect.html": {
    "href": "api/Global.PossessedEffect.html",
    "title": "Class PossessedEffect | Heroes of the Shrine",
    "keywords": "Class PossessedEffect Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < PossessedEffect.Command > BaseEffect < PossessedEffect.Command > PossessedEffect Implements IEffect IPlayableBehaviour Inherited Members BaseEffect<PossessedEffect.Command>.Active BaseEffect<PossessedEffect.Command>.Playing PlayableBehaviour<PossessedEffect.Command>.PlayEvents PlayableBehaviour<PossessedEffect.Command>.Blocked PlayableBehaviour<PossessedEffect.Command>.Play(PossessedEffect.Command) PlayableBehaviour<PossessedEffect.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Awake() CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PossessedEffect : BaseEffect<PossessedEffect.Command>, IEffect, IPlayableBehaviour Methods CanPlay(PossessedEffect.Command) Declaration public override bool CanPlay(PossessedEffect.Command command) Parameters Type Name Description PossessedEffect.Command command Returns Type Description Boolean Overrides PlayableBehaviour<PossessedEffect.Command>.CanPlay(PossessedEffect.Command) DoPlay(PossessedEffect.Command) Declaration protected override void DoPlay(PossessedEffect.Command command) Parameters Type Name Description PossessedEffect.Command command Overrides PlayableBehaviour<PossessedEffect.Command>.DoPlay(PossessedEffect.Command) DoStop() Declaration protected override void DoStop() Overrides PlayableBehaviour<PossessedEffect.Command>.DoStop() GetProgress() Declaration public override float GetProgress() Returns Type Description Single Overrides BaseEffect<PossessedEffect.Command>.GetProgress() ReduceDuration(Single) Declaration public void ReduceDuration(float durationPart) Parameters Type Name Description Single durationPart Implements IEffect IPlayableBehaviour"
  },
  "api/Global.PossessedHumanBrain.html": {
    "href": "api/Global.PossessedHumanBrain.html",
    "title": "Class PossessedHumanBrain | Heroes of the Shrine",
    "keywords": "Class PossessedHumanBrain Updates BossPossessActive according to the boss doing PossessAttack Inheritance Object BaseComponent PossessedHumanBrain Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PossessedHumanBrain : BaseComponent Fields animator Declaration public Animator animator Field Value Type Description Animator Possessed human animator"
  },
  "api/Global.PossessHitExecutor.html": {
    "href": "api/Global.PossessHitExecutor.html",
    "title": "Class PossessHitExecutor | Heroes of the Shrine",
    "keywords": "Class PossessHitExecutor Hit executor that applies possesses effect to an hittable Inheritance Object PossessHitExecutor Implements IHitExecutor Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PossessHitExecutor : IHitExecutor Fields duration Declaration public float duration Field Value Type Description Single Effect duration Methods Execute(Hit) Declaration public void Execute(Hit hit) Parameters Type Name Description Hit hit Implements IHitExecutor"
  },
  "api/Global.PossessSource.html": {
    "href": "api/Global.PossessSource.html",
    "title": "Class PossessSource | Heroes of the Shrine",
    "keywords": "Class PossessSource Object has two phases: warning and active. If a IHittable touches it during the active phase, it will receive the possessed effect Inheritance Object BaseComponent EntityBehaviour PossessSource Inherited Members EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PossessSource : EntityBehaviour Fields animator Declaration public Animator animator Field Value Type Description Animator Related animator hitAnimationDuration Declaration public float hitAnimationDuration Field Value Type Description Single Time before the possess source is destroyed after hitting hitDetector Declaration public BaseHitDetector hitDetector Field Value Type Description BaseHitDetector Methods Activate(Single, Single, Tags, ChainHitExecutor, BaseAttack) Starts the source Declaration public void Activate(float warningDuration, float activeDuration, Tags hittableTags, ChainHitExecutor hitExecutor, BaseAttack relatedAttack) Parameters Type Name Description Single warningDuration Duration of the warning phase Single activeDuration Duration of the active phase Tags hittableTags Tags of objects that can get hit. Get it from AttackManager.hittableTags ChainHitExecutor hitExecutor Executed on hit BaseAttack relatedAttack Attack that created the possess source"
  },
  "api/Global.PossessSourcesDestroyAction.html": {
    "href": "api/Global.PossessSourcesDestroyAction.html",
    "title": "Class PossessSourcesDestroyAction | Heroes of the Shrine",
    "keywords": "Class PossessSourcesDestroyAction Destroys all possess sources on the scene Inheritance Object BaseComponent PossessSourcesDestroyAction Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PossessSourcesDestroyAction : BaseComponent Methods Invoke() Declaration public void Invoke()"
  },
  "api/Global.PriorityQueue-1.html": {
    "href": "api/Global.PriorityQueue-1.html",
    "title": "Class PriorityQueue<T> | Heroes of the Shrine",
    "keywords": "Class PriorityQueue<T> Generic priority queue Inheritance Object PriorityQueue<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PriorityQueue<T> Type Parameters Name Description T Element type Properties Count Count of elements in the queue Declaration public int Count { get; } Property Value Type Description Int32 Methods Dequeue() Removes the item first item from the queue, and returns it Declaration public T Dequeue() Returns Type Description T Enqueue(T, Double) Adds an item to the queue Declaration public void Enqueue(T item, double priority) Parameters Type Name Description T item Double priority"
  },
  "api/Global.ProbabilisticElectrifyHitExecutor.html": {
    "href": "api/Global.ProbabilisticElectrifyHitExecutor.html",
    "title": "Class ProbabilisticElectrifyHitExecutor | Heroes of the Shrine",
    "keywords": "Class ProbabilisticElectrifyHitExecutor Hit executor that randomly applies electrify effect on hittables Inheritance Object ProbabilisticElectrifyHitExecutor Implements IHitExecutor Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ProbabilisticElectrifyHitExecutor : IHitExecutor Fields electrifyHitExecutor Declaration public ElectrifyHitExecutor electrifyHitExecutor Field Value Type Description ElectrifyHitExecutor Executor to be executed if electrify effect was \"decided\" to be applied probability Declaration public float probability Field Value Type Description Single Probability that electrify effect is applied Methods Execute(Hit) Declaration public void Execute(Hit hit) Parameters Type Name Description Hit hit Implements IHitExecutor"
  },
  "api/Global.RandomRayPattern.html": {
    "href": "api/Global.RandomRayPattern.html",
    "title": "Class RandomRayPattern | Heroes of the Shrine",
    "keywords": "Class RandomRayPattern Inheritance Object BasePattern RandomRayPattern Inherited Members BasePattern.hasRandomExitTime BasePattern.minTime BasePattern.maxTime BasePattern.OnEnter BasePattern.OnExit BasePattern.OnStateUpdate(Animator, AnimatorStateInfo, Int32) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class RandomRayPattern : BasePattern Fields speedMultiplier Declaration public float speedMultiplier Field Value Type Description Single Methods OnStateEnter(Animator, AnimatorStateInfo, Int32) Declaration public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description Animator animator AnimatorStateInfo stateInfo Int32 layerIndex Overrides BasePattern.OnStateEnter(Animator, AnimatorStateInfo, Int32) OnStateExit(Animator, AnimatorStateInfo, Int32) Declaration public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description Animator animator AnimatorStateInfo stateInfo Int32 layerIndex Overrides BasePattern.OnStateExit(Animator, AnimatorStateInfo, Int32)"
  },
  "api/Global.ReadonlyAttribute.html": {
    "href": "api/Global.ReadonlyAttribute.html",
    "title": "Class ReadonlyAttribute | Heroes of the Shrine",
    "keywords": "Class ReadonlyAttribute Inheritance Object ReadonlyAttribute ShowDebugAttribute Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ReadonlyAttribute : PropertyAttribute Constructors ReadonlyAttribute(Boolean) Declaration public ReadonlyAttribute(bool playMode = false) Parameters Type Name Description Boolean playMode Fields playMode Declaration public readonly bool playMode Field Value Type Description Boolean"
  },
  "api/Global.RectTrigger.html": {
    "href": "api/Global.RectTrigger.html",
    "title": "Class RectTrigger | Heroes of the Shrine",
    "keywords": "Class RectTrigger Inheritance Object BaseComponent RectTrigger Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class RectTrigger : BaseComponent Fields action Declaration public ExtEvent action Field Value Type Description ExtEvent Target event position Declaration public Vector3 position Field Value Type Description Vector3 Position of the left-bottom-near point of the cube size Declaration public Vector3 size Field Value Type Description Vector3 Size of the cube Methods Update() Declaration protected override void Update() Overrides BaseComponent.Update()"
  },
  "api/Global.RepositionPattern.html": {
    "href": "api/Global.RepositionPattern.html",
    "title": "Class RepositionPattern | Heroes of the Shrine",
    "keywords": "Class RepositionPattern Inheritance Object BasePattern RepositionPattern Inherited Members BasePattern.hasRandomExitTime BasePattern.minTime BasePattern.maxTime BasePattern.OnEnter BasePattern.OnExit BasePattern.OnStateUpdate(Animator, AnimatorStateInfo, Int32) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class RepositionPattern : BasePattern Fields destination Declaration public Vector3 destination Field Value Type Description Vector3 speedMultiplier Declaration public float speedMultiplier Field Value Type Description Single Methods OnStateEnter(Animator, AnimatorStateInfo, Int32) Declaration public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description Animator animator AnimatorStateInfo stateInfo Int32 layerIndex Overrides BasePattern.OnStateEnter(Animator, AnimatorStateInfo, Int32) OnStateExit(Animator, AnimatorStateInfo, Int32) Declaration public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description Animator animator AnimatorStateInfo stateInfo Int32 layerIndex Overrides BasePattern.OnStateExit(Animator, AnimatorStateInfo, Int32)"
  },
  "api/Global.Rotation.html": {
    "href": "api/Global.Rotation.html",
    "title": "Class Rotation | Heroes of the Shrine",
    "keywords": "Class Rotation Rotation that has two options - normal or flipped Inheritance Object Rotation Inherited Members Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Rotation Properties Flipped Declaration public static Rotation Flipped { get; } Property Value Type Description Rotation Normal Declaration public static Rotation Normal { get; } Property Value Type Description Rotation Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() Operators Equality(Rotation, Rotation) Declaration public static bool operator ==(Rotation a, Rotation b) Parameters Type Name Description Rotation a Rotation b Returns Type Description Boolean Implicit(Rotation to Quaternion) Declaration public static implicit operator Quaternion(Rotation rotation) Parameters Type Name Description Rotation rotation Returns Type Description Quaternion Implicit(Rotation to Int32) Declaration public static implicit operator int (Rotation rotation) Parameters Type Name Description Rotation rotation Returns Type Description Int32 Implicit(Int32 to Rotation) Declaration public static implicit operator Rotation(int value) Parameters Type Name Description Int32 value Returns Type Description Rotation Inequality(Rotation, Rotation) Declaration public static bool operator !=(Rotation a, Rotation b) Parameters Type Name Description Rotation a Rotation b Returns Type Description Boolean Multiply(Rotation, Vector3) Declaration public static Vector3 operator *(Rotation rotation, Vector3 relativePosition) Parameters Type Name Description Rotation rotation Vector3 relativePosition Returns Type Description Vector3 UnaryNegation(Rotation) The opposite rotation Declaration public static Rotation operator -(Rotation rotation) Parameters Type Name Description Rotation rotation Returns Type Description Rotation"
  },
  "api/Global.RotationDrawer.html": {
    "href": "api/Global.RotationDrawer.html",
    "title": "Class RotationDrawer | Heroes of the Shrine",
    "keywords": "Class RotationDrawer Inheritance Object RotationDrawer Namespace : Global Assembly : cs.temp.dll.dll Syntax public class RotationDrawer : PropertyDrawer Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Global.RunBehaviour.Command.html": {
    "href": "api/Global.RunBehaviour.Command.html",
    "title": "Class RunBehaviour.Command | Heroes of the Shrine",
    "keywords": "Class RunBehaviour.Command Inheritance Object RunBehaviour.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command"
  },
  "api/Global.RunBehaviour.html": {
    "href": "api/Global.RunBehaviour.html",
    "title": "Class RunBehaviour | Heroes of the Shrine",
    "keywords": "Class RunBehaviour Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < RunBehaviour.Command > RunBehaviour Implements IMovementBehaviour IControlledBehaviour IPlayableBehaviour Inherited Members PlayableBehaviour<RunBehaviour.Command>.PlayEvents PlayableBehaviour<RunBehaviour.Command>.Blocked PlayableBehaviour<RunBehaviour.Command>.Play(RunBehaviour.Command) PlayableBehaviour<RunBehaviour.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class RunBehaviour : PlayableBehaviour<RunBehaviour.Command>, IMovementBehaviour, IControlledBehaviour, IPlayableBehaviour Fields runParticles Declaration public ParticleSystem runParticles Field Value Type Description ParticleSystem runSpeedMultiplier Declaration public float runSpeedMultiplier Field Value Type Description Single Properties Playing Declaration public override bool Playing { get; } Property Value Type Description Boolean Overrides PlayableBehaviour<RunBehaviour.Command>.Playing Run Declaration public bool Run { get; } Property Value Type Description Boolean Methods Awake() Declaration protected override void Awake() Overrides CharacterBehaviour.Awake() CanPlay(RunBehaviour.Command) Declaration public override bool CanPlay(RunBehaviour.Command command) Parameters Type Name Description RunBehaviour.Command command Returns Type Description Boolean Overrides PlayableBehaviour<RunBehaviour.Command>.CanPlay(RunBehaviour.Command) DoPlay(RunBehaviour.Command) Declaration protected override void DoPlay(RunBehaviour.Command command) Parameters Type Name Description RunBehaviour.Command command Overrides PlayableBehaviour<RunBehaviour.Command>.DoPlay(RunBehaviour.Command) DoStop() Declaration protected override void DoStop() Overrides PlayableBehaviour<RunBehaviour.Command>.DoStop() Implements IMovementBehaviour IControlledBehaviour IPlayableBehaviour"
  },
  "api/Global.RunKick.html": {
    "href": "api/Global.RunKick.html",
    "title": "Class RunKick | Heroes of the Shrine",
    "keywords": "Class RunKick Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < BaseAttack.Command > PhasedBehaviour < BaseAttack.Command > BaseAttack MotionAttack RunKick Implements IControlledBehaviour IPlayableBehaviour Inherited Members MotionAttack.attackFlow MotionAttack.hitDetector MotionAttack.hitExecutor MotionAttack.Motion MotionAttack.AnticipationPhase() MotionAttack.ActivePhase() MotionAttack.RecoveryPhase() BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.IsMidair BaseAttack.Awake() BaseAttack.DoPlay(BaseAttack.Command) BaseAttack.DoStop() BaseAttack.StartHitDetector(BaseHitDetector, ChainHitExecutor) PhasedBehaviour<BaseAttack.Command>.phaseEvents PhasedBehaviour<BaseAttack.Command>.Anticipating PhasedBehaviour<BaseAttack.Command>.Active PhasedBehaviour<BaseAttack.Command>.Recovering PhasedBehaviour<BaseAttack.Command>.Playing PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Blocked PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class RunKick : MotionAttack, IControlledBehaviour, IPlayableBehaviour Methods CanPlay(BaseAttack.Command) Declaration public override bool CanPlay(BaseAttack.Command command) Parameters Type Name Description BaseAttack.Command command Returns Type Description Boolean Overrides BaseAttack.CanPlay(BaseAttack.Command) Implements IControlledBehaviour IPlayableBehaviour"
  },
  "api/Global.RunSwipe.html": {
    "href": "api/Global.RunSwipe.html",
    "title": "Class RunSwipe | Heroes of the Shrine",
    "keywords": "Class RunSwipe Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < BaseAttack.Command > PhasedBehaviour < BaseAttack.Command > BaseAttack SimpleAttack RunSwipe Implements IControlledBehaviour IPlayableBehaviour Inherited Members SimpleAttack.attackFlow SimpleAttack.hitDetector SimpleAttack.hitExecutor SimpleAttack.AnticipationPhase() SimpleAttack.ActivePhase() SimpleAttack.RecoveryPhase() BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.Motion BaseAttack.IsMidair BaseAttack.StartHitDetector(BaseHitDetector, ChainHitExecutor) PhasedBehaviour<BaseAttack.Command>.phaseEvents PhasedBehaviour<BaseAttack.Command>.Anticipating PhasedBehaviour<BaseAttack.Command>.Active PhasedBehaviour<BaseAttack.Command>.Recovering PhasedBehaviour<BaseAttack.Command>.Playing PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Blocked PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class RunSwipe : SimpleAttack, IControlledBehaviour, IPlayableBehaviour Methods Awake() Declaration protected override void Awake() Overrides BaseAttack.Awake() CanPlay(BaseAttack.Command) Declaration public override bool CanPlay(BaseAttack.Command command) Parameters Type Name Description BaseAttack.Command command Returns Type Description Boolean Overrides BaseAttack.CanPlay(BaseAttack.Command) DoPlay(BaseAttack.Command) Declaration protected override void DoPlay(BaseAttack.Command command) Parameters Type Name Description BaseAttack.Command command Overrides BaseAttack.DoPlay(BaseAttack.Command) DoStop() Declaration protected override void DoStop() Overrides BaseAttack.DoStop() Implements IControlledBehaviour IPlayableBehaviour"
  },
  "api/Global.SerializeInterface.html": {
    "href": "api/Global.SerializeInterface.html",
    "title": "Class SerializeInterface | Heroes of the Shrine",
    "keywords": "Class SerializeInterface Attribute for serialized interface fields. It displays a dropdown for selecting an implementation, and then displays the selected implementation fields Inheritance Object SerializeInterface Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SerializeInterface : PropertyAttribute"
  },
  "api/Global.ShadowObject.AnimationDefinition.html": {
    "href": "api/Global.ShadowObject.AnimationDefinition.html",
    "title": "Class ShadowObject.AnimationDefinition | Heroes of the Shrine",
    "keywords": "Class ShadowObject.AnimationDefinition Mapping between an animator state name to the right shadow scale Inheritance Object ShadowObject.AnimationDefinition Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AnimationDefinition Fields animationStateName Declaration public string animationStateName Field Value Type Description String shadowScale Declaration public float shadowScale Field Value Type Description Single"
  },
  "api/Global.ShadowObject.html": {
    "href": "api/Global.ShadowObject.html",
    "title": "Class ShadowObject | Heroes of the Shrine",
    "keywords": "Class ShadowObject Inheritance Object BaseComponent EntityBehaviour ShadowObject Inherited Members EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ShadowObject : EntityBehaviour Fields animationDefinitions Declaration public ShadowObject.AnimationDefinition[] animationDefinitions Field Value Type Description ShadowObject.AnimationDefinition [] Animation states that override ShadowObject.shadowScale figure Declaration public Animator figure Field Value Type Description Animator Related figure to check the animation state - optional movableEntity Declaration public GameEntity movableEntity Field Value Type Description GameEntity Entity that owns the shadow shadowScale Declaration public Vector3 shadowScale Field Value Type Description Vector3 Initial shadow scale in game coordinates Methods Update() Declaration protected override void Update() Overrides BaseComponent.Update()"
  },
  "api/Global.ShowDebugAttribute.html": {
    "href": "api/Global.ShowDebugAttribute.html",
    "title": "Class ShowDebugAttribute | Heroes of the Shrine",
    "keywords": "Class ShowDebugAttribute Inheritance Object ReadonlyAttribute ShowDebugAttribute Inherited Members ReadonlyAttribute.playMode Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ShowDebugAttribute : ReadonlyAttribute Constructors ShowDebugAttribute() Declaration public ShowDebugAttribute()"
  },
  "api/Global.SimpleAttack.AttackFlow.html": {
    "href": "api/Global.SimpleAttack.AttackFlow.html",
    "title": "Class SimpleAttack.AttackFlow | Heroes of the Shrine",
    "keywords": "Class SimpleAttack.AttackFlow Inheritance Object SimpleAttack.AttackFlow Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AttackFlow Fields activeDuration Declaration public float activeDuration Field Value Type Description Single anticipationDuration Declaration public float anticipationDuration Field Value Type Description Single recoveryDuration Declaration public float recoveryDuration Field Value Type Description Single"
  },
  "api/Global.SimpleAttack.html": {
    "href": "api/Global.SimpleAttack.html",
    "title": "Class SimpleAttack | Heroes of the Shrine",
    "keywords": "Class SimpleAttack Simple implementation of BaseAttack , which has a single hit detector, hit executor, and all attack phases have a fixed duration Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < BaseAttack.Command > PhasedBehaviour < BaseAttack.Command > BaseAttack SimpleAttack AirAttack NormalAttack RunSwipe Implements IControlledBehaviour IPlayableBehaviour Inherited Members BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.Motion BaseAttack.IsMidair BaseAttack.Awake() BaseAttack.CanPlay(BaseAttack.Command) BaseAttack.DoPlay(BaseAttack.Command) BaseAttack.DoStop() BaseAttack.StartHitDetector(BaseHitDetector, ChainHitExecutor) PhasedBehaviour<BaseAttack.Command>.phaseEvents PhasedBehaviour<BaseAttack.Command>.Anticipating PhasedBehaviour<BaseAttack.Command>.Active PhasedBehaviour<BaseAttack.Command>.Recovering PhasedBehaviour<BaseAttack.Command>.Playing PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Blocked PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SimpleAttack : BaseAttack, IControlledBehaviour, IPlayableBehaviour Fields attackFlow Declaration public SimpleAttack.AttackFlow attackFlow Field Value Type Description SimpleAttack.AttackFlow hitDetector Declaration public BaseHitDetector hitDetector Field Value Type Description BaseHitDetector hitExecutor Declaration public ChainHitExecutor hitExecutor Field Value Type Description ChainHitExecutor Methods ActivePhase() Declaration protected override IEnumerator ActivePhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<BaseAttack.Command>.ActivePhase() AnticipationPhase() Declaration protected override IEnumerator AnticipationPhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<BaseAttack.Command>.AnticipationPhase() RecoveryPhase() Declaration protected override IEnumerator RecoveryPhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<BaseAttack.Command>.RecoveryPhase() Implements IControlledBehaviour IPlayableBehaviour"
  },
  "api/Global.SingleHitDetector.html": {
    "href": "api/Global.SingleHitDetector.html",
    "title": "Class SingleHitDetector | Heroes of the Shrine",
    "keywords": "Class SingleHitDetector An hit detector for which each object can be detected only once Inheritance Object BaseHitDetector SingleHitDetector Inherited Members BaseHitDetector.hitbox BaseHitDetector.hitParticles BaseHitDetector.includedHittableTags BaseHitDetector.excludedHittableTags BaseHitDetector.onHit BaseHitDetector.StartDetector(Action<HittableHitbox>, Tags) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SingleHitDetector : BaseHitDetector Methods DoStartDetector(Action<HittableHitbox>) Declaration protected override void DoStartDetector(Action<HittableHitbox> hitCallable) Parameters Type Name Description Action < HittableHitbox > hitCallable Overrides BaseHitDetector.DoStartDetector(Action<HittableHitbox>) StopDetector() Declaration public override void StopDetector() Overrides BaseHitDetector.StopDetector()"
  },
  "api/Global.SlashAttack.html": {
    "href": "api/Global.SlashAttack.html",
    "title": "Class SlashAttack | Heroes of the Shrine",
    "keywords": "Class SlashAttack Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < BaseAttack.Command > PhasedBehaviour < BaseAttack.Command > BaseAttack MotionAttack SlashAttack Implements IControlledBehaviour IPlayableBehaviour Inherited Members MotionAttack.attackFlow MotionAttack.hitDetector MotionAttack.hitExecutor MotionAttack.Motion MotionAttack.AnticipationPhase() MotionAttack.ActivePhase() MotionAttack.RecoveryPhase() BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.IsMidair BaseAttack.Awake() BaseAttack.CanPlay(BaseAttack.Command) BaseAttack.DoPlay(BaseAttack.Command) BaseAttack.DoStop() BaseAttack.StartHitDetector(BaseHitDetector, ChainHitExecutor) PhasedBehaviour<BaseAttack.Command>.phaseEvents PhasedBehaviour<BaseAttack.Command>.Anticipating PhasedBehaviour<BaseAttack.Command>.Active PhasedBehaviour<BaseAttack.Command>.Recovering PhasedBehaviour<BaseAttack.Command>.Playing PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Blocked PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SlashAttack : MotionAttack, IControlledBehaviour, IPlayableBehaviour Implements IControlledBehaviour IPlayableBehaviour"
  },
  "api/Global.SlideBehaviour.Command.html": {
    "href": "api/Global.SlideBehaviour.Command.html",
    "title": "Class SlideBehaviour.Command | Heroes of the Shrine",
    "keywords": "Class SlideBehaviour.Command Inheritance Object SlideBehaviour.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command Fields direction Declaration public int direction Field Value Type Description Int32"
  },
  "api/Global.SlideBehaviour.html": {
    "href": "api/Global.SlideBehaviour.html",
    "title": "Class SlideBehaviour | Heroes of the Shrine",
    "keywords": "Class SlideBehaviour Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < SlideBehaviour.Command > SlideBehaviour Implements IMovementBehaviour IControlledBehaviour IPlayableBehaviour Inherited Members PlayableBehaviour<SlideBehaviour.Command>.PlayEvents PlayableBehaviour<SlideBehaviour.Command>.Blocked PlayableBehaviour<SlideBehaviour.Command>.Play(SlideBehaviour.Command) PlayableBehaviour<SlideBehaviour.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Awake() CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SlideBehaviour : PlayableBehaviour<SlideBehaviour.Command>, IMovementBehaviour, IControlledBehaviour, IPlayableBehaviour Fields cooldown Declaration public Cooldown cooldown Field Value Type Description Cooldown slideSpeedMultiplier Declaration public float slideSpeedMultiplier Field Value Type Description Single slideStopAcceleration Declaration public float slideStopAcceleration Field Value Type Description Single Properties Playing Declaration public override bool Playing { get; } Property Value Type Description Boolean Overrides PlayableBehaviour<SlideBehaviour.Command>.Playing Slide Declaration public bool Slide { get; } Property Value Type Description Boolean Methods CanPlay(SlideBehaviour.Command) Declaration public override bool CanPlay(SlideBehaviour.Command command) Parameters Type Name Description SlideBehaviour.Command command Returns Type Description Boolean Overrides PlayableBehaviour<SlideBehaviour.Command>.CanPlay(SlideBehaviour.Command) DoPlay(SlideBehaviour.Command) Declaration protected override void DoPlay(SlideBehaviour.Command command) Parameters Type Name Description SlideBehaviour.Command command Overrides PlayableBehaviour<SlideBehaviour.Command>.DoPlay(SlideBehaviour.Command) DoStop() Declaration protected override void DoStop() Overrides PlayableBehaviour<SlideBehaviour.Command>.DoStop() Implements IMovementBehaviour IControlledBehaviour IPlayableBehaviour"
  },
  "api/Global.SoundEffect.html": {
    "href": "api/Global.SoundEffect.html",
    "title": "Class SoundEffect | Heroes of the Shrine",
    "keywords": "Class SoundEffect Helper component that calls AudioManager.Play(AudioClip) . Use it only when you cannot access the global directly. Inheritance Object BaseComponent SoundEffect Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SoundEffect : BaseComponent Methods Play(AudioClip) Plays a sound effect Declaration public void Play(AudioClip clip) Parameters Type Name Description AudioClip clip Audio asset to play"
  },
  "api/Global.SoundEffectsVolumeSlider.html": {
    "href": "api/Global.SoundEffectsVolumeSlider.html",
    "title": "Class SoundEffectsVolumeSlider | Heroes of the Shrine",
    "keywords": "Class SoundEffectsVolumeSlider Class that syncs between the SFX volume and a slider Inheritance Object BaseComponent SoundEffectsVolumeSlider Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SoundEffectsVolumeSlider : BaseComponent Fields slider Declaration public Slider slider Field Value Type Description Slider Related slider"
  },
  "api/Global.SpawnAttack.AttackFlow.html": {
    "href": "api/Global.SpawnAttack.AttackFlow.html",
    "title": "Class SpawnAttack.AttackFlow | Heroes of the Shrine",
    "keywords": "Class SpawnAttack.AttackFlow Inheritance Object SpawnAttack.AttackFlow Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AttackFlow Fields anticipationDuration Declaration public float anticipationDuration Field Value Type Description Single recoveryDuration Declaration public float recoveryDuration Field Value Type Description Single"
  },
  "api/Global.SpawnAttack.html": {
    "href": "api/Global.SpawnAttack.html",
    "title": "Class SpawnAttack | Heroes of the Shrine",
    "keywords": "Class SpawnAttack Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < BaseAttack.Command > PhasedBehaviour < BaseAttack.Command > BaseAttack SpawnAttack Implements IControlledBehaviour IPlayableBehaviour Inherited Members BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.Motion BaseAttack.IsMidair BaseAttack.Awake() BaseAttack.CanPlay(BaseAttack.Command) BaseAttack.DoPlay(BaseAttack.Command) BaseAttack.DoStop() BaseAttack.StartHitDetector(BaseHitDetector, ChainHitExecutor) PhasedBehaviour<BaseAttack.Command>.phaseEvents PhasedBehaviour<BaseAttack.Command>.Anticipating PhasedBehaviour<BaseAttack.Command>.Active PhasedBehaviour<BaseAttack.Command>.Recovering PhasedBehaviour<BaseAttack.Command>.Playing PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Blocked PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SpawnAttack : BaseAttack, IControlledBehaviour, IPlayableBehaviour Fields attackFlow Declaration public SpawnAttack.AttackFlow attackFlow Field Value Type Description SpawnAttack.AttackFlow enemyPrefab Declaration public GameObject enemyPrefab Field Value Type Description GameObject maxEnemyCount Declaration public int maxEnemyCount Field Value Type Description Int32 spawnPoints Declaration public Vector3[] spawnPoints Field Value Type Description Vector3 [] Methods ActivePhase() Declaration protected override IEnumerator ActivePhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<BaseAttack.Command>.ActivePhase() AnticipationPhase() Declaration protected override IEnumerator AnticipationPhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<BaseAttack.Command>.AnticipationPhase() RecoveryPhase() Declaration protected override IEnumerator RecoveryPhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<BaseAttack.Command>.RecoveryPhase() Implements IControlledBehaviour IPlayableBehaviour"
  },
  "api/Global.SpikeBall.html": {
    "href": "api/Global.SpikeBall.html",
    "title": "Class SpikeBall | Heroes of the Shrine",
    "keywords": "Class SpikeBall Inheritance Object BaseComponent EntityBehaviour SpikeBall Inherited Members EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SpikeBall : EntityBehaviour Fields animator Declaration public Animator animator Field Value Type Description Animator explodeAnimationDuration Declaration public float explodeAnimationDuration Field Value Type Description Single explosionHitDetector Declaration public AbsoluteHitDetector explosionHitDetector Field Value Type Description AbsoluteHitDetector explosionHitExecutor Declaration public ChainHitExecutor explosionHitExecutor Field Value Type Description ChainHitExecutor explosionSourceHitExecutor Declaration public ChainHitExecutor explosionSourceHitExecutor Field Value Type Description ChainHitExecutor explosionStartDelay Declaration public float explosionStartDelay Field Value Type Description Single latchHitDetector Declaration public SingleHitDetector latchHitDetector Field Value Type Description SingleHitDetector latchHitExecutor Declaration public ChainHitExecutor latchHitExecutor Field Value Type Description ChainHitExecutor latchZ Declaration public float latchZ Field Value Type Description Single onExplode Declaration public ExtEvent onExplode Field Value Type Description ExtEvent onLatch Declaration public ExtEvent onLatch Field Value Type Description ExtEvent Methods Explode() Declaration public void Explode() Fire(Vector3, BaseAttack) Declaration public void Fire(Vector3 velocity, BaseAttack source) Parameters Type Name Description Vector3 velocity BaseAttack source"
  },
  "api/Global.SpikeBallAttack.AttackFlow.html": {
    "href": "api/Global.SpikeBallAttack.AttackFlow.html",
    "title": "Class SpikeBallAttack.AttackFlow | Heroes of the Shrine",
    "keywords": "Class SpikeBallAttack.AttackFlow Inheritance Object SpikeBallAttack.AttackFlow Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AttackFlow Fields activeTimeout Declaration public float activeTimeout Field Value Type Description Single anticipationDuration Declaration public float anticipationDuration Field Value Type Description Single minActiveTime Declaration public float minActiveTime Field Value Type Description Single recoveryDuration Declaration public float recoveryDuration Field Value Type Description Single"
  },
  "api/Global.SpikeBallAttack.html": {
    "href": "api/Global.SpikeBallAttack.html",
    "title": "Class SpikeBallAttack | Heroes of the Shrine",
    "keywords": "Class SpikeBallAttack Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < BaseAttack.Command > PhasedBehaviour < BaseAttack.Command > BaseAttack SpikeBallAttack Implements IControlledBehaviour IPlayableBehaviour Inherited Members BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.Motion BaseAttack.IsMidair BaseAttack.CanPlay(BaseAttack.Command) BaseAttack.DoPlay(BaseAttack.Command) BaseAttack.DoStop() BaseAttack.StartHitDetector(BaseHitDetector, ChainHitExecutor) PhasedBehaviour<BaseAttack.Command>.phaseEvents PhasedBehaviour<BaseAttack.Command>.Anticipating PhasedBehaviour<BaseAttack.Command>.Active PhasedBehaviour<BaseAttack.Command>.Recovering PhasedBehaviour<BaseAttack.Command>.Playing PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Blocked PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SpikeBallAttack : BaseAttack, IControlledBehaviour, IPlayableBehaviour Fields attackFlow Declaration public SpikeBallAttack.AttackFlow attackFlow Field Value Type Description SpikeBallAttack.AttackFlow ballPrefab Declaration public GameObject ballPrefab Field Value Type Description GameObject ballSpawnPoint Declaration public Vector3 ballSpawnPoint Field Value Type Description Vector3 ballSpeed Declaration public float ballSpeed Field Value Type Description Single Methods ActivePhase() Declaration protected override IEnumerator ActivePhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<BaseAttack.Command>.ActivePhase() AnticipationPhase() Declaration protected override IEnumerator AnticipationPhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<BaseAttack.Command>.AnticipationPhase() Awake() Declaration protected override void Awake() Overrides BaseAttack.Awake() RecoveryPhase() Declaration protected override IEnumerator RecoveryPhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<BaseAttack.Command>.RecoveryPhase() ReleaseBall() Declaration public void ReleaseBall() Implements IControlledBehaviour IPlayableBehaviour"
  },
  "api/Global.SpinningSwordsAttack.AttackFlow.html": {
    "href": "api/Global.SpinningSwordsAttack.AttackFlow.html",
    "title": "Class SpinningSwordsAttack.AttackFlow | Heroes of the Shrine",
    "keywords": "Class SpinningSwordsAttack.AttackFlow Inheritance Object SpinningSwordsAttack.AttackFlow Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AttackFlow Fields activeDuration Declaration public float activeDuration Field Value Type Description Single anticipationDuration Declaration public float anticipationDuration Field Value Type Description Single detector1Duration Declaration public float detector1Duration Field Value Type Description Single detector1StartTime Declaration public float detector1StartTime Field Value Type Description Single detector2Duration Declaration public float detector2Duration Field Value Type Description Single detector2StartTime Declaration public float detector2StartTime Field Value Type Description Single recoveryDuration Declaration public float recoveryDuration Field Value Type Description Single"
  },
  "api/Global.SpinningSwordsAttack.html": {
    "href": "api/Global.SpinningSwordsAttack.html",
    "title": "Class SpinningSwordsAttack | Heroes of the Shrine",
    "keywords": "Class SpinningSwordsAttack Attack that has two hitboxes, each one has different timing inside the active phase Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < BaseAttack.Command > PhasedBehaviour < BaseAttack.Command > BaseAttack SpinningSwordsAttack Implements IControlledBehaviour IPlayableBehaviour Inherited Members BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.Motion BaseAttack.IsMidair BaseAttack.Awake() BaseAttack.CanPlay(BaseAttack.Command) BaseAttack.DoPlay(BaseAttack.Command) BaseAttack.DoStop() BaseAttack.StartHitDetector(BaseHitDetector, ChainHitExecutor) PhasedBehaviour<BaseAttack.Command>.phaseEvents PhasedBehaviour<BaseAttack.Command>.Anticipating PhasedBehaviour<BaseAttack.Command>.Active PhasedBehaviour<BaseAttack.Command>.Recovering PhasedBehaviour<BaseAttack.Command>.Playing PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Blocked PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SpinningSwordsAttack : BaseAttack, IControlledBehaviour, IPlayableBehaviour Fields attackFlow Declaration public SpinningSwordsAttack.AttackFlow attackFlow Field Value Type Description SpinningSwordsAttack.AttackFlow hitDetector1 Declaration public BaseHitDetector hitDetector1 Field Value Type Description BaseHitDetector hitDetector2 Declaration public BaseHitDetector hitDetector2 Field Value Type Description BaseHitDetector hitExecutor1 Declaration public ChainHitExecutor hitExecutor1 Field Value Type Description ChainHitExecutor hitExecutor2 Declaration public ChainHitExecutor hitExecutor2 Field Value Type Description ChainHitExecutor Methods ActivePhase() Declaration protected override IEnumerator ActivePhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<BaseAttack.Command>.ActivePhase() AnticipationPhase() Declaration protected override IEnumerator AnticipationPhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<BaseAttack.Command>.AnticipationPhase() RecoveryPhase() Declaration protected override IEnumerator RecoveryPhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<BaseAttack.Command>.RecoveryPhase() Implements IControlledBehaviour IPlayableBehaviour"
  },
  "api/Global.StabAttack.html": {
    "href": "api/Global.StabAttack.html",
    "title": "Class StabAttack | Heroes of the Shrine",
    "keywords": "Class StabAttack Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < BaseAttack.Command > PhasedBehaviour < BaseAttack.Command > BaseAttack SimpleAttack NormalAttack StabAttack Implements IControlledBehaviour IPlayableBehaviour Inherited Members SimpleAttack.attackFlow SimpleAttack.hitDetector SimpleAttack.hitExecutor SimpleAttack.AnticipationPhase() SimpleAttack.ActivePhase() SimpleAttack.RecoveryPhase() BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.Motion BaseAttack.IsMidair BaseAttack.Awake() BaseAttack.CanPlay(BaseAttack.Command) BaseAttack.DoPlay(BaseAttack.Command) BaseAttack.DoStop() BaseAttack.StartHitDetector(BaseHitDetector, ChainHitExecutor) PhasedBehaviour<BaseAttack.Command>.phaseEvents PhasedBehaviour<BaseAttack.Command>.Anticipating PhasedBehaviour<BaseAttack.Command>.Active PhasedBehaviour<BaseAttack.Command>.Recovering PhasedBehaviour<BaseAttack.Command>.Playing PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Blocked PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class StabAttack : NormalAttack, IControlledBehaviour, IPlayableBehaviour Implements IControlledBehaviour IPlayableBehaviour"
  },
  "api/Global.StaggerBehaviour.Command.html": {
    "href": "api/Global.StaggerBehaviour.Command.html",
    "title": "Class StaggerBehaviour.Command | Heroes of the Shrine",
    "keywords": "Class StaggerBehaviour.Command Inheritance Object StaggerBehaviour.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command"
  },
  "api/Global.StaggerBehaviour.html": {
    "href": "api/Global.StaggerBehaviour.html",
    "title": "Class StaggerBehaviour | Heroes of the Shrine",
    "keywords": "Class StaggerBehaviour Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < StaggerBehaviour.Command > StaggerBehaviour Implements IPlayableBehaviour Inherited Members PlayableBehaviour<StaggerBehaviour.Command>.PlayEvents PlayableBehaviour<StaggerBehaviour.Command>.Blocked PlayableBehaviour<StaggerBehaviour.Command>.CanPlay(StaggerBehaviour.Command) PlayableBehaviour<StaggerBehaviour.Command>.Play(StaggerBehaviour.Command) PlayableBehaviour<StaggerBehaviour.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class StaggerBehaviour : PlayableBehaviour<StaggerBehaviour.Command>, IPlayableBehaviour Fields staggerDuration Declaration public float staggerDuration Field Value Type Description Single Properties Playing Declaration public override bool Playing { get; } Property Value Type Description Boolean Overrides PlayableBehaviour<StaggerBehaviour.Command>.Playing Methods Awake() Declaration protected override void Awake() Overrides CharacterBehaviour.Awake() DoPlay(StaggerBehaviour.Command) Declaration protected override void DoPlay(StaggerBehaviour.Command command) Parameters Type Name Description StaggerBehaviour.Command command Overrides PlayableBehaviour<StaggerBehaviour.Command>.DoPlay(StaggerBehaviour.Command) DoStop() Declaration protected override void DoStop() Overrides PlayableBehaviour<StaggerBehaviour.Command>.DoStop() Implements IPlayableBehaviour"
  },
  "api/Global.StopEncountersAction.html": {
    "href": "api/Global.StopEncountersAction.html",
    "title": "Class StopEncountersAction | Heroes of the Shrine",
    "keywords": "Class StopEncountersAction Stops all encounters in the scene Inheritance Object BaseComponent StopEncountersAction Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class StopEncountersAction : BaseComponent Methods Invoke() Declaration public void Invoke()"
  },
  "api/Global.StunBehaviour.Command.html": {
    "href": "api/Global.StunBehaviour.Command.html",
    "title": "Class StunBehaviour.Command | Heroes of the Shrine",
    "keywords": "Class StunBehaviour.Command Inheritance Object StunBehaviour.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command Fields time Declaration public float time Field Value Type Description Single"
  },
  "api/Global.StunBehaviour.html": {
    "href": "api/Global.StunBehaviour.html",
    "title": "Class StunBehaviour | Heroes of the Shrine",
    "keywords": "Class StunBehaviour Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < StunBehaviour.Command > StunBehaviour Implements IForcedBehaviour IPlayableBehaviour Inherited Members PlayableBehaviour<StunBehaviour.Command>.PlayEvents PlayableBehaviour<StunBehaviour.Command>.Blocked PlayableBehaviour<StunBehaviour.Command>.CanPlay(StunBehaviour.Command) PlayableBehaviour<StunBehaviour.Command>.Play(StunBehaviour.Command) PlayableBehaviour<StunBehaviour.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Awake() CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class StunBehaviour : PlayableBehaviour<StunBehaviour.Command>, IForcedBehaviour, IPlayableBehaviour Fields stunFrames Declaration public int stunFrames Field Value Type Description Int32 Properties Playing Declaration public override bool Playing { get; } Property Value Type Description Boolean Overrides PlayableBehaviour<StunBehaviour.Command>.Playing Stun Declaration public bool Stun { get; } Property Value Type Description Boolean StunFrame Declaration public int StunFrame { get; } Property Value Type Description Int32 Methods DoPlay(StunBehaviour.Command) Declaration protected override void DoPlay(StunBehaviour.Command command) Parameters Type Name Description StunBehaviour.Command command Overrides PlayableBehaviour<StunBehaviour.Command>.DoPlay(StunBehaviour.Command) DoStop() Declaration protected override void DoStop() Overrides PlayableBehaviour<StunBehaviour.Command>.DoStop() Implements IForcedBehaviour IPlayableBehaviour"
  },
  "api/Global.StunBrainModule.html": {
    "href": "api/Global.StunBrainModule.html",
    "title": "Class StunBrainModule | Heroes of the Shrine",
    "keywords": "Class StunBrainModule State machine parameters related to StunBehaviour Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour BrainModule StunBrainModule Inherited Members BrainModule.StateMachine BrainModule.Awake() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class StunBrainModule : BrainModule Methods GetParameters() Declaration public override string[] GetParameters() Returns Type Description String [] Overrides BrainModule.GetParameters()"
  },
  "api/Global.StunHitExecutor.html": {
    "href": "api/Global.StunHitExecutor.html",
    "title": "Class StunHitExecutor | Heroes of the Shrine",
    "keywords": "Class StunHitExecutor Hit executor that stuns an hittable Inheritance Object StunHitExecutor Implements IHitExecutor Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class StunHitExecutor : IHitExecutor Fields stunTime Declaration public float stunTime Field Value Type Description Single Duration of stun effect caused by hit Methods Execute(Hit) Declaration public void Execute(Hit hit) Parameters Type Name Description Hit hit Implements IHitExecutor"
  },
  "api/Global.SuperArmor.Command.html": {
    "href": "api/Global.SuperArmor.Command.html",
    "title": "Class SuperArmor.Command | Heroes of the Shrine",
    "keywords": "Class SuperArmor.Command Inheritance Object SuperArmor.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command"
  },
  "api/Global.SuperArmor.html": {
    "href": "api/Global.SuperArmor.html",
    "title": "Class SuperArmor | Heroes of the Shrine",
    "keywords": "Class SuperArmor Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < SuperArmor.Command > SuperArmor Implements IPlayableBehaviour Inherited Members PlayableBehaviour<SuperArmor.Command>.PlayEvents PlayableBehaviour<SuperArmor.Command>.Blocked PlayableBehaviour<SuperArmor.Command>.CanPlay(SuperArmor.Command) PlayableBehaviour<SuperArmor.Command>.Play(SuperArmor.Command) PlayableBehaviour<SuperArmor.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.Awake() CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SuperArmor : PlayableBehaviour<SuperArmor.Command>, IPlayableBehaviour Fields armorCooldown Declaration public float armorCooldown Field Value Type Description Single armorCooldownStart Declaration public float armorCooldownStart Field Value Type Description Single armorHealth Declaration public float armorHealth Field Value Type Description Single damageMultiplier Declaration public float damageMultiplier Field Value Type Description Single onBreak Declaration public ExtEvent onBreak Field Value Type Description ExtEvent onHit Declaration public ExtEvent onHit Field Value Type Description ExtEvent Properties CurrentArmorHealth Declaration public float CurrentArmorHealth { get; } Property Value Type Description Single Playing Declaration public override bool Playing { get; } Property Value Type Description Boolean Overrides PlayableBehaviour<SuperArmor.Command>.Playing Methods DoPlay(SuperArmor.Command) Declaration protected override void DoPlay(SuperArmor.Command command) Parameters Type Name Description SuperArmor.Command command Overrides PlayableBehaviour<SuperArmor.Command>.DoPlay(SuperArmor.Command) DoStop() Declaration protected override void DoStop() Overrides PlayableBehaviour<SuperArmor.Command>.DoStop() GetProgress() Declaration public float GetProgress() Returns Type Description Single HitArmor(Single) Declaration public void HitArmor(float damage) Parameters Type Name Description Single damage Implements IPlayableBehaviour"
  },
  "api/Global.SuperArmorBar.html": {
    "href": "api/Global.SuperArmorBar.html",
    "title": "Class SuperArmorBar | Heroes of the Shrine",
    "keywords": "Class SuperArmorBar Bar that displays the health left in a super armor when it's active, and the \"refill\" progress when it's broken Inheritance Object BaseComponent SuperArmorBar Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SuperArmorBar : BaseComponent Fields superArmor Declaration public SuperArmor superArmor Field Value Type Description SuperArmor Related SuperArmorBar.superArmor Methods Update() Declaration protected override void Update() Overrides BaseComponent.Update()"
  },
  "api/Global.SuperArmorBrainModule.html": {
    "href": "api/Global.SuperArmorBrainModule.html",
    "title": "Class SuperArmorBrainModule | Heroes of the Shrine",
    "keywords": "Class SuperArmorBrainModule State machine parameters related to SuperArmorBrainModule.superArmor Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour BrainModule SuperArmorBrainModule Inherited Members BrainModule.StateMachine CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SuperArmorBrainModule : BrainModule Methods Awake() Declaration protected override void Awake() Overrides BrainModule.Awake() GetParameters() Declaration public override string[] GetParameters() Returns Type Description String [] Overrides BrainModule.GetParameters()"
  },
  "api/Global.SuperArmorHittableHitbox.html": {
    "href": "api/Global.SuperArmorHittableHitbox.html",
    "title": "Class SuperArmorHittableHitbox | Heroes of the Shrine",
    "keywords": "Class SuperArmorHittableHitbox HittableHitbox that cannot receive knockback or stun, and proxies hits to SuperArmorHittableHitbox.superArmor Inheritance Object BaseComponent EntityBehaviour HittableHitbox SuperArmorHittableHitbox Implements IHittable Inherited Members HittableHitbox.hittableBehaviour HittableHitbox.onHit HittableHitbox.figure HittableHitbox.blinkMaterial HittableHitbox.blinkTime HittableHitbox.Hitbox HittableHitbox.Character HittableHitbox.HitEvent HittableHitbox.CanGetHit() HittableHitbox.Hit(ChainHitExecutor, Hit) EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SuperArmorHittableHitbox : HittableHitbox, IHittable Methods Awake() Declaration protected override void Awake() Overrides HittableHitbox.Awake() ProcessHit(IHitExecutor, Hit) Declaration public override void ProcessHit(IHitExecutor executor, Hit hit) Parameters Type Name Description IHitExecutor executor Hit hit Overrides HittableHitbox.ProcessHit(IHitExecutor, Hit) Implements IHittable"
  },
  "api/Global.Tag.html": {
    "href": "api/Global.Tag.html",
    "title": "Enum Tag | Heroes of the Shrine",
    "keywords": "Enum Tag Possible tags options Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum Tag Fields Name Description Barrier Boss Enemy Goblin Player Prop Zombie"
  },
  "api/Global.Tags.html": {
    "href": "api/Global.Tags.html",
    "title": "Class Tags | Heroes of the Shrine",
    "keywords": "Class Tags Tags property that is displayed as list in the inspector Inheritance Object Tags Implements IReadOnlyCollection < Tag > IEnumerable < Tag > IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Tags : IReadOnlyCollection<Tag>, IEnumerable<Tag>, IEnumerable Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Contains(Tag) Declaration public bool Contains(Tag tag) Parameters Type Name Description Tag tag Returns Type Description Boolean GetEnumerator() Declaration public IEnumerator<Tag> GetEnumerator() Returns Type Description IEnumerator < Tag > Implements System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Global.TagsDrawer.html": {
    "href": "api/Global.TagsDrawer.html",
    "title": "Class TagsDrawer | Heroes of the Shrine",
    "keywords": "Class TagsDrawer Inheritance Object TagsDrawer Namespace : Global Assembly : cs.temp.dll.dll Syntax public class TagsDrawer : PropertyDrawer Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Global.TextLink.html": {
    "href": "api/Global.TextLink.html",
    "title": "Class TextLink | Heroes of the Shrine",
    "keywords": "Class TextLink Opens a give URL on a web browser Inheritance Object BaseComponent TextLink Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class TextLink : BaseComponent Fields url Declaration public string url Field Value Type Description String URL to open Methods JumpToLink() Opens the URL, call it on button click Declaration public void JumpToLink()"
  },
  "api/Global.TransitionAction.html": {
    "href": "api/Global.TransitionAction.html",
    "title": "Class TransitionAction | Heroes of the Shrine",
    "keywords": "Class TransitionAction Loads a scene Inheritance Object BaseComponent TransitionAction Inherited Members BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class TransitionAction : BaseComponent Fields sceneName Declaration public string sceneName Field Value Type Description String Name of the scene to load - exactly its file name Methods Invoke() Declaration public void Invoke()"
  },
  "api/Global.UnityEntityExtensions.html": {
    "href": "api/Global.UnityEntityExtensions.html",
    "title": "Class UnityEntityExtensions | Heroes of the Shrine",
    "keywords": "Class UnityEntityExtensions Inheritance Object UnityEntityExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public static class UnityEntityExtensions Methods GetEntity(Component) Declaration public static GameEntity GetEntity(this Component component) Parameters Type Name Description Component component Returns Type Description GameEntity GetEntity(GameObject) Declaration public static GameEntity GetEntity(this GameObject object) Parameters Type Name Description GameObject object Returns Type Description GameEntity"
  },
  "api/Global.Uppercut.html": {
    "href": "api/Global.Uppercut.html",
    "title": "Class Uppercut | Heroes of the Shrine",
    "keywords": "Class Uppercut Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < BaseAttack.Command > PhasedBehaviour < BaseAttack.Command > BaseAttack SimpleAttack NormalAttack Uppercut Implements IControlledBehaviour IPlayableBehaviour Inherited Members SimpleAttack.attackFlow SimpleAttack.hitDetector SimpleAttack.hitExecutor SimpleAttack.AnticipationPhase() SimpleAttack.ActivePhase() SimpleAttack.RecoveryPhase() BaseAttack.previousAttacks BaseAttack.instant BaseAttack.interruptible BaseAttack.hardRecovery BaseAttack.Motion BaseAttack.IsMidair BaseAttack.Awake() BaseAttack.CanPlay(BaseAttack.Command) BaseAttack.DoPlay(BaseAttack.Command) BaseAttack.DoStop() BaseAttack.StartHitDetector(BaseHitDetector, ChainHitExecutor) PhasedBehaviour<BaseAttack.Command>.phaseEvents PhasedBehaviour<BaseAttack.Command>.Anticipating PhasedBehaviour<BaseAttack.Command>.Active PhasedBehaviour<BaseAttack.Command>.Recovering PhasedBehaviour<BaseAttack.Command>.Playing PlayableBehaviour<BaseAttack.Command>.PlayEvents PlayableBehaviour<BaseAttack.Command>.Blocked PlayableBehaviour<BaseAttack.Command>.Play(BaseAttack.Command) PlayableBehaviour<BaseAttack.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Uppercut : NormalAttack, IControlledBehaviour, IPlayableBehaviour Implements IControlledBehaviour IPlayableBehaviour"
  },
  "api/Global.WalkableGrid.html": {
    "href": "api/Global.WalkableGrid.html",
    "title": "Class WalkableGrid | Heroes of the Shrine",
    "keywords": "Class WalkableGrid Walkable area for player and enemies, used for pathfinding Inheritance Object BaseComponent EntityBehaviour WalkableGrid Inherited Members EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class WalkableGrid : EntityBehaviour Fields gridWorldSize Declaration public Vector3 gridWorldSize Field Value Type Description Vector3 Size of the grid nodeRadius Declaration public float nodeRadius Field Value Type Description Single Radius of a small square piece of the grid. Smaller values provide better pathfinding results but are more expensive computationally Methods ClosestWalkableNode(Vector3, Node[]) Declaration public Node ClosestWalkableNode(Vector3 worldPosition, Node[] excluded = null) Parameters Type Name Description Vector3 worldPosition Node [] excluded Returns Type Description Node GetCircle(Vector3, Single) Declaration public IEnumerable<Node> GetCircle(Vector3 center, float radius) Parameters Type Name Description Vector3 center Single radius Returns Type Description IEnumerable < Node > IsInside(Vector3) Declaration public bool IsInside(Vector3 point) Parameters Type Name Description Vector3 point Returns Type Description Boolean IsWalkable(Node, Node[]) Declaration public static bool IsWalkable(Node node, Node[] excluded = null) Parameters Type Name Description Node node Node [] excluded Returns Type Description Boolean LineOfSight(Node, Node, Node[]) Declaration public bool LineOfSight(Node a, Node b, Node[] excluded = null) Parameters Type Name Description Node a Node b Node [] excluded Returns Type Description Boolean NodeFromWorldPoint(Vector3) Declaration public Node NodeFromWorldPoint(Vector3 worldPosition) Parameters Type Name Description Vector3 worldPosition Returns Type Description Node WalkableNeighbors(Node, Node[]) Declaration public List<Node> WalkableNeighbors(Node node, Node[] excluded = null) Parameters Type Name Description Node node Node [] excluded Returns Type Description List < Node >"
  },
  "api/Global.WalkBehaviour.Command.html": {
    "href": "api/Global.WalkBehaviour.Command.html",
    "title": "Class WalkBehaviour.Command | Heroes of the Shrine",
    "keywords": "Class WalkBehaviour.Command Inheritance Object WalkBehaviour.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command Constructors Command(Vector2, Boolean) Declaration public Command(Vector2 direction, bool fitRotation = true) Parameters Type Name Description Vector2 direction Boolean fitRotation Command(Vector3, Boolean) Declaration public Command(Vector3 direction, bool fitRotation = true) Parameters Type Name Description Vector3 direction Boolean fitRotation Fields direction Declaration public readonly Vector2 direction Field Value Type Description Vector2 fitRotation Declaration public readonly bool fitRotation Field Value Type Description Boolean"
  },
  "api/Global.WalkBehaviour.html": {
    "href": "api/Global.WalkBehaviour.html",
    "title": "Class WalkBehaviour | Heroes of the Shrine",
    "keywords": "Class WalkBehaviour Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < WalkBehaviour.Command > WalkBehaviour Implements IMovementBehaviour IControlledBehaviour IPlayableBehaviour Inherited Members PlayableBehaviour<WalkBehaviour.Command>.PlayEvents PlayableBehaviour<WalkBehaviour.Command>.Blocked PlayableBehaviour<WalkBehaviour.Command>.Play(WalkBehaviour.Command) PlayableBehaviour<WalkBehaviour.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class WalkBehaviour : PlayableBehaviour<WalkBehaviour.Command>, IMovementBehaviour, IControlledBehaviour, IPlayableBehaviour Fields defaultSpeed Declaration public float defaultSpeed Field Value Type Description Single speed Declaration public float speed Field Value Type Description Single Properties Playing Declaration public override bool Playing { get; } Property Value Type Description Boolean Overrides PlayableBehaviour<WalkBehaviour.Command>.Playing Walk Declaration public bool Walk { get; } Property Value Type Description Boolean Methods Awake() Declaration protected override void Awake() Overrides CharacterBehaviour.Awake() CanPlay(WalkBehaviour.Command) Declaration public override bool CanPlay(WalkBehaviour.Command command) Parameters Type Name Description WalkBehaviour.Command command Returns Type Description Boolean Overrides PlayableBehaviour<WalkBehaviour.Command>.CanPlay(WalkBehaviour.Command) DoPlay(WalkBehaviour.Command) Declaration protected override void DoPlay(WalkBehaviour.Command command) Parameters Type Name Description WalkBehaviour.Command command Overrides PlayableBehaviour<WalkBehaviour.Command>.DoPlay(WalkBehaviour.Command) DoStop() Declaration protected override void DoStop() Overrides PlayableBehaviour<WalkBehaviour.Command>.DoStop() Implements IMovementBehaviour IControlledBehaviour IPlayableBehaviour"
  },
  "api/Global.WalkParticles.html": {
    "href": "api/Global.WalkParticles.html",
    "title": "Class WalkParticles | Heroes of the Shrine",
    "keywords": "Class WalkParticles Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour WalkParticles Inherited Members CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class WalkParticles : CharacterBehaviour Fields particles Declaration public Particles particles Field Value Type Description Particles Methods Awake() Declaration protected override void Awake() Overrides CharacterBehaviour.Awake()"
  },
  "api/Global.WalkSoundEffect.html": {
    "href": "api/Global.WalkSoundEffect.html",
    "title": "Class WalkSoundEffect | Heroes of the Shrine",
    "keywords": "Class WalkSoundEffect Plays a sound effect when character is walking Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour WalkSoundEffect Inherited Members CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class WalkSoundEffect : CharacterBehaviour Fields walkAudioSource Declaration public AudioSource walkAudioSource Field Value Type Description AudioSource only for this character's walk sound effects Methods Awake() Declaration protected override void Awake() Overrides CharacterBehaviour.Awake()"
  },
  "api/Global.WideBlock.BlockDefinition.html": {
    "href": "api/Global.WideBlock.BlockDefinition.html",
    "title": "Class WideBlock.BlockDefinition | Heroes of the Shrine",
    "keywords": "Class WideBlock.BlockDefinition Inheritance Object WideBlock.BlockDefinition Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BlockDefinition Fields attackType Declaration public TypeReference attackType Field Value Type Description TypeReference energyReward Declaration public float energyReward Field Value Type Description Single"
  },
  "api/Global.WideBlock.Command.html": {
    "href": "api/Global.WideBlock.Command.html",
    "title": "Class WideBlock.Command | Heroes of the Shrine",
    "keywords": "Class WideBlock.Command Inheritance Object WideBlock.Command Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Command"
  },
  "api/Global.WideBlock.html": {
    "href": "api/Global.WideBlock.html",
    "title": "Class WideBlock | Heroes of the Shrine",
    "keywords": "Class WideBlock Inheritance Object BaseComponent EntityBehaviour CharacterBehaviour PlayableBehaviour < WideBlock.Command > PhasedBehaviour < WideBlock.Command > WideBlock Implements IBlockBehaviour IControlledBehaviour IPlayableBehaviour Inherited Members PhasedBehaviour<WideBlock.Command>.phaseEvents PhasedBehaviour<WideBlock.Command>.Anticipating PhasedBehaviour<WideBlock.Command>.Active PhasedBehaviour<WideBlock.Command>.Recovering PlayableBehaviour<WideBlock.Command>.PlayEvents PlayableBehaviour<WideBlock.Command>.Blocked PlayableBehaviour<WideBlock.Command>.Play(WideBlock.Command) PlayableBehaviour<WideBlock.Command>.Stop() CharacterBehaviour.Character CharacterBehaviour.Animator CharacterBehaviour.MovableEntity CharacterBehaviour.AttackManager CharacterBehaviour.BlockBehaviours(Type[]) CharacterBehaviour.UnblockBehaviours(Type[]) CharacterBehaviour.StopBehaviours(Type[]) CharacterBehaviour.IsPlaying<T>() EntityBehaviour.Enabled EntityBehaviour.Entity EntityBehaviour.GetBehaviours(Type) EntityBehaviour.GetBehaviour(Type) EntityBehaviour.GetBehaviours<T>() EntityBehaviour.GetBehaviour<T>() EntityBehaviour.EnableBehaviours(Type[]) EntityBehaviour.DisableBehaviours(Type[]) BaseComponent.Register(Action) BaseComponent.Unregister(String) BaseComponent.InvokeWhen(Func<Boolean>, Action) BaseComponent.Cancel(String) BaseComponent.StartTimeout(Action, Single) BaseComponent.StartInterval(Action, Single) BaseComponent.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class WideBlock : PhasedBehaviour<WideBlock.Command>, IBlockBehaviour, IControlledBehaviour, IPlayableBehaviour Fields activeTime Declaration public float activeTime Field Value Type Description Single anticipateTime Declaration public float anticipateTime Field Value Type Description Single blockableAttacks Declaration public WideBlock.BlockDefinition[] blockableAttacks Field Value Type Description WideBlock.BlockDefinition [] blockWindowDuration Declaration public float blockWindowDuration Field Value Type Description Single blockWindowStartTime Declaration public float blockWindowStartTime Field Value Type Description Single damageMultiplier Declaration public float damageMultiplier Field Value Type Description Single invincibleTime Declaration public float invincibleTime Field Value Type Description Single onFinishInvincible Declaration public ExtEvent onFinishInvincible Field Value Type Description ExtEvent onStartInvincible Declaration public ExtEvent onStartInvincible Field Value Type Description ExtEvent recoveryTime Declaration public float recoveryTime Field Value Type Description Single Properties Invincible Declaration public bool Invincible { get; } Property Value Type Description Boolean Invincible to hits. It also sets the animator parameter: WideBlock-invincible . Playing Declaration public override bool Playing { get; } Property Value Type Description Boolean Overrides PhasedBehaviour<WideBlock.Command>.Playing Methods ActivePhase() Declaration protected override IEnumerator ActivePhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<WideBlock.Command>.ActivePhase() AnticipationPhase() Declaration protected override IEnumerator AnticipationPhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<WideBlock.Command>.AnticipationPhase() Awake() Declaration protected override void Awake() Overrides CharacterBehaviour.Awake() CanPlay(WideBlock.Command) Declaration public override bool CanPlay(WideBlock.Command command) Parameters Type Name Description WideBlock.Command command Returns Type Description Boolean Overrides PlayableBehaviour<WideBlock.Command>.CanPlay(WideBlock.Command) DoPlay(WideBlock.Command) Declaration protected override void DoPlay(WideBlock.Command command) Parameters Type Name Description WideBlock.Command command Overrides PhasedBehaviour<WideBlock.Command>.DoPlay(WideBlock.Command) DoStop() Declaration protected override void DoStop() Overrides PhasedBehaviour<WideBlock.Command>.DoStop() RecoveryPhase() Declaration protected override IEnumerator RecoveryPhase() Returns Type Description System.Collections.Generic.IEnumerator Overrides PhasedBehaviour<WideBlock.Command>.RecoveryPhase() TryBlock(Hit) Declaration public bool TryBlock(Hit hit) Parameters Type Name Description Hit hit Returns Type Description Boolean Implements IBlockBehaviour IControlledBehaviour IPlayableBehaviour"
  },
  "index.html": {
    "href": "index.html",
    "title": "Heroes of the Shrine | Heroes of the Shrine",
    "keywords": "Heroes of the Shrine"
  },
  "manual/add-encounters.html": {
    "href": "manual/add-encounters.html",
    "title": "Add Encounters | Heroes of the Shrine",
    "keywords": "Add Encounters Enemies in the game are often spawned in a form of an encounter. The encounter is divided to waves, and when one wave finishes, the next will invoke. Camera Behaviour While in encounter, the camera border is restricted between two X coordinated. The camera will follow the player between these positions, but it will not exceed. When the encounter is over, the camera border will return back to normal. If an encounter starts and the camera is not yet inside the restricted border, it will follow the player into the border. While the encounter is active, the player cannot exceed the camera border. However, enemies can exceed the border, to prevent them from being trapped between the player and border. Add an Encounter Create an empty game object, and give it an indicative name. Add a trigger for the encounter. More info in Adding Triggrs . Instead, you can also attach the encounter to an existing UnityEvent , such as Post Cutscene Event . Add the Encounter Action component, located in Assets/Scripts/Level/Actions . From the trigger, attach the method Invoke of the new Encounter Action. Customization Wave announcer Wave announcer is a prefab of a UI object that will be activated once a wave starts. The prefab must have the component Wave Announcer . The component accepts a property Text , which is a reference to a TextMeshPro component. It's used to display the announcement: \"Wave X begins!\". Wave definitions Wave definitions is a list where each element defines a wave in the encounter, and each wave is a list of enemy definitions. Each instance of an enemy has to be defined separately. The defined enemies are spawned when the wave starts, and the player has to eliminate them to finish the wave. Each enemy definiton has the following properties: prefab : Enemy to spawn. Direction : Side of the camera border from which the enemy walks into the encounter ( Left or Right ). Z : Z coordinate from in which the enemy spawns. Part of wave : If true, the enemy has to be eliminated in order to finish the wave. First wave pre spawned enemies List of enemy objects from the scene (not prefabs). The player has to eliminate them to finish the first wave, in addition to the enemies spawned in that wave (if any). Time to alarm Delay (in seconds) before enemies start attacking the player. This property affects all the enemies defined in Wave definitions (regardless of whether they are Part of wave ), and also enemies defined in First wave pre spawned enemies . When the delay finishes, it will activate a trigger animator parameter called Alarm . Camera border Border of the camera during the encounter. More info in Camera Behaviour section. Spawn source distance Specifies the distance outside the camera border where enemies are spawned. Enemies should enter the camera border by themselves. Post encounter event UnityEvent to invoke when the encounter is over. Pick an object or drag one in, and select any of its methods to invoke."
  },
  "manual/add-triggers.html": {
    "href": "manual/add-triggers.html",
    "title": "Add Triggers | Heroes of the Shrine",
    "keywords": "Add Triggers Triggers are components that invoke a UnityEvent based on a defined condition in the level. Once a trigger fires, it cannot fire again. Use triggers to check conditions that depend on the scene state in that certain point of time. Triggers never depend on other triggers, and should not be used to react to another action. For example, \"Encounter is over\" is not a trigger, but simply a UnityEvent in Encounter Action . Add a trigger Create an empty game object, and give it an indicative name. Attach the trigger component that you want, located in Scripts/Level/Triggers . Define the properties required by the trigger you have chosen. Attach an action by clicking '+'. First, select the game object on which the action occurs. Using the dropdown in the right, select the function that will be invoked by the trigger, in one of the components. Note The action can even be a function on the same object. For example, you can create an object with a line trigger that invokes an encounter action , both on the same game object. Available Triggers Line Trigger : fires when the player position in the X axis, is greater than the specified Minimum X . When editing, a purple line Gizmo is drawn, representing Minimum X . Rect Trigger : fires when the player enters a rectangle on the ground. When editing, a purple rectangle Gizmo is drawn, representing the rectangle's position and size . Even though position and size are Vector3 , the Y value is ignored. Death Trigger : fires when the player dies. If the player dies while being in knockback, it will fire once they land. Warning The player object might not be destroyed when the trigger fires, because Die Behaviour may define a death animation , which starts after the trigger is fired."
  },
  "manual/create-cutscenes.html": {
    "href": "manual/create-cutscenes.html",
    "title": "Creating Cutscenes | Heroes of the Shrine",
    "keywords": "Creating Cutscenes Use cutscenes in the game to override normal game behaviour. Cutscenes block player input, and disable enemies' state machines. Wikipedia defines cutscenes as such: A cutscene is a sequence in a video game that is not interactive, interrupting the gameplay. Such scenes are used to show conversations between characters, set the mood, reward the player, introduce newer models and gameplay elements, show the effects of a player's actions, create emotional connections, improve pacing or foreshadow future events. Cutscenes are represented by a Unity Timeline . Timelines can contain multiple tracks, that modify properties of scene objects over time. They can be used to create animations, move objects around, and even call functions on components! Cutscenes should be constant, meaning object positions will never be relative to the positions before the cutscene. To overcome this issue, Cutscene Action will move characters from their previous position, to a specified initial position. Important Before the cutscene starts, make sure there are no spawned enemies in the scene. Spawned enemies cannot have a move definition . Their state machine will be disabled once the cutscene starts, and it might look weird. Create a Cutscene Create an empty game object, and give it an indicative name. Add a trigger for the cutscene. More info in Adding Triggrs . Instead, you can also attach the cutscene to an existing UnityEvent , such as Post Encounter Event . Add the Cutscene Action component, located in Assets/Scripts/Level/Actions . From the trigger, attach the method Invoke of the new Cutscene Action. Create a new folder in Assets/Timelines . Give it an indicative name that describes the cutscene. Inside the folder, create a timeline asset, and give it the same name as the folder. In the same object, attach a Playable Director component. Change the Playable to the timeline you have created, and make sure that Play On Awake is unchecked (unless this cutscene should play on level start). Drag the Playable Director to the director property of the Cutscene Action . In the hierarchy, select the cutscene object you added. Open the Timeline window where you can edit tracks, and start adding tracks (by clicking '+') to build the cutscene! Customization Move Definitions Define where characters from the scene should move before the encounter starts. Note The Target must have a Forced Walk Behaviour component attached. Director Playable Director component that contains the timeline to play. Post Cutscene Event UnityEvent to invoke when the cutscene is over. Pick an object or drag one in, and select any of its methods to invoke. Useful Tracks Animation Track Animation Track is used to animate objects, as well as change their properties over time (e.g. move them around). Each animation track is related to a single object in the scene. To animate an object in the timeline, it must have an Animator component, even if it doesn't have an animator controller (animations state machine). Each track can modify multiple properties, but it is recommended to split an animation to multiple tracks where it fits. To create a new Animation Track , follow these steps (if the track is based on an existing clip, skip step 1): Go to your timeline folder in Assets/Timelines . Create a new animation clip and give it an indicative name. Select the game object that contains the timeline, click the '+' icon in the timeline window, and select \"Animation Track\". Drag the object you want to animate from the scene. If the object doesn't already have an Animator , make one and then drag it to the track. Right click the new track, and select \"Add From Animation Clip\". There, select the clip you created in step 1 (or a clip you already have). Double click in the track area to open the animation clip. Start adding keyframes that change properties over time. Warning Unfortunately, editing properties of a movable object does not reflect in the scene while editing them. Note By default, the interpolation of a float value between two keyframes, is not linear and has a certain smooth curve: In order to change it to linear, from the animation window click the \"Curves\" button in the bottom. Select all keyframes (Ctrl+A), right click on one of them and select \"Both Tangents\" -> \"Linear\". The curve should become linear. Click the \"Dropsheet\" button in the bottom to see the normal animation window again. If you select the clip (grey rectangle in the track), you will see the following in the inspector: Using these properties, you can set a Speed Multiplier for the clip, and change the extrapolation between clips. Activation Track Activation Track is used to change activate and deactivate objects. Deactivated objects do not appear in the game, and cannot affect the game in any way. To create a new Activation Track , follow these steps: Select the game object that contains the timeline, click the '+' icon in the timeline window, and select \"Activation Track\". Drag the object you want to modify from the scene. The rectangle in the timeline specifies when the object is active inside the cutscene. Signal Track Signal Track is used to call a functions on a component of any object in the scene. They use the familiar UnityEvent API. To create a new Signal Track , follow these steps: Select the game object that contains the timeline, and add the component Signal Receiver , if it wasn't already attached. Click the \"Add Reaction\" icon inside the component to add a new signal reaction. Inside the dropdown, select an existing Signal or create a new one. Store them inside Assets/Timelines/Signals , and give the signal an indicative name. Click the '+' icon inside the reaction. Attach a UnityEvent that will be invoked when the selected signal is emitted. First, select the game object that has the function. Using the dropdown in the right, select the function that will be invoked by the trigger, in one of the components. Select the game object that contains the timeline, click the '+' icon in the timeline window, and select \"Signal Track\". Drag the game object that contains the timeline to the empty field. Right click inside the track area, and select \"Add Signal Emitter\". From the inspector, change the Emit Signal to the signal you used in the Signal Receiver component."
  },
  "manual/create-scenes.html": {
    "href": "manual/create-scenes.html",
    "title": "Creating Scenes | Heroes of the Shrine",
    "keywords": "Creating Scenes Heroes of the Shrine is divided into scenes. The Unity manual states: Scenes are where you work with content in Unity. They are assets that contain all or part of a game or application. For example, you might build a simple game in a single scene, while for a more complex game, you might use one scene per level, each with its own environments, characters, obstacles, decorations, and UI . You can create any number of scenes in a project. Each level can rely on multiple scenes, each representing a different part in the level. Scene transitions are costy in terms of client resources, thus they shouldn't occur very often. However, and even more important, is to use scenes where it fits. Scene Structure In our game, each scenes should have a Scene Root game object. Scene Root is a prefab, located in Assets/Prefabs , and it contains essential global objects and scripts (and even the player itself). Scenes will also contain enemies, UI, and level definitions (encounters, transitions, cutscenes, etc.) Note All UI elements must live under the Canvas object in the Scene Root . Create a Scene To add a new scene follow these steps: Create a scene asset in Assets/Scenes . Give it an indicative name, such as Level3Forest . Get inside your new scene, by double clicking the asset. Delete the Main Camera object that is included in the scene template. The Scene Root you are about to add, has a camera that already conatins all needed scripts. Add Scene Root to the scene, by dragging it from Assets/Prefabs/Scene Root . Add scene background using normal 2D sprites. Set the walkable grid position and size . Set world border in the camera's Camera Movement component. Set the camera's initial position using its transform . Note The initial offset between camera position to the player position is kept through the scene. If you want to change the camera zoom, go to the component Pixel Perfect Camera . Click \"Run In Edit Mode\", and play with the value of Assets Pixels Per Unit . Add the entrance cutscene inside Player Entrance object. Refer to the cutscenes manual , and skip steps 1-4 because they have already been done in Scene Root . Also, in step 7, the Playable Director already exists. You only need to attach the timeline from step 6 to it. Warning The player position should always stay inside the walkable grid . To achieve that, set the player's position (in Movable Object ) to be inside the walkable grid . Also, if you animate the position inside the timeline, make sure it is always inside the grid, even in the first frame. In Player Death , set the Objects To Destroy . The list should have the HUD (by default), and the foreground sprite of the level (you have to select it manually). Add the enemies, encounters, hazards and cutscenes - everything that makes this scene unique. Save your changes! Warning Ctrl+S is usually sufficient for saving, but sometimes it might skip some parts. In order to make sure you saved everything, right click the scene object in the hierarchy, and click \"Save Scene\"."
  }
}